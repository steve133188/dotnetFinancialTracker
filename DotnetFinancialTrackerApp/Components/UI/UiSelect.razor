@typeparam T
@using System.Linq.Expressions
@using System.Collections.Generic

<MudSelect T="T"
           @attributes="AdditionalAttributes"
           Label="@Label"
           Variant="Variant"
           Margin="Margin"
           Dense="Dense"
           DisableUnderLine="DisableUnderLine"
           Disabled="Disabled"
           Class="@BuildClass()"
           Value="Value"
           ValueChanged="ValueChanged"
           ValueExpression="ValueExpression"
           HelperText="@HelperText">
    @ChildContent
</MudSelect>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public Margin Margin { get; set; } = Margin.None;
    [Parameter] public bool Dense { get; set; }
    [Parameter] public bool DisableUnderLine { get; set; } = true;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string? HelperText { get; set; }

    [Parameter] public T Value { get; set; } = default!;
    [Parameter] public EventCallback<T> ValueChanged { get; set; }
    [Parameter] public Expression<Func<T>>? ValueExpression { get; set; }

    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }

    private string BuildClass() => string.IsNullOrWhiteSpace(Class) ? "ui-select" : $"ui-select {Class}";

}
