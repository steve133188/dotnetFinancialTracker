@using System.Text.Json

<div class="ai-chat-container @AdditionalClasses">
    <div class="ai-chat-header">
        <div class="ai-chat-header-content">
            <div class="ai-chat-assistant-avatar">
                <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Small" />
            </div>
            <div class="ai-chat-assistant-info">
                <div class="ai-assistant-name">Kipi Assistant</div>
                <div class="ai-assistant-status">@GetStatusText()</div>
            </div>
        </div>
        @if (AllowMinimize)
        {
            <button class="ai-chat-minimize-btn" @onclick="OnMinimize">
                <MudIcon Icon="@(IsMinimized ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)" Size="Size.Small" />
            </button>
        }
    </div>

    @if (!IsMinimized)
    {
        <div class="ai-chat-messages" @ref="messagesContainer">
            @foreach (var message in Messages)
            {
                <div class="ai-message @(message.IsUser ? "ai-message--user" : "ai-message--assistant")">
                    @if (!message.IsUser)
                    {
                        <div class="ai-message-avatar">
                            <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Small" />
                        </div>
                    }
                    <div class="ai-message-bubble">
                        @if (message.IsUser)
                        {
                            <div class="ai-message-text">@message.Content</div>
                        }
                        else
                        {
                            <div class="ai-message-text">@((MarkupString)FormatAssistantMessage(message.Content))</div>
                            @if (message.Suggestions?.Any() == true)
                            {
                                <div class="ai-message-suggestions">
                                    @foreach (var suggestion in message.Suggestions)
                                    {
                                        <button class="ai-suggestion-chip" @onclick="() => SendSuggestion(suggestion)">
                                            @suggestion
                                        </button>
                                    }
                                </div>
                            }
                        }
                    </div>
                    @if (message.IsUser)
                    {
                        <div class="ai-message-avatar ai-message-avatar--user">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" />
                        </div>
                    }
                </div>
            }

            @if (IsTyping)
            {
                <div class="ai-message ai-message--assistant">
                    <div class="ai-message-avatar">
                        <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Small" />
                    </div>
                    <div class="ai-message-bubble ai-typing-indicator">
                        <div class="typing-dots">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="ai-chat-input">
            @if (ShowQuickActions && QuickActions.Any())
            {
                <div class="ai-quick-actions">
                    @foreach (var action in QuickActions)
                    {
                        <button class="ai-quick-action" @onclick="() => SendQuickAction(action)">
                            <MudIcon Icon="@action.Icon" Size="Size.Small" />
                            <span>@action.Label</span>
                        </button>
                    }
                </div>
            }

            <div class="ai-input-container">
                <MudTextField @bind-Value="currentMessage"
                              Placeholder="Ask about your family finances..."
                              Variant="Variant.Outlined"
                              Margin="Margin.None"
                              Class="ai-input-field"
                              OnKeyPress="HandleKeyPress"
                              Disabled="IsTyping" />
                <button class="ai-send-btn" @onclick="SendMessage" disabled="@(IsTyping || string.IsNullOrWhiteSpace(currentMessage))">
                    <MudIcon Icon="@Icons.Material.Filled.Send" Size="Size.Small" />
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public List<ChatMessage> Messages { get; set; } = new();
    [Parameter] public bool IsTyping { get; set; }
    [Parameter] public bool IsMinimized { get; set; }
    [Parameter] public bool AllowMinimize { get; set; } = true;
    [Parameter] public bool ShowQuickActions { get; set; } = true;
    [Parameter] public List<QuickAction> QuickActions { get; set; } = new();
    [Parameter] public string AdditionalClasses { get; set; } = "";
    [Parameter] public EventCallback<string> OnSendMessage { get; set; }
    [Parameter] public EventCallback OnMinimize { get; set; }

    private ElementReference messagesContainer;
    private string currentMessage = "";

    protected override void OnInitialized()
    {
        // Initialize with default quick actions if none provided
        if (!QuickActions.Any())
        {
            QuickActions = new List<QuickAction>
            {
                new("üí∞", "Check balances", "balances"),
                new("üìä", "Monthly report", "report"),
                new("üéØ", "Budget status", "budget"),
                new("üèÜ", "Family goals", "goals")
            };
        }

        // Add welcome message if no messages exist
        if (!Messages.Any())
        {
            Messages.Add(new ChatMessage
            {
                Content = "Hi! I'm your family's financial assistant. I can help you check balances, review spending, set goals, and answer questions about your finances. What would you like to know?",
                IsUser = false,
                Timestamp = DateTime.Now,
                Suggestions = new[] { "Show family balances", "How are we doing this month?", "Set a savings goal" }
            });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (messagesContainer.Context != null)
        {
            await messagesContainer.FocusAsync();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || IsTyping) return;

        var message = currentMessage.Trim();
        currentMessage = "";

        Messages.Add(new ChatMessage
        {
            Content = message,
            IsUser = true,
            Timestamp = DateTime.Now
        });

        StateHasChanged();
        await OnSendMessage.InvokeAsync(message);
    }

    private async Task SendSuggestion(string suggestion)
    {
        currentMessage = suggestion;
        await SendMessage();
    }

    private async Task SendQuickAction(QuickAction action)
    {
        currentMessage = action.Command;
        await SendMessage();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private string GetStatusText()
    {
        if (IsTyping) return "Thinking...";
        return "Ready to help";
    }

    private string FormatAssistantMessage(string content)
    {
        // Simple formatting for assistant messages
        content = content.Replace("**", "<strong>").Replace("**", "</strong>");
        content = content.Replace("\n", "<br>");
        return content;
    }

    public class ChatMessage
    {
        public string Content { get; set; } = "";
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; }
        public string[]? Suggestions { get; set; }
    }

    public class QuickAction
    {
        public QuickAction(string icon, string label, string command)
        {
            Icon = icon;
            Label = label;
            Command = command;
        }

        public string Icon { get; set; }
        public string Label { get; set; }
        public string Command { get; set; }
    }
}

<style>
.ai-chat-container {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(1, 255, 255, 0.2);
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
    max-width: 480px;
    width: 100%;
}

.ai-chat-header {
    background: linear-gradient(135deg, rgba(1, 255, 255, 0.15) 0%, rgba(255, 255, 255, 0.95) 100%);
    padding: 16px 20px;
    border-bottom: 1px solid rgba(1, 255, 255, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.ai-chat-header-content {
    display: flex;
    align-items: center;
    gap: 12px;
}

.ai-chat-assistant-avatar {
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, #01FFFF 0%, #00E5E5 100%);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #000000;
}

.ai-chat-assistant-info {
    display: flex;
    flex-direction: column;
}

.ai-assistant-name {
    font-size: 1rem;
    font-weight: 700;
    color: #000000;
}

.ai-assistant-status {
    font-size: 0.75rem;
    color: rgba(0, 0, 0, 0.6);
}

.ai-chat-minimize-btn {
    width: 32px;
    height: 32px;
    border: 1px solid rgba(1, 255, 255, 0.2);
    border-radius: 8px;
    background: rgba(255, 255, 255, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    color: #000000;
    cursor: pointer;
    transition: all 0.15s ease;
}

.ai-chat-minimize-btn:hover {
    background: rgba(1, 255, 255, 0.2);
    border-color: rgba(1, 255, 255, 0.4);
}

.ai-chat-messages {
    padding: 20px;
    max-height: 400px;
    overflow-y: auto;
    scroll-behavior: smooth;
}

.ai-message {
    display: flex;
    gap: 12px;
    margin-bottom: 20px;
}

.ai-message--user {
    flex-direction: row-reverse;
}

.ai-message-avatar {
    width: 32px;
    height: 32px;
    background: linear-gradient(135deg, #01FFFF 0%, #00E5E5 100%);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #000000;
    flex-shrink: 0;
}

.ai-message-avatar--user {
    background: linear-gradient(135deg, #4ECDC4 0%, #44A08D 100%);
}

.ai-message-bubble {
    background: rgba(255, 255, 255, 0.8);
    border: 1px solid rgba(1, 255, 255, 0.1);
    border-radius: 16px;
    padding: 12px 16px;
    max-width: 280px;
    font-size: 0.875rem;
    line-height: 1.5;
}

.ai-message--user .ai-message-bubble {
    background: linear-gradient(135deg, rgba(1, 255, 255, 0.15) 0%, rgba(255, 255, 255, 0.9) 100%);
    border-color: rgba(1, 255, 255, 0.3);
}

.ai-message-text {
    color: #000000;
}

.ai-message-suggestions {
    margin-top: 12px;
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
}

.ai-suggestion-chip {
    background: rgba(1, 255, 255, 0.1);
    border: 1px solid rgba(1, 255, 255, 0.2);
    border-radius: 12px;
    padding: 4px 8px;
    font-size: 0.75rem;
    color: #000000;
    cursor: pointer;
    transition: all 0.15s ease;
}

.ai-suggestion-chip:hover {
    background: rgba(1, 255, 255, 0.2);
    border-color: rgba(1, 255, 255, 0.4);
}

.ai-typing-indicator {
    padding: 16px;
}

.typing-dots {
    display: flex;
    gap: 4px;
}

.typing-dots span {
    width: 6px;
    height: 6px;
    background: #01FFFF;
    border-radius: 50%;
    animation: typing 1.4s infinite ease-in-out;
}

.typing-dots span:nth-child(1) { animation-delay: -0.32s; }
.typing-dots span:nth-child(2) { animation-delay: -0.16s; }

@@keyframes typing {
    0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
    40% { transform: scale(1.2); opacity: 1; }
}

.ai-chat-input {
    padding: 16px 20px;
    border-top: 1px solid rgba(1, 255, 255, 0.1);
    background: rgba(255, 255, 255, 0.5);
}

.ai-quick-actions {
    display: flex;
    gap: 8px;
    margin-bottom: 12px;
    overflow-x: auto;
    padding-bottom: 4px;
}

.ai-quick-action {
    display: flex;
    align-items: center;
    gap: 6px;
    background: rgba(1, 255, 255, 0.1);
    border: 1px solid rgba(1, 255, 255, 0.2);
    border-radius: 12px;
    padding: 6px 12px;
    font-size: 0.75rem;
    color: #000000;
    cursor: pointer;
    transition: all 0.15s ease;
    white-space: nowrap;
}

.ai-quick-action:hover {
    background: rgba(1, 255, 255, 0.2);
    border-color: rgba(1, 255, 255, 0.4);
}

.ai-input-container {
    display: flex;
    gap: 8px;
    align-items: flex-end;
}

.ai-input-field {
    flex: 1;
}

.ai-send-btn {
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, #01FFFF 0%, #00E5E5 100%);
    border: none;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #000000;
    cursor: pointer;
    transition: all 0.15s ease;
}

.ai-send-btn:hover:not(:disabled) {
    transform: scale(1.05);
    box-shadow: 0 4px 16px rgba(1, 255, 255, 0.3);
}

.ai-send-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

@@media (max-width: 767px) {
    .ai-chat-container {
        max-width: 100%;
        border-radius: 16px;
    }

    .ai-chat-messages {
        padding: 16px;
        max-height: 300px;
    }

    .ai-message-bubble {
        max-width: 240px;
        padding: 10px 12px;
    }

    .ai-chat-input {
        padding: 12px 16px;
    }

    .ai-quick-actions {
        margin-bottom: 8px;
    }
}
</style>