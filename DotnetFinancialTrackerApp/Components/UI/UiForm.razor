@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.Generic
@implements IDisposable

<EditForm @attributes="AdditionalAttributes"
          EditContext="_editContext"
          class="@Class"
          OnValidSubmit="HandleValidSubmit"
          OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <CascadingValue Value="_editContext">
        @ChildContent
    </CascadingValue>
</EditForm>

@code {
    [Parameter] public object Model { get; set; } = default!;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<EditContext> OnValidSubmit { get; set; }
    [Parameter] public EventCallback<EditContext> OnInvalidSubmit { get; set; }
    [Parameter] public EventCallback<EditContext> OnChanged { get; set; }
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }

    private EditContext? _editContext;

    protected override void OnParametersSet()
    {
        if (Model is null)
        {
            throw new InvalidOperationException("UiForm requires a non-null Model.");
        }

        if (_editContext is null || !ReferenceEquals(_editContext.Model, Model))
        {
            if (_editContext is not null)
            {
                _editContext.OnFieldChanged -= HandleFieldChanged;
            }

            _editContext = new EditContext(Model);
            _editContext.OnFieldChanged += HandleFieldChanged;
        }
    }

    private Task HandleValidSubmit() => OnValidSubmit.HasDelegate
        ? OnValidSubmit.InvokeAsync(_editContext!)
        : Task.CompletedTask;

    private Task HandleInvalidSubmit() => OnInvalidSubmit.HasDelegate
        ? OnInvalidSubmit.InvokeAsync(_editContext!)
        : Task.CompletedTask;

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (OnChanged.HasDelegate)
        {
            OnChanged.InvokeAsync(_editContext!);
        }
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnFieldChanged -= HandleFieldChanged;
        }
    }
}
