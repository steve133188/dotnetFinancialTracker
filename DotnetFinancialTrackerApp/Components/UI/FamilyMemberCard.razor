@using System.Globalization

<div class="family-member-card family-member-card--@(Role.ToLower()) @AdditionalClasses" @onclick="OnClick">
    <div class="family-member-header">
        <div class="family-member-avatar">
            <MudAvatar Size="Size.Large" Color="@GetAvatarColor()" Class="member-avatar">
                @GetInitials(Name)
            </MudAvatar>
            @if (IsOnline)
            {
                <div class="member-online-indicator"></div>
            }
        </div>

        <div class="family-member-info">
            <div class="member-name">@Name</div>
            <div class="member-role">@Role</div>
            @if (LastActivity.HasValue)
            {
                <div class="member-activity">Active @GetRelativeTime(LastActivity.Value)</div>
            }
        </div>

        @if (ShowActions)
        {
            <div class="family-member-actions">
                <button class="member-action-btn" @onclick:stopPropagation="true" @onclick="OnViewTransactions" title="View transactions">
                    <MudIcon Icon="@Icons.Material.Filled.Receipt" Size="Size.Small" />
                </button>
                <button class="member-action-btn" @onclick:stopPropagation="true" @onclick="OnSendMoney" title="Send money">
                    <MudIcon Icon="@Icons.Material.Filled.Send" Size="Size.Small" />
                </button>
            </div>
        }
    </div>

    <div class="family-member-balance">
        <div class="member-balance-label">Available Balance</div>
        <div class="member-balance-amount">@Balance.ToString("C", CultureInfo.CurrentCulture)</div>
        @if (MonthlyAllowance > 0)
        {
            <div class="member-allowance">Monthly allowance: @MonthlyAllowance.ToString("C", CultureInfo.CurrentCulture)</div>
        }
    </div>

    @if (ShowSpendingLimit)
    {
        <div class="family-member-limits">
            <div class="limit-header">
                <span class="limit-label">Spending Limit</span>
                <span class="limit-usage">@SpentThisMonth.ToString("C") / @SpendingLimit.ToString("C")</span>
            </div>
            <div class="limit-progress-container">
                <div class="limit-progress-bar">
                    <div class="limit-progress-fill" style="width: @(Math.Min(100, (double)(SpentThisMonth / SpendingLimit) * 100))%"></div>
                </div>
                <div class="limit-percentage">@(Math.Min(100, (double)(SpentThisMonth / SpendingLimit) * 100)):0f)%</div>
            </div>
        </div>
    }

    @if (ShowQuickStats)
    {
        <div class="family-member-stats">
            <div class="member-stat">
                <div class="stat-value">@TransactionsThisMonth</div>
                <div class="stat-label">Transactions</div>
            </div>
            <div class="member-stat">
                <div class="stat-value">@SavingsGoalProgress.ToString("P0")</div>
                <div class="stat-label">Savings Goal</div>
            </div>
            <div class="member-stat">
                <div class="stat-value">@AchievementPoints</div>
                <div class="stat-label">Points</div>
            </div>
        </div>
    }

    @if (ShowVirtualCard)
    {
        <div class="virtual-card-preview" @onclick:stopPropagation="true" @onclick="OnShowCard">
            <div class="virtual-card-mini">
                <div class="card-chip"></div>
                <div class="card-number">•••• •••• •••• @CardLastFour</div>
                <div class="card-holder">@Name.ToUpper()</div>
            </div>
        </div>
    }

    @ChildContent
</div>

@code {
    [Parameter] public string Name { get; set; } = "";
    [Parameter] public string Role { get; set; } = "Member"; // Parent, Teen, Child
    [Parameter] public decimal Balance { get; set; }
    [Parameter] public decimal MonthlyAllowance { get; set; }
    [Parameter] public bool IsOnline { get; set; }
    [Parameter] public DateTime? LastActivity { get; set; }
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool ShowSpendingLimit { get; set; } = true;
    [Parameter] public decimal SpendingLimit { get; set; }
    [Parameter] public decimal SpentThisMonth { get; set; }
    [Parameter] public bool ShowQuickStats { get; set; } = true;
    [Parameter] public int TransactionsThisMonth { get; set; }
    [Parameter] public double SavingsGoalProgress { get; set; }
    [Parameter] public int AchievementPoints { get; set; }
    [Parameter] public bool ShowVirtualCard { get; set; } = true;
    [Parameter] public string CardLastFour { get; set; } = "1234";
    [Parameter] public string AdditionalClasses { get; set; } = "";
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public EventCallback OnViewTransactions { get; set; }
    [Parameter] public EventCallback OnSendMoney { get; set; }
    [Parameter] public EventCallback OnShowCard { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private Color GetAvatarColor()
    {
        return Role.ToLower() switch
        {
            "parent" => Color.Primary,
            "teen" => Color.Secondary,
            "child" => Color.Info,
            _ => Color.Default
        };
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "?";
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 1) return parts[0].Substring(0, 1).ToUpper();
        return (parts[0].Substring(0, 1) + parts[^1].Substring(0, 1)).ToUpper();
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        if (timeSpan.TotalMinutes < 1) return "just now";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours}h ago";
        return $"{(int)timeSpan.TotalDays}d ago";
    }
}

<style>
.family-member-card {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(1, 255, 255, 0.2);
    border-radius: 20px;
    padding: 24px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
    transition: all 0.25s ease;
    position: relative;
    cursor: pointer;
}

.family-member-card:hover {
    transform: translateY(-1px);
    box-shadow: 0 12px 48px rgba(0, 0, 0, 0.12);
}

.family-member-card--parent {
    border-left: 4px solid #01FFFF;
}

.family-member-card--teen {
    border-left: 4px solid #FF6B35;
}

.family-member-card--child {
    border-left: 4px solid #4ECDC4;
}

.family-member-header {
    display: flex;
    align-items: flex-start;
    gap: 16px;
    margin-bottom: 20px;
}

.family-member-avatar {
    position: relative;
}

.member-avatar {
    border-radius: 16px;
}

.member-online-indicator {
    position: absolute;
    bottom: 2px;
    right: 2px;
    width: 12px;
    height: 12px;
    background: #4CAF50;
    border: 2px solid #FFFFFF;
    border-radius: 50%;
}

.family-member-info {
    flex: 1;
}

.member-name {
    font-size: 1.25rem;
    font-weight: 700;
    color: #000000;
    margin-bottom: 2px;
}

.member-role {
    font-size: 0.875rem;
    color: rgba(0, 0, 0, 0.7);
    text-transform: capitalize;
    margin-bottom: 4px;
}

.member-activity {
    font-size: 0.75rem;
    color: rgba(0, 0, 0, 0.5);
}

.family-member-actions {
    display: flex;
    gap: 8px;
}

.member-action-btn {
    width: 36px;
    height: 36px;
    border: 1px solid rgba(1, 255, 255, 0.2);
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.5);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    display: flex;
    align-items: center;
    justify-content: center;
    color: #000000;
    cursor: pointer;
    transition: all 0.15s ease;
}

.member-action-btn:hover {
    background: rgba(1, 255, 255, 0.2);
    border-color: rgba(1, 255, 255, 0.4);
    transform: scale(1.05);
}

.family-member-balance {
    margin-bottom: 20px;
}

.member-balance-label {
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    color: rgba(0, 0, 0, 0.6);
    margin-bottom: 4px;
}

.member-balance-amount {
    font-size: 1.75rem;
    font-weight: 700;
    color: #000000;
    margin-bottom: 4px;
}

.member-allowance {
    font-size: 0.875rem;
    color: rgba(0, 0, 0, 0.7);
}

.family-member-limits {
    margin-bottom: 20px;
}

.limit-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
}

.limit-label {
    font-size: 0.875rem;
    font-weight: 600;
    color: #000000;
}

.limit-usage {
    font-size: 0.75rem;
    color: rgba(0, 0, 0, 0.7);
}

.limit-progress-container {
    display: flex;
    align-items: center;
    gap: 12px;
}

.limit-progress-bar {
    flex: 1;
    height: 8px;
    background: rgba(1, 255, 255, 0.1);
    border-radius: 4px;
    overflow: hidden;
}

.limit-progress-fill {
    height: 100%;
    background: linear-gradient(135deg, #01FFFF 0%, #00E5E5 100%);
    border-radius: 4px;
    transition: width 0.3s ease;
}

.limit-percentage {
    font-size: 0.75rem;
    font-weight: 600;
    color: #000000;
    min-width: 32px;
    text-align: right;
}

.family-member-stats {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
}

.member-stat {
    text-align: center;
    flex: 1;
}

.stat-value {
    font-size: 1.125rem;
    font-weight: 700;
    color: #000000;
    margin-bottom: 2px;
}

.stat-label {
    font-size: 0.625rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    color: rgba(0, 0, 0, 0.6);
}

.virtual-card-preview {
    margin-top: 16px;
    cursor: pointer;
}

.virtual-card-mini {
    aspect-ratio: 1.586 / 1;
    background: linear-gradient(135deg, #01FFFF 0%, #00E5E5 100%);
    border-radius: 12px;
    padding: 16px;
    color: #000000;
    position: relative;
    overflow: hidden;
    box-shadow: 0 4px 16px rgba(1, 255, 255, 0.3);
    transition: transform 0.2s ease;
}

.virtual-card-mini:hover {
    transform: scale(1.02);
}

.virtual-card-mini::before {
    content: '';
    position: absolute;
    top: -50%;
    right: -50%;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.2) 0%, transparent 70%);
    border-radius: 50%;
}

.card-chip {
    width: 24px;
    height: 18px;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.6) 100%);
    border-radius: 4px;
    margin-bottom: 12px;
}

.card-number {
    font-family: 'SF Mono', 'Monaco', 'Consolas', monospace;
    font-size: 0.875rem;
    font-weight: 600;
    letter-spacing: 0.1em;
    margin-bottom: 8px;
}

.card-holder {
    font-size: 0.75rem;
    font-weight: 700;
    letter-spacing: 0.05em;
}

@@media (max-width: 767px) {
    .family-member-card {
        padding: 20px;
    }

    .family-member-header {
        gap: 12px;
    }

    .member-name {
        font-size: 1.125rem;
    }

    .member-balance-amount {
        font-size: 1.5rem;
    }

    .family-member-stats {
        gap: 16px;
    }

    .virtual-card-mini {
        padding: 12px;
    }

    .card-number {
        font-size: 0.75rem;
    }
}
</style>