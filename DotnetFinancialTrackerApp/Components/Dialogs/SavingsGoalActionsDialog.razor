@using DotnetFinancialTrackerApp.Models
@using DotnetFinancialTrackerApp.Services
@inject ISavingsGoalService SavingsGoalSvc
@inject IDialogService DialogService

<MudDialog MaxWidth="MaxWidth.Medium">
    <TitleContent>
        <MudText Typo="Typo.h6">Goal Actions</MudText>
    </TitleContent>

    <DialogContent>
        @if (Goal != null)
        {
            <MudStack Spacing="3">
                <div class="goal-info">
                    <MudText Typo="Typo.h6">@Goal.Title</MudText>
                    <MudText Typo="Typo.body2" Class="mb-2">@Goal.Description</MudText>
                    <MudText Typo="Typo.body2">
                        Progress: @Goal.CurrentAmount.ToString("C") / @Goal.TargetAmount.ToString("C")
                        (@Goal.ProgressPercentage.ToString("F0")%)
                    </MudText>
                </div>

                <MudDivider />

                <MudStack Spacing="2">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Default"
                               Style="background-color: black; color: white;"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="ContributeToGoal"
                               FullWidth="true">
                        Contribute to Goal
                    </MudButton>

                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Default"
                               StartIcon="@Icons.Material.Filled.Edit"
                               OnClick="EditGoal"
                               FullWidth="true">
                        Edit Goal
                    </MudButton>

                    @if (Goal.IsActive)
                    {
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Default"
                                   StartIcon="@Icons.Material.Filled.Pause"
                                   OnClick="PauseGoal"
                                   FullWidth="true">
                            Pause Goal
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Default"
                                   StartIcon="@Icons.Material.Filled.PlayArrow"
                                   OnClick="ResumeGoal"
                                   FullWidth="true">
                            Resume Goal
                        </MudButton>
                    }

                    <MudButton Variant="Variant.Text"
                               Color="Color.Error"
                               StartIcon="@Icons.Material.Filled.Delete"
                               OnClick="DeleteGoal"
                               FullWidth="true">
                        Delete Goal
                    </MudButton>
                </MudStack>
            </MudStack>
        }
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text" Color="Color.Default">
            Cancel
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public SavingsGoal? Goal { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task ContributeToGoal()
    {
        if (Goal == null) return;

        var parameters = new DialogParameters
        {
            [nameof(ContributeToGoalDialog.Goal)] = Goal
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialog = DialogService.Show<ContributeToGoalDialog>("Contribute to Goal", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    private async Task EditGoal()
    {
        if (Goal == null) return;

        // For now, just close and let parent handle edit
        MudDialog.Close(DialogResult.Ok("edit"));
    }

    private async Task PauseGoal()
    {
        if (Goal == null) return;

        try
        {
            Goal.IsActive = false;
            await SavingsGoalSvc.UpdateAsync(Goal);
            MudDialog.Close(DialogResult.Ok("paused"));
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private async Task ResumeGoal()
    {
        if (Goal == null) return;

        try
        {
            Goal.IsActive = true;
            await SavingsGoalSvc.UpdateAsync(Goal);
            MudDialog.Close(DialogResult.Ok("resumed"));
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private async Task DeleteGoal()
    {
        if (Goal == null) return;

        bool? confirmed = await DialogService.ShowMessageBox(
            "Delete Goal",
            "Are you sure you want to delete this savings goal? This action cannot be undone.",
            yesText: "Delete",
            cancelText: "Cancel");

        if (confirmed == true)
        {
            try
            {
                await SavingsGoalSvc.DeleteAsync(Goal.Id);
                MudDialog.Close(DialogResult.Ok("deleted"));
            }
            catch (Exception ex)
            {
                // Handle error
            }
        }
    }
}

<style>
.goal-info {
    padding: 16px;
    background: #F8F9FA;
    border-radius: 8px;
    border: 1px solid rgba(0, 0, 0, 0.08);
}
</style>