@inherits LayoutComponentBase
@implements IDisposable
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Routing

<MudThemeProvider Theme="AppTheme.Theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout Class="mobile-shell">
    @if (_showTopBar)
    {
        <header class="mobile-topbar">
            <div class="topbar-brand">
                @if (ShouldShowBackButton())
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.ArrowBack" Color="Color.Inherit" OnClick="NavigateBack" Size="Size.Medium" Class="topbar-back" />
                }
                <MudAvatar Size="Size.Medium" Color="Color.Primary" Class="topbar-avatar">@UserInitial</MudAvatar>
                <div class="topbar-copy">
                    <MudText Typo="Typo.h6" Class="topbar-overline" >Kipi Family Bank</MudText>
                    <MudText Typo="Typo.subtitle1" Class="topbar-title">Keep it simple, together</MudText>
                </div>
            </div>

            <div class="topbar-actions">
                @if (Auth.IsAuthenticated)
                {
                    <MudMenu Icon="@Icons.Material.Outlined.AccountCircle" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight" Color="Color.Inherit">
                        <MudMenuItem Disabled="true">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <MudAvatar Color="Color.Primary" Size="Size.Small">@UserInitial</MudAvatar>
                                <MudText>@UserDisplay</MudText>
                            </MudStack>
                        </MudMenuItem>
                        <MudDivider />
                        <MudMenuItem Href="/settings" Icon="@Icons.Material.Outlined.Settings">Settings</MudMenuItem>
                        <MudMenuItem OnClick="SignOut" Icon="@Icons.Material.Outlined.Logout">Sign out</MudMenuItem>
                    </MudMenu>
                }
                else
                {
                    <MudButton Href="/login" Variant="Variant.Outlined" Color="Color.Primary" Class="topbar-signin">Sign in</MudButton>
                }
            </div>
        </header>
    }

    <MudMainContent Class="@(_showTopBar ? "mobile-main" : "mobile-main mobile-main-auth")">
        <div class="mobile-main-inner">
            @Body
        </div>
    </MudMainContent>

    @if (_showBottomNav)
    {
        <BottomNav />
    }
</MudLayout>

@code {
    [Inject] private NavigationManager Nav { get; set; } = default!;
    [Inject] private AuthState Auth { get; set; } = default!;

    private bool _showBottomNav;
    private bool _showTopBar;
    private string _currentPath = "/";
    private string _previousPath = "/";
    private static readonly HashSet<string> HiddenAuthChromeRoutes = new(StringComparer.OrdinalIgnoreCase)
    {
        "/login"
    };

    protected override void OnInitialized()
    {
        Auth.Changed += OnAuthChanged;
        Nav.LocationChanged += OnLocationChanged;
        UpdateChromeState();
    }

    protected override void OnParametersSet()
    {
        var uri = Nav.Uri;
        if (!Auth.IsAuthenticated && !uri.EndsWith("/login", StringComparison.OrdinalIgnoreCase))
        {
            Nav.NavigateTo("/login");
            return;
        }
    }

    private void OnAuthChanged()
    {
        UpdateChromeState();
        InvokeAsync(StateHasChanged);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateChromeState();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateChromeState()
    {
        var path = NormalizePath(Nav.ToBaseRelativePath(Nav.Uri));
        var hideForAuth = HiddenAuthChromeRoutes.Contains(path);
        _showTopBar = !hideForAuth;
        _showBottomNav = Auth.IsAuthenticated && !hideForAuth;

        if (!string.Equals(path, _currentPath, StringComparison.OrdinalIgnoreCase))
        {
            _previousPath = _currentPath;
            _currentPath = path;
        }
    }

    private string UserDisplay => Auth.IsAuthenticated ? $"Signed in as {Auth.CurrentUser!.Name}" : "Not signed in";
    private string UserInitial => GetInitial(Auth.CurrentUser?.Name);
    private void NavigateBack()
    {
        if (!string.IsNullOrWhiteSpace(_previousPath) && !_previousPath.Equals(_currentPath, StringComparison.OrdinalIgnoreCase))
        {
            Nav.NavigateTo(_previousPath);
        }
        else
        {
            Nav.NavigateTo("/");
        }
    }
    private void SignOut()
    {
        Auth.SignOut();
        Nav.NavigateTo("/login");
    }

    private static string GetInitial(string? name) => string.IsNullOrWhiteSpace(name)
        ? "K"
        : name.Substring(0, 1).ToUpperInvariant();

    private static string NormalizePath(string relative)
    {
        var clean = relative.Split('?', '#')[0];
        var path = "/" + clean.Trim('/');
        if (path == "//" || path == "/")
        {
            return "/";
        }

        return path.ToLowerInvariant();
    }

    private bool ShouldShowBackButton()
    {
        return !_currentPath.Equals("/", StringComparison.OrdinalIgnoreCase);
    }

    public void Dispose()
    {
        Auth.Changed -= OnAuthChanged;
        Nav.LocationChanged -= OnLocationChanged;
    }
}
