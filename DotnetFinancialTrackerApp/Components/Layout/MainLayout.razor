@inherits LayoutComponentBase

<MudThemeProvider Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout class="@(Ui.IsKiosk ? "kiosk" : null)">
    <MudAppBar Color="Color.Primary" Elevation="4">
        @if (!string.IsNullOrEmpty(Nav.ToBaseRelativePath(Nav.Uri)) && !Nav.Uri.EndsWith("/login", StringComparison.OrdinalIgnoreCase))
        {
            <MudIconButton Icon="@Icons.Material.Outlined.ArrowBack" Color="Color.Inherit" Edge="Edge.Start" OnClick="BackToHome" />
        }
        <MudText Typo="Typo.h6" Class="ms-2">Financial Tracker</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.SmartDisplay" Color="Color.Inherit" Title="Kiosk Mode" OnClick="ToggleKiosk" />
        <MudMenu Icon="@Icons.Material.Outlined.AccountCircle" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight">
            <MudMenuItem Disabled="true">@UserDisplay</MudMenuItem>
            <MudDivider />
            <MudMenuItem Href="/">Home</MudMenuItem>
            <MudMenuItem Disabled="true">Profile (soon)</MudMenuItem>
            <MudMenuItem OnClick="SignOut">Sign out</MudMenuItem>
        </MudMenu>
    </MudAppBar>

    <MudMainContent>
        <MudContainer Class="pa-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [Inject] private NavigationManager Nav { get; set; } = default!;
    [Inject] private AuthState Auth { get; set; } = default!;
    [Inject] private DotnetFinancialTrackerApp.Services.UiState Ui { get; set; } = default!;

    private readonly MudTheme _theme = new()
    {
        Palette = new PaletteLight
        {
            Primary = "#0066FF",
            Secondary = "#111827",
            Background = "#FFFFFF",
            Surface = "#FFFFFF",
            AppbarBackground = "#0066FF",
            AppbarText = "#FFFFFF",
            DrawerBackground = "#FFFFFF",
            DrawerText = "#0B1220",
            TextPrimary = "#0B1220",
            TextSecondary = "#475569",
            Info = "#0EA5E9",
            Success = "#16A34A",
            Warning = "#F59E0B",
            Error = "#EF4444"
        },
        PaletteDark = new PaletteDark
        {
            Primary = "#5B8CFF",
            Secondary = "#E5E7EB",
            Background = "#0B0B10",
            Surface = "#111317",
            AppbarBackground = "#0B0B10",
            AppbarText = "#E5E7EB",
            DrawerBackground = "#0B0B10",
            DrawerText = "#E5E7EB",
            TextPrimary = "#E5E7EB",
            TextSecondary = "#94A3B8",
            Info = "#38BDF8",
            Success = "#22C55E",
            Warning = "#F59E0B",
            Error = "#FB7185"
        },
        LayoutProperties = new LayoutProperties
        {
            DefaultBorderRadius = "12px"
        },
        Typography = new Typography
        {
            Default = new() { FontFamily = new[] { "Airbnb Cereal", "Inter", "Circular", "SF Pro Text", "Segoe UI", "Roboto", "system-ui", "-apple-system", "sans-serif" } },
            Button = new() { FontWeight = 600, LetterSpacing = ".2px" },
            H6 = new() { FontWeight = 650 },
            Body1 = new() { FontWeight = 450 }
        }
    };

    protected override void OnParametersSet()
    {
        var uri = Nav.Uri;
        if (!Auth.IsAuthenticated && !uri.EndsWith("/login", StringComparison.OrdinalIgnoreCase))
        {
            Nav.NavigateTo("/login");
            return;
        }
    }

    private string UserDisplay => Auth.IsAuthenticated ? $"Signed in as {Auth.CurrentUser!.Name}" : "Not signed in";
    private void ToggleKiosk() => Ui.SetKiosk(!Ui.IsKiosk);
    private void BackToHome() => Nav.NavigateTo("/");
    private void SignOut()
    {
        Auth.SignOut();
        Nav.NavigateTo("/login");
    }
}
