@using Microsoft.AspNetCore.Components.Routing
@using DotnetFinancialTrackerApp.Components.Dialogs
@using DotnetFinancialTrackerApp.Components.Layout
@inject NavigationManager Nav
@inject IDialogService DialogService
@implements IDisposable

<MudPaper Class="bottom-nav" Elevation="0">
    <div class="bottom-nav-inner">
        <div class="bottom-nav-group">
            @foreach (var item in _leftItems)
            {
                var active = IsActive(item.Href);
                <MudButton Class="@GetClass(active)" Variant="Variant.Text" Elevation="0" OnClick="@(() => Navigate(item.Href))">
                    <MudIcon Icon="@item.Icon" Size="Size.Medium" />
                    <div class="label">@item.Label</div>
                </MudButton>
            }
        </div>

        <div class="bottom-nav-quick">
            <MudFab Color="Color.Dark" Size="Size.Large" Variant="Variant.Filled" Elevation="0" Class="quick-fab-dark" OnClick="@OpenQuickActions" Label="K"/>
        </div>

        <div class="bottom-nav-group">
            @foreach (var item in _rightItems)
            {
                var active = IsActive(item.Href);
                <MudButton Class="@GetClass(active)" Variant="Variant.Text" Elevation="0" OnClick="@(() => Navigate(item.Href))">
                    <MudIcon Icon="@item.Icon" Size="Size.Medium" />
                    <div class="label">@item.Label</div>
                </MudButton>
            }
        </div>
    </div>
</MudPaper>

@code {
    private readonly NavItem[] _leftItems =
    {
        new("Home", "/", Icons.Material.Filled.Home),
        new("Finance", "/finance", Icons.Material.Filled.AccountBalance)
    };

    private readonly NavItem[] _rightItems =
    {
        new("Wellbeing", "/wellbeing", Icons.Material.Filled.Spa),
        new("Insight", "/reports", Icons.Material.Filled.QueryStats)
    };

    private string _currentPath = string.Empty;
    private readonly QuickActionOption[] _quickActions =
    {
        new("New transaction", "Capture income or expense in seconds.", Icons.Material.Filled.Payments, "/quick-transaction"),
        new("Adjust budgets", "Rebalance categories to stay on target.", Icons.Material.Filled.AccountBalanceWallet, "/budgets"),
        new("Review insights", "Chat through budgets and spending filters.", Icons.Material.Filled.QueryStats, "/reports"),
        new("Log wellbeing ritual", "Track the latest family wellbeing activity.", Icons.Material.Filled.SelfImprovement, "/wellbeing")
    };

    protected override void OnInitialized()
    {
        UpdatePath();
        Nav.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdatePath();
        InvokeAsync(StateHasChanged);
    }

    private void Navigate(string href) => Nav.NavigateTo(href);

    private bool IsActive(string href)
    {
        return Normalize(href) == _currentPath;
    }

    private void UpdatePath()
    {
        var relative = Nav.ToBaseRelativePath(Nav.Uri);
        _currentPath = Normalize(relative);
    }

    private static string Normalize(string path)
    {
        var clean = path.Split('?', '#')[0];
        var trimmed = clean.Trim('/');
        if (string.IsNullOrEmpty(trimmed)) return "/";
        return "/" + trimmed.ToLowerInvariant();
    }

    private static string GetClass(bool active) => active ? "bottom-nav-btn active" : "bottom-nav-btn";

    private async Task OpenQuickActions()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            Position = DialogPosition.Center,
            CloseOnEscapeKey = true,
            DisableBackdropClick = false
        };

        var dialog = DialogService.Show<QuickActionsDialog>("Quick actions", options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is QuickActionOption action)
        {
            Navigate(action.Route);
        }
    }

    public void Dispose()
    {
        Nav.LocationChanged -= HandleLocationChanged;
    }

    private readonly record struct NavItem(string Label, string Href, string Icon);
}

<style>
.bottom-nav {
    position: fixed;
    left: 1rem;
    right: 1rem;
    bottom: calc(1rem + env(safe-area-inset-bottom, 0px));
    margin: 0 auto;
    padding: 20px 24px calc(14px + env(safe-area-inset-bottom, 0px));
    background: rgba(255, 255, 255, 0.95);
    border-radius: 36px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(1, 255, 255, 0.2);
    backdrop-filter: blur(28px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 40;
}

.bottom-nav-inner {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 16px;
    width: 100%;
}

.bottom-nav-group {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    flex: 1 1 0;
}

.bottom-nav-btn {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 6px;
    border-radius: 20px;
    color: #000000;
    padding: 12px 16px;
    min-height: 60px;
    min-width: 62px;
    text-decoration: none;
    transition: transform 0.18s ease, color 0.18s ease, background 0.18s ease;
    position: relative;
}

.bottom-nav-btn:hover {
    background: rgba(1, 255, 255, 0.1);
    transform: translateY(-1px);
}

.bottom-nav-btn .label {
    font-size: 0.72rem;
    font-weight: 600;
    margin-top: 4px;
}

.bottom-nav-btn.active {
    color: #000000;
    background: #01FFFF;
    box-shadow: inset 0 0 0 1px rgba(1, 255, 255, 0.4);
}

.bottom-nav-quick {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 64px;
    flex: 0 0 auto;
}

.quick-fab-dark {
    position: absolute;
    top: -38px;
    box-shadow: 0 8px 24px rgba(1, 255, 255, 0.3);
    border-radius: 50%;
    height: 64px;
    width: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    /*background: linear-gradient(135deg, rgba(1, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.95) 100%);*/
    /*color: #000000;*/
    background: black;
    color: whitesmoke;
    transition: transform 0.2s ease;
}

.quick-fab-dark:hover {
    transform: translateY(-2px);
}
</style>
