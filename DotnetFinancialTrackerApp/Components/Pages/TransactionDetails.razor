@page "/transactions/{TransactionId:int}"
@using System.Globalization
@using DotnetFinancialTrackerApp.Models
@inject DotnetFinancialTrackerApp.Services.ITransactionsService TxSvc
@inject NavigationManager Nav
@inject AuthState Auth

<PageTitle>Transaction Details</PageTitle>

<MudContainer Class="transaction-details-container" MaxWidth="MaxWidth.False">
    @if (_transaction != null)
    {
        <!-- Top Amount Section -->
        <div class="amount-section">
            <div class="amount-header">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Default" OnClick="@GoBack" Style="color: black;" />
                <MudText Typo="Typo.h4">Transaction Details</MudText>
                <div></div> <!-- Spacer -->
            </div>

            <div class="amount-display">
                <MudText Typo="Typo.h2">
                    @((_transaction.IsIncome ? "+" : "-") + _transaction.Amount.ToString("C", CultureInfo.CurrentCulture))
                </MudText>
                <MudText Typo="Typo.h6" Class="amount-type">
                    @(_transaction.IsIncome ? "Income" : "Expense")
                </MudText>
            </div>
        </div>

        <!-- Transaction Information -->
        <div class="info-section">
            <MudCard Class="info-card" Elevation="0">
                <MudCardContent>
                    <!-- Category -->
                    <div class="info-item">
                        <div class="info-label">
                            <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Medium" Color="Color.Default" Style="color: black;" />
                            <MudText Typo="Typo.subtitle2">Category</MudText>
                        </div>
                        <MudText Typo="Typo.body1" Class="info-value">@(_transaction.Category?.Name ?? "Uncategorized")</MudText>
                    </div>

                    <MudDivider Class="my-3" />

                    <!-- Date -->
                    <div class="info-item">
                        <div class="info-label">
                            <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Medium" Color="Color.Default" Style="color: black;" />
                            <MudText Typo="Typo.subtitle2">Date</MudText>
                        </div>
                        <MudText Typo="Typo.body1" Class="info-value">@_transaction.Date.ToString("MMMM dd, yyyy")</MudText>
                        <MudText Typo="Typo.caption" Class="info-time">@_transaction.Date.ToString("h:mm tt")</MudText>
                    </div>

                    <MudDivider Class="my-3" />

                    <!-- Family Member -->
                    <div class="info-item">
                        <div class="info-label">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Medium" Color="Color.Default" Style="color: black;" />
                            <MudText Typo="Typo.subtitle2">Family Member</MudText>
                        </div>
                        <div class="member-info">
                            <MudAvatar Size="Size.Medium" Color="Color.Default" Style="background-color: black; color: white;">
                                @GetMemberInitial(_transaction.User)
                            </MudAvatar>
                            <MudText Typo="Typo.body1" Class="member-name">@(_transaction.User ?? "Unknown")</MudText>
                        </div>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(_transaction.Description))
                    {
                        <MudDivider Class="my-3" />

                        <!-- Description -->
                        <div class="info-item">
                            <div class="info-label">
                                <MudIcon Icon="@Icons.Material.Filled.Notes" Size="Size.Medium" Color="Color.Default" Style="color: black;" />
                                <MudText Typo="Typo.subtitle2">Description</MudText>
                            </div>
                            <MudText Typo="Typo.body1" Class="info-value">@_transaction.Description</MudText>
                        </div>
                    }

                    <MudDivider Class="my-3" />

                    <!-- Transaction ID -->
                    <div class="info-item">
                        <div class="info-label">
                            <MudIcon Icon="@Icons.Material.Filled.Tag" Size="Size.Medium" Color="Color.Default" Style="color: black;" />
                            <MudText Typo="Typo.subtitle2">Transaction ID</MudText>
                        </div>
                        <MudText Typo="Typo.body1" Class="info-value">#@_transaction.Id.ToString("D6")</MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        </div>

    }
    else if (_loading)
    {
        <div class="loading-section">
            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
            <MudText Typo="Typo.body1" Class="mt-3">Loading transaction...</MudText>
        </div>
    }
    else
    {
        <div class="error-section">
            <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Large" Color="Color.Default" Style="color: black;" />
            <MudText Typo="Typo.h6" Class="mt-2">Transaction Not Found</MudText>
            <MudText Typo="Typo.body2" Class="mb-3">The transaction you're looking for doesn't exist.</MudText>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Default"
                       Elevation="0"
                       OnClick="@GoBack"
                       Style="background-color: black; color: white;">
                Go Back
            </MudButton>
        </div>
    }
</MudContainer>

@code {
    [Parameter] public int TransactionId { get; set; }

    private Transaction? _transaction;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        if (!Auth.IsAuthenticated)
        {
            Nav.NavigateTo("/login");
            return;
        }

        await LoadTransactionAsync();
    }

    private async Task LoadTransactionAsync()
    {
        try
        {
            _loading = true;
            var transactions = await TxSvc.GetAsync();
            _transaction = transactions.FirstOrDefault(t => t.Id == TransactionId);
        }
        catch (Exception)
        {
            _transaction = null;
        }
        finally
        {
            _loading = false;
        }
    }

    private void GoBack()
    {
        Nav.NavigateTo("/finance");
    }

    private string GetMemberInitial(string? name)
    {
        return string.IsNullOrEmpty(name) ? "?" : name.Substring(0, 1).ToUpper();
    }
}

<style>
.transaction-details-container {
    padding: 0;
    background: #FFFFFF;
    min-height: 100vh;
}

.amount-section {
    background: #F3F3F3;
    padding: 24px;
    text-align: center;
    border-radius: 20px;
    color: #000000;
}

.amount-header {
    display: grid;
    grid-template-columns: auto 1fr auto;
    align-items: center;
    margin-bottom: 32px;
    gap: 16px;
}

.amount-display {
    margin: 32px 0;
}

.amount-income {
    color: #333333;
    font-weight: 700;
    margin-bottom: 8px;
}

.amount-expense {
    color: #555555;
    font-weight: 700;
    margin-bottom: 8px;
}

.amount-type {
    color: rgba(0, 0, 0, 0.7);
    font-weight: 500;
}

.info-section {
    padding: 24px;
}

.info-card {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(0, 0, 0, 0.12);
    border-radius: 20px;
}

.info-item {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.info-label {
    display: flex;
    align-items: center;
    gap: 8px;
    color: rgba(0, 0, 0, 0.7);
}

.info-value {
    font-weight: 500;
    margin-left: 40px;
}

.info-time {
    margin-left: 40px;
    color: rgba(0, 0, 0, 0.5);
}

.member-info {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-left: 40px;
}

.member-name {
    font-weight: 500;
}

.loading-section, .error-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 50vh;
    text-align: center;
    padding: 24px;
}

@@media (max-width: 767px) {
    .amount-section {
        padding: 20px 16px;
    }

    .info-section {
        padding: 16px;
    }

    .amount-header {
        margin-bottom: 24px;
    }
}
</style>
