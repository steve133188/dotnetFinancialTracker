@page "/dashboard"
@inject DotnetFinancialTrackerApp.Services.ITransactionsService TxSvc
@inject DotnetFinancialTrackerApp.Services.IBudgetsService BudgetSvc
@inject DotnetFinancialTrackerApp.Services.IGamificationService Game

<MudContainer Class="pa-4">
    @if (_error is not null)
    {
        <MudAlert Severity="Severity.Error" Class="mb-3">@_error</MudAlert>
    }
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudCard Class="glass-card">
                <MudCardHeader><MudText Typo="Typo.h6">Insight</MudText></MudCardHeader>
                <MudCardContent>
                    <MudStack Row="true" Spacing="3">
                        <MudPaper Class="pa-3" Elevation="0">
                            <MudText Typo="Typo.subtitle2">Income</MudText>
                            <MudText Typo="Typo.h5" Color="Color.Success">@_income.ToString("C")</MudText>
                        </MudPaper>
                        <MudPaper Class="pa-3" Elevation="0">
                            <MudText Typo="Typo.subtitle2">Expenses</MudText>
                            <MudText Typo="Typo.h5" Color="Color.Error">@_expense.ToString("C")</MudText>
                        </MudPaper>
                        <MudPaper Class="pa-3" Elevation="0">
                            <MudText Typo="Typo.subtitle2">Net</MudText>
                            <MudText Typo="Typo.h5">@(_income - _expense).ToString("C")</MudText>
                        </MudPaper>
                    </MudStack>
                    <MudDivider Class="my-2" />
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudProgressLinear Value="@(_summary.UsagePercent ?? 0)" Color="Color.Primary" Style="width: 60%" />
                        <MudChip Color="Color.Primary" Variant="Variant.Filled">@_summary.Points pts</MudChip>
                        <MudChip Variant="Variant.Outlined">@_summary.Streak d</MudChip>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudCard Class="glass-card">
                <MudCardHeader><MudText Typo="Typo.h6">Budget (Top Categories)</MudText></MudCardHeader>
                <MudCardContent>
                    <MudChart ChartType="ChartType.Pie" Labels="@_labels" Data="@_chartData" Color="Color.Primary" />
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private decimal _income, _expense;
    private string[] _labels = Array.Empty<string>();
    private double[][] _chartData = Array.Empty<double[]>();
    private DotnetFinancialTrackerApp.Services.GamificationSummary _summary = new();
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var first = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
            var next = first.AddMonths(1).AddDays(-1);
            var txs = await TxSvc.GetAsync(from: first, to: next);
            _income = txs.Where(t => t.IsIncome).Sum(t => t.Amount);
            _expense = txs.Where(t => !t.IsIncome).Sum(t => t.Amount);

            var budgets = await BudgetSvc.GetAsync(first);
            _labels = budgets.Select(b => b.Category).Take(5).ToArray();
            var data = budgets.Take(5).Select(b => (double)b.Limit).ToArray();
            _chartData = data.Length > 0 ? new[] { data } : new[] { new double[] { 0 } };

            await Game.EvaluateAsync();
            _summary = await Game.GetSummaryAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }
}
