@page "/finance"
@using System.Globalization
@using DotnetFinancialTrackerApp.Models
@using MudBlazor
@inject DotnetFinancialTrackerApp.Services.IBudgetsService BudgetSvc
@inject DotnetFinancialTrackerApp.Services.ITransactionsService TxSvc
@inject IDialogService DialogService
@inject NavigationManager Nav

<PageTitle>Finance - Family Tracker</PageTitle>

<MudContainer Class="home-container" MaxWidth="MaxWidth.False">
    @if (!string.IsNullOrEmpty(_error))
    {
        <MudAlert Severity="Severity.Error" Elevation="0" Class="mb-3" ShowCloseIcon="true" CloseIconClicked="@(() => _error = string.Empty)">
            @_error
        </MudAlert>
    }

    <!-- Header Section -->
    <div class="section-header">
        <MudText Typo="Typo.h5" Class="month-title">Transaction Management</MudText>
        <div class="header-actions">
            <MudButton Variant="Variant.Filled" Color="Color.Default" Elevation="0" StartIcon="@Icons.Material.Filled.Add" OnClick="@OpenAddTransaction" Style="background-color: black; color: white;">
                Add Transaction
            </MudButton>
        </div>
    </div>

    <!-- Financial Summary Cards -->
    <div class="summary-section">
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudCard Class="summary-card" Elevation="0">
                    <MudCardContent>
                        <div class="card-header">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp"  />
                            <MudText Typo="Typo.subtitle1">Monthly Income</MudText>
                        </div>
                        <MudText Typo="Typo.h4" Class="card-amount">@_monthIncome.ToString("C", CultureInfo.CurrentCulture)</MudText>
                        <MudText Typo="Typo.body2" Class="card-meta">@_incomeTransactionCount transactions</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" md="4">
                <MudCard Class="summary-card" Elevation="0">
                    <MudCardContent>
                        <div class="card-header">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingDown" />
                            <MudText Typo="Typo.subtitle1">Monthly Spending</MudText>
                        </div>
                        <MudText Typo="Typo.h4" Class="card-amount">@_monthExpense.ToString("C", CultureInfo.CurrentCulture)</MudText>
                        <MudText Typo="Typo.body2" Class="card-meta">@_expenseTransactionCount transactions</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" md="4">
                <MudCard Class="summary-card" Elevation="0">
                    <MudCardContent>
                        <div class="card-header">
                            <MudIcon Icon="@(NetBalance >= 0 ? Icons.Material.Filled.AccountBalanceWallet : Icons.Material.Filled.Warning)" />
                            <MudText Typo="Typo.subtitle1">Net Balance</MudText>
                        </div>
                        <MudText Typo="Typo.h4" Class="card-amount">@NetBalance.ToString("C", CultureInfo.CurrentCulture)</MudText>
                        <MudText Typo="Typo.body2" Class="card-meta">@DateTime.Now.ToString("MMMM yyyy", CultureInfo.CurrentCulture)</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </div>


    <!-- Transactions Section -->
    <div class="transactions-section">
        <div class="section-header">
            <MudText Typo="Typo.h6" Class="section-title">Transactions</MudText>
            <MudText Typo="Typo.caption" Class="section-meta">@_tableTransactions.Count of @_allTransactions.Count total</MudText>
        </div>

        <!-- Enhanced Filters -->
        <MudCard Class="summary-card" Elevation="0">
            <MudCardContent>
                <MudGrid AlignItems="AlignItems.Center" Spacing="2">
                    <MudItem xs="12" sm="6" md="3">
                        <MudSelect T="FinancePeriod" Dense="true" Label="Period" Variant="Variant.Outlined" @bind-Value="TablePeriod">
                            @foreach (var option in Enum.GetValues<FinancePeriod>())
                            {
                                <MudSelectItem Value="@option">@GetPeriodLabel(option)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudSelect T="string" Dense="true" Label="Category" Variant="Variant.Outlined" @bind-Value="TableCategory">
                            @foreach (var category in _tableCategoryOptions)
                            {
                                <MudSelectItem Value="@category">@category</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudSelect T="string" Dense="true" Label="Family Member" Variant="Variant.Outlined" @bind-Value="TableMember">
                            @foreach (var member in _tableMemberOptions)
                            {
                                <MudSelectItem Value="@member">@member</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudTextField @bind-Value="TableSearch" Immediate="true" Placeholder="Search transactions..." Variant="Variant.Outlined" Dense="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
                    </MudItem>
                </MudGrid>

                @if (HasActiveFilters)
                {
                    <div class="filter-chips">
                        <MudChip T="string" Text="@GetActiveFiltersText()" Color="Color.Default" Variant="Variant.Outlined" CloseIcon="@Icons.Material.Filled.Clear" OnClose="ClearAllFilters" Style="border-color: black; color: black;" />
                    </div>
                }
            </MudCardContent>
        </MudCard>

        <!-- Enhanced Transaction Table -->
        <MudCard Class="summary-card" Elevation="0">
            <MudCardContent>
                @if (_tableTransactions.Count == 0)
                {
                    <div class="text-center" style="padding: 48px 24px;">
                        <MudIcon Icon="@Icons.Material.Filled.Receipt" Size="Size.Large" Color="Color.Default" />
                        <MudText Typo="Typo.h6" Class="mt-2">No transactions found</MudText>
                        <MudText Typo="Typo.body2" Class="mb-3">@(HasActiveFilters ? "Try adjusting your filters or add a new transaction" : "Get started by adding your first transaction")</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Default" Elevation="0" StartIcon="@Icons.Material.Filled.Add" OnClick="@OpenAddTransaction" Style="background-color: black; color: white;">
                            Add Transaction
                        </MudButton>
                    </div>
                }
                else
                {
                    <MudTable Items="_tableTransactions" Hover="true" Dense="true" Striped="true" RowClassFunc="GetRowClass" OnRowClick="@(EventCallback.Factory.Create<TableRowClickEventArgs<Transaction>>(this, OnTransactionRowClick))">
                        <HeaderContent>
                            <MudTh>Date</MudTh>
                            <MudTh>Description</MudTh>
                            <MudTh>Category</MudTh>
                            <MudTh>Member</MudTh>
                            <MudTh Class="text-end">Amount</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <div class="date-cell">
                                    <MudText Typo="Typo.body2">@context.Date.ToString("MMM dd", CultureInfo.CurrentCulture)</MudText>
                                    <MudText Typo="Typo.caption">@context.Date.ToString("yyyy", CultureInfo.CurrentCulture)</MudText>
                                </div>
                            </MudTd>
                            <MudTd>
                                <div class="description-cell">
                                    <MudText Typo="Typo.subtitle2">@(context.Description ?? DisplayCategory(context.Category?.Name))</MudText>
                                    @if (!string.IsNullOrEmpty(context.Description) && !string.Equals(context.Description, context.Category?.Name))
                                    {
                                        <MudText Typo="Typo.caption">@DisplayCategory(context.Category?.Name)</MudText>
                                    }
                                </div>
                            </MudTd>
                            <MudTd>
                                <MudChip T="string" Text="@DisplayCategory(context.Category?.Name)" Size="Size.Small" Variant="Variant.Outlined" />
                            </MudTd>
                            <MudTd>
                                <div class="member-cell">
                                    <MudAvatar Size="Size.Small" Color="Color.Default" Style="background-color: black; color: white;">@GetMemberInitial(context.User)</MudAvatar>
                                    <MudText Typo="Typo.body2">@DisplayMember(context.User)</MudText>
                                </div>
                            </MudTd>
                            <MudTd Class="text-end">
                                <MudText Typo="Typo.subtitle1" >
                                    @((context.IsIncome ? "+" : "-") + context.Amount.ToString("C", CultureInfo.CurrentCulture))
                                </MudText>
                            </MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" OnClick="@(() => OpenTransactionActions(context))" />
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[]{10,25,50,100}" HideRowsPerPage="false" />
                        </PagerContent>
                    </MudTable>
                }
            </MudCardContent>
        </MudCard>
    </div>
</MudContainer>

@code {
    private const string AllCategoriesOption = "All categories";
    private const string AllMembersOption = "All members";

    private string? _error;
    private decimal _monthIncome;
    private decimal _monthExpense;
    private int _monthTransactionCount;
    private int _incomeTransactionCount;
    private int _expenseTransactionCount;

    private readonly List<string> _tableCategoryOptions = new();
    private readonly List<string> _tableMemberOptions = new();
    private List<Transaction> _allTransactions = new();
    private List<Transaction> _tableTransactions = new();

    private FinancePeriod _tablePeriod = FinancePeriod.ThisMonth;
    private string _tableCategory = AllCategoriesOption;
    private string _tableMember = AllMembersOption;
    private string _tableSearch = string.Empty;

    private FinancePeriod TablePeriod
    {
        get => _tablePeriod;
        set
        {
            if (_tablePeriod != value)
            {
                _tablePeriod = value;
                ApplyTableFilters();
            }
        }
    }

    private string TableCategory
    {
        get => _tableCategory;
        set
        {
            if (!string.Equals(_tableCategory, value, StringComparison.Ordinal))
            {
                _tableCategory = value;
                ApplyTableFilters();
            }
        }
    }

    private string TableMember
    {
        get => _tableMember;
        set
        {
            if (!string.Equals(_tableMember, value, StringComparison.Ordinal))
            {
                _tableMember = value;
                ApplyTableFilters();
            }
        }
    }

    private string TableSearch
    {
        get => _tableSearch;
        set
        {
            _tableSearch = value ?? string.Empty;
            ApplyTableFilters();
        }
    }

    // Calculated properties
    private decimal NetBalance => _monthIncome - _monthExpense;

    // Filter helpers
    private bool HasActiveFilters => _tablePeriod != FinancePeriod.ThisMonth ||
                                   !string.Equals(_tableCategory, AllCategoriesOption, StringComparison.Ordinal) ||
                                   !string.Equals(_tableMember, AllMembersOption, StringComparison.Ordinal) ||
                                   !string.IsNullOrWhiteSpace(_tableSearch);

    protected override async Task OnInitializedAsync()
    {
        await ReloadAsync();
    }

    private async Task ReloadAsync()
    {
        try
        {
            await LoadFinanceDataAsync();
            BuildFilterOptions();
            ApplyTableFilters();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task LoadFinanceDataAsync()
    {
        var today = DateTime.Today;
        var periodStart = new DateTime(today.Year, today.Month, 1);
        var periodEnd = periodStart.AddMonths(1).AddTicks(-1);

        _allTransactions = (await TxSvc.GetAsync()).OrderByDescending(t => t.Date).ThenByDescending(t => t.Id).ToList();
        var monthTransactions = _allTransactions.Where(t => t.Date >= periodStart && t.Date <= periodEnd).ToList();
        _monthTransactionCount = monthTransactions.Count;
        _monthIncome = monthTransactions.Where(t => t.IsIncome).Sum(t => t.Amount);
        _monthExpense = monthTransactions.Where(t => !t.IsIncome).Sum(t => t.Amount);
        _incomeTransactionCount = monthTransactions.Count(t => t.IsIncome);
        _expenseTransactionCount = monthTransactions.Count(t => !t.IsIncome);
    }

    // New helper methods for enhanced Finance page
    private string GetActiveFiltersText()
    {
        var filters = new List<string>();

        if (_tablePeriod != FinancePeriod.ThisMonth)
            filters.Add(GetPeriodLabel(_tablePeriod));

        if (!string.Equals(_tableCategory, AllCategoriesOption, StringComparison.Ordinal))
            filters.Add(_tableCategory);

        if (!string.Equals(_tableMember, AllMembersOption, StringComparison.Ordinal))
            filters.Add(_tableMember);

        if (!string.IsNullOrWhiteSpace(_tableSearch))
            filters.Add($"'{_tableSearch}'");

        return string.Join(", ", filters);
    }

    private void ClearAllFilters()
    {
        _tablePeriod = FinancePeriod.ThisMonth;
        _tableCategory = AllCategoriesOption;
        _tableMember = AllMembersOption;
        _tableSearch = string.Empty;
        ApplyTableFilters();
    }

    private string GetRowClass(Transaction transaction, int rowNumber)
    {
        return transaction.IsIncome ? "income-row" : "expense-row";
    }

    private Task OnTransactionRowClick(TableRowClickEventArgs<Transaction> args)
    {
        // Navigate to transaction details page (to be implemented)
        Nav.NavigateTo($"/transactions/{args.Item.Id}");
        return Task.CompletedTask;
    }

    private async Task OpenTransactionActions(Transaction transaction)
    {
        // For now, navigate to edit transaction
        var parameters = new DialogParameters
        {
            [nameof(DotnetFinancialTrackerApp.Components.Dialogs.EditTransactionDialog.Model)] = transaction
        };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, Position = DialogPosition.Center };
        var dialog = DialogService.Show<DotnetFinancialTrackerApp.Components.Dialogs.EditTransactionDialog>("Edit Transaction", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is Transaction tx)
        {
            await TxSvc.UpdateAsync(tx);
            await ReloadAsync();
        }
    }

    private string GetMemberInitial(string? user)
    {
        var member = DisplayMember(user);
        return string.IsNullOrEmpty(member) ? "H" : member.Substring(0, 1).ToUpper();
    }

    private void BuildFilterOptions()
    {
        _tableCategoryOptions.Clear();
        _tableCategoryOptions.Add(AllCategoriesOption);
        _tableCategoryOptions.AddRange(_allTransactions
            .Select(t => DisplayCategory(t.Category?.Name))
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(c => c));
        if (!_tableCategoryOptions.Contains(_tableCategory))
        {
            _tableCategory = AllCategoriesOption;
        }

        _tableMemberOptions.Clear();
        _tableMemberOptions.Add(AllMembersOption);
        _tableMemberOptions.AddRange(_allTransactions
            .Select(t => DisplayMember(t.User))
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(c => c));
        if (!_tableMemberOptions.Contains(_tableMember))
        {
            _tableMember = AllMembersOption;
        }
    }

    private void ApplyTableFilters()
    {
        var (start, end) = GetPeriodRange(_tablePeriod);
        IEnumerable<Transaction> query = _allTransactions;

        if (start is not null)
        {
            query = query.Where(t => t.Date.Date >= start.Value.Date);
        }
        if (end is not null)
        {
            query = query.Where(t => t.Date.Date <= end.Value.Date);
        }
        if (!string.Equals(_tableCategory, AllCategoriesOption, StringComparison.OrdinalIgnoreCase))
        {
            query = query.Where(t => string.Equals(DisplayCategory(t.Category?.Name), _tableCategory, StringComparison.OrdinalIgnoreCase));
        }
        if (!string.Equals(_tableMember, AllMembersOption, StringComparison.OrdinalIgnoreCase))
        {
            query = query.Where(t => string.Equals(DisplayMember(t.User), _tableMember, StringComparison.OrdinalIgnoreCase));
        }
        if (!string.IsNullOrWhiteSpace(_tableSearch))
        {
            var term = _tableSearch.Trim();
            query = query.Where(t => (t.Description ?? string.Empty).Contains(term, StringComparison.OrdinalIgnoreCase) ||
                                     DisplayCategory(t.Category?.Name).Contains(term, StringComparison.OrdinalIgnoreCase));
        }

        _tableTransactions = query
            .OrderByDescending(t => t.Date)
            .ThenByDescending(t => t.Id)
            .Take(100)
            .ToList();
    }

    private async Task OpenAddTransaction()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, Position = DialogPosition.Center };
        var dialog = DialogService.Show<DotnetFinancialTrackerApp.Components.Dialogs.EditTransactionDialog>("Add Transaction", options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is Transaction tx)
        {
            await TxSvc.AddAsync(tx);
            await ReloadAsync();
        }
    }


    private (DateTime? Start, DateTime? End) GetPeriodRange(FinancePeriod period)
    {
        var today = DateTime.Today;
        return period switch
        {
            FinancePeriod.ThisMonth => (new DateTime(today.Year, today.Month, 1), new DateTime(today.Year, today.Month, 1).AddMonths(1).AddTicks(-1)),
            FinancePeriod.LastMonth =>
            (
                new DateTime(today.Year, today.Month, 1).AddMonths(-1),
                new DateTime(today.Year, today.Month, 1).AddTicks(-1)
            ),
            FinancePeriod.Last90Days => (today.AddDays(-89), today),
            FinancePeriod.YearToDate => (new DateTime(today.Year, 1, 1), today),
            _ => (null, null)
        };
    }

    private static string GetPeriodLabel(FinancePeriod period) => period switch
    {
        FinancePeriod.ThisMonth => "This month",
        FinancePeriod.LastMonth => "Last month",
        FinancePeriod.Last90Days => "Last 90 days",
        FinancePeriod.YearToDate => "Year to date",
        FinancePeriod.AllTime => "All time",
        _ => period.ToString()
    };

    private static string DisplayCategory(string? category)
        => string.IsNullOrWhiteSpace(category) ? "Uncategorized" : category.Trim();

    private static string DisplayMember(string? user)
        => string.IsNullOrWhiteSpace(user) ? "Household" : user.Trim();

    private enum FinancePeriod
    {
        ThisMonth,
        LastMonth,
        Last90Days,
        YearToDate,
        AllTime
    }
}

<style>
/* Use consistent styling with home page */
.home-container {
    padding: 24px;
    background: #FFFFFF;
    min-height: 100vh;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
}

.summary-section, .transactions-section {
    margin-bottom: 32px;
}

.month-title {
    color: #000000;
    font-weight: 700;
    font-family: 'Inter', sans-serif;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.section-header h6, .section-header .mud-typography-h6 {
    color: #000000;
    font-weight: 600;
    font-family: 'Inter', sans-serif;
}

.header-actions {
    display: flex;
    gap: 12px;
}

.card-header {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 16px;
}

.card-amount {
    font-weight: 700;
    margin-bottom: 8px;
    color: #000000;
    font-family: 'Inter', sans-serif;
}


.card-meta {
    color: rgba(0, 0, 0, 0.6);
    font-family: 'Inter', sans-serif;
}

.filter-chips {
    margin-top: 16px;
    display: flex;
    gap: 8px;
}

.date-cell {
    display: flex;
    flex-direction: column;
}

.description-cell {
    display: flex;
    flex-direction: column;
}

.member-cell {
    display: flex;
    align-items: center;
    gap: 8px;
}

.income-amount {
    color: #000000;
    font-weight: 600;
    font-family: 'Inter', sans-serif;
}

.expense-amount {
    color: #000000;
    font-weight: 600;
    font-family: 'Inter', sans-serif;
}

.income-row {
    background-color: rgba(0, 0, 0, 0.02);
}

.expense-row {
    background-color: rgba(0, 0, 0, 0.02);
}

.transactions-section {
    margin-bottom: 32px;
}

@@media (max-width: 767px) {
    .home-container {
        padding: 16px;
    }

    .header-actions {
        flex-direction: column;
        gap: 8px;
        width: 100%;
    }

    .section-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
    }

    .member-cell {
        flex-direction: column;
        gap: 4px;
        text-align: center;
    }
}
</style>
