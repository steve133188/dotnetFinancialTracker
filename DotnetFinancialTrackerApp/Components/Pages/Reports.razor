@page "/reports"
@using System.Globalization
@using System.Linq
@using DotnetFinancialTrackerApp.Models
@using MudBlazor
@inject DotnetFinancialTrackerApp.Services.ITransactionsService TxSvc
@inject DotnetFinancialTrackerApp.Services.IUserService UserSvc
@inject NavigationManager Nav

<PageTitle>Insights - Family Tracker</PageTitle>

<MudContainer Class="home-container" MaxWidth="MaxWidth.False">
    @if (!string.IsNullOrEmpty(_error))
    {
        <MudAlert Severity="Severity.Warning" Class="mb-3" ShowCloseIcon="true" CloseIconClicked="@(() => _error = string.Empty)">
            @_error
        </MudAlert>
    }

    <!-- Header -->
    <div class="section-header">
        <MudText Typo="Typo.h4" Class="header-title">Insights & Analytics</MudText>
    </div>

    <!-- Filter Controls -->
    <MudCard Class="summary-card filter-controls" Elevation="0">
        <MudCardContent>
            <MudGrid Spacing="2" Class="filter-simple-grid" AlignItems="AlignItems.Center">
                <MudItem xs="12" md="6">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.subtitle2" Class="filter-label">Time Range</MudText>
                        <MudButtonGroup Class="range-button-group" Color="Color.Default" Elevation="0">
                            <MudButton Variant="@GetRangeVariant(PeriodType.Weekly)"
                                       StartIcon="@GetRangeButtonIcon(PeriodType.Weekly)"
                                       Class="@GetRangeButtonClass(PeriodType.Weekly)"
                                       DisableElevation="true"
                                       OnClick="@(() => SetPeriodType(PeriodType.Weekly))">
                                <div class="range-button-content">
                                    <span class="range-button-title">Weekly</span>
                                    <span class="range-button-subtitle">7-day snapshot</span>
                                </div>
                            </MudButton>
                            <MudButton Variant="@GetRangeVariant(PeriodType.Monthly)"
                                       StartIcon="@GetRangeButtonIcon(PeriodType.Monthly)"
                                       Class="@GetRangeButtonClass(PeriodType.Monthly)"
                                       DisableElevation="true"
                                       OnClick="@(() => SetPeriodType(PeriodType.Monthly))">
                                <div class="range-button-content">
                                    <span class="range-button-title">Monthly</span>
                                    <span class="range-button-subtitle">Week-over-week</span>
                                </div>
                            </MudButton>
                            <MudButton Variant="@GetRangeVariant(PeriodType.Yearly)"
                                       StartIcon="@GetRangeButtonIcon(PeriodType.Yearly)"
                                       Class="@GetRangeButtonClass(PeriodType.Yearly)"
                                       DisableElevation="true"
                                       OnClick="@(() => SetPeriodType(PeriodType.Yearly))">
                                <div class="range-button-content">
                                    <span class="range-button-title">Yearly</span>
                                    <span class="range-button-subtitle">Month-over-month</span>
                                </div>
                            </MudButton>
                        </MudButtonGroup>
                        <MudText Typo="Typo.caption" Class="current-period-label">
                            @GetCurrentPeriodDisplay()
                        </MudText>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.subtitle2" Class="filter-label">Family Member</MudText>
                        <MudSelect T="string"
                                   Value="@_selectedUserId"
                                   ValueChanged="@OnUserChanged"
                                   Variant="Variant.Outlined"
                                   Dense="true">
                            <MudSelectItem Value="@string.Empty">All Members</MudSelectItem>
                            @foreach (var user in _familyUsers)
                            {
                                <MudSelectItem Value="@user.Id.ToString()">@user.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <!-- Key Metrics Summary -->
    <MudGrid Class="metrics-section">
        <MudItem xs="12" md="3">
            <UiStatCard Class="metric-card text-center">
                <BodyContent>
                    <MudText Typo="Typo.h4" Class="metric-amount expense">
                        @_filteredExpense.ToString("C0", CultureInfo.CurrentCulture)
                    </MudText>
                    <MudText Typo="Typo.body2" Class="metric-label">Total Spent</MudText>
                    <div class="metric-comparison">
                        <MudText Typo="Typo.caption" Class="@GetTrendClass(_expenseTrend)">
                            @GetTrendText(_expenseTrend)
                        </MudText>
                        @if (ShowComparison && _previousExpense > 0)
                        {
                            <MudText Typo="Typo.caption" Class="comparison-detail">
                                vs @_previousExpense.ToString("C0") last period
                            </MudText>
                        }
                    </div>
                </BodyContent>
            </UiStatCard>
        </MudItem>

        <MudItem xs="12" md="3">
            <UiStatCard Class="metric-card text-center">
                <BodyContent>
                    <MudText Typo="Typo.h4" Class="metric-amount income">
                        @_filteredIncome.ToString("C0", CultureInfo.CurrentCulture)
                    </MudText>
                    <MudText Typo="Typo.body2" Class="metric-label">Total Income</MudText>
                    <div class="metric-comparison">
                        <MudText Typo="Typo.caption" Class="@GetTrendClass(_incomeTrend)">
                            @GetIncomeTrendText(_incomeTrend)
                        </MudText>
                        @if (ShowComparison && _previousIncome > 0)
                        {
                            <MudText Typo="Typo.caption" Class="comparison-detail">
                                vs @_previousIncome.ToString("C0") last period
                            </MudText>
                        }
                    </div>
                </BodyContent>
            </UiStatCard>
        </MudItem>

        <MudItem xs="12" md="3">
            <UiStatCard Class="metric-card text-center">
                <BodyContent>
                    <MudText Typo="Typo.h4" Class="@GetBalanceClass()">
                        @NetBalance.ToString("C0", CultureInfo.CurrentCulture)
                    </MudText>
                    <MudText Typo="Typo.body2" Class="metric-label">Net Balance</MudText>
                    <MudText Typo="Typo.caption">@GetBalanceStatus()</MudText>
                </BodyContent>
            </UiStatCard>
        </MudItem>

        <MudItem xs="12" md="3">
            <UiStatCard Class="metric-card text-center">
                <BodyContent>
                    <MudText Typo="Typo.h4" Class="metric-amount">
                        @_highlightTransactions.Count
                    </MudText>
                    <MudText Typo="Typo.body2" Class="metric-label">Transactions</MudText>
                    <MudText Typo="Typo.caption" Class="text-muted">
                        This period
                    </MudText>
                </BodyContent>
            </UiStatCard>
        </MudItem>
    </MudGrid>

    <!-- Charts Section -->
    <MudGrid Class="charts-section">
        <!-- Spending Trends Line Chart -->
        <MudItem xs="12">
            <MudCard Class="summary-card chart-card" Elevation="0">
                <MudCardContent>
                    <div class="chart-header">
                        <MudText Typo="Typo.h6" Class="chart-title">Spending Trends Over Time</MudText>
                        <MudText Typo="Typo.caption" Class="chart-subtitle">@GetChartPeriodDescription()</MudText>
                    </div>

                    @if (_chartData.Count == 0)
                    {
                        <div class="empty-chart">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Large" Color="Color.Default" />
                            <MudText Typo="Typo.body2" Class="mt-2">No spending data for this period</MudText>
                        </div>
                    }
                    else
                    {
                        <div class="enhanced-line-chart">
                            <MudChart ChartType="ChartType.Line"
                                    ChartSeries="@_lineChartSeries"
                                    @bind-SelectedIndex="selectedIndex"
                                    XAxisLabels="@_xAxisLabels.ToArray()"
                                    Width="100%"
                                    Height="300px"
                                    ChartOptions="@_lineChartOptions">
                            </MudChart>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Category Breakdown Donut Chart -->
        <MudItem xs="12" md="6">
            <MudCard Class="summary-card chart-card" Elevation="0">
                <MudCardContent>
                    <div class="chart-header">
                        <MudText Typo="Typo.h6" Class="chart-title">Spending by Category</MudText>
                        <MudText Typo="Typo.caption" Class="chart-subtitle">Top categories</MudText>
                    </div>

                    @if (_topCategories.Count == 0)
                    {
                        <div class="empty-chart">
                            <MudIcon Icon="@Icons.Material.Filled.PieChart" Size="Size.Large" Color="Color.Default" />
                            <MudText Typo="Typo.body2" Class="mt-2">No categories to display</MudText>
                        </div>
                    }
                    else
                    {
                        <div class="enhanced-donut-chart-container">
                            <!-- MudBlazor Donut Chart -->
                            <div class="donut-chart-section">
                                <MudChart ChartType="ChartType.Donut"
                                        InputData="@GetDonutData().ToArray()"
                                        InputLabels="@GetDonutLabels().ToArray()"
                                        Width="250px"
                                        Height="250px"
                                        ChartOptions="@_donutChartOptions">
                                </MudChart>
                            </div>

                            <!-- Enhanced Category Legend -->
                            <div class="enhanced-category-legend">
                                @foreach (var (category, index) in _topCategories.Take(5).Select((c, i) => (c, i)))
                                {
                                    <div class="enhanced-legend-item">
                                        <div class="legend-color-indicator" style="background-color: @GetCategoryColorHex(index);"></div>
                                        <div class="legend-content">
                                            <div class="legend-main">
                                                <MudText Typo="Typo.subtitle2" Class="legend-category-name">@category.Name</MudText>
                                                <MudText Typo="Typo.body1" Class="legend-amount">@category.Amount.ToString("C0")</MudText>
                                            </div>
                                            <MudText Typo="Typo.caption" Class="legend-percentage">@category.Percentage.ToString("P1") of total</MudText>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Member Income and Expense Donuts -->
        <MudItem xs="12" md="6">
            <MudCard Class="summary-card chart-card" Elevation="0">
                <MudCardContent>
                    <div class="chart-header">
                        <MudText Typo="Typo.h6" Class="chart-title">Family Member Breakdown</MudText>
                        <MudText Typo="Typo.caption" Class="chart-subtitle">Income vs. expense share</MudText>
                    </div>

                    <div class="member-donut-section">
                        <div class="member-donut-column">
                            <MudText Typo="Typo.subtitle2" Class="member-donut-title">Family Income</MudText>
                            @if (_memberIncomeSummaries.Count == 0)
                            {
                                <div class="empty-chart small">
                                    <MudIcon Icon="@Icons.Material.Filled.Savings" Size="Size.Medium" Color="Color.Default" />
                                    <MudText Typo="Typo.caption" Class="mt-1">No income data</MudText>
                                </div>
                            }
                            else
                            {
                                <MudChart ChartType="ChartType.Donut"
                                          InputData="@GetMemberIncomeDonutData().ToArray()"
                                          InputLabels="@GetMemberIncomeLabels().ToArray()"
                                          Width="220px"
                                          Height="220px"
                                          ChartOptions="@_memberDonutChartOptions">
                                </MudChart>
                            }
                        </div>
                        <div class="member-donut-column">
                            <MudText Typo="Typo.subtitle2" Class="member-donut-title">Family Expense</MudText>
                            @if (_memberExpenseSummaries.Count == 0)
                            {
                                <div class="empty-chart small">
                                    <MudIcon Icon="@Icons.Material.Filled.ShoppingBag" Size="Size.Medium" Color="Color.Default" />
                                    <MudText Typo="Typo.caption" Class="mt-1">No expense data</MudText>
                                </div>
                            }
                            else
                            {
                                <MudChart ChartType="ChartType.Donut"
                                          InputData="@GetMemberExpenseDonutData().ToArray()"
                                          InputLabels="@GetMemberExpenseLabels().ToArray()"
                                          Width="220px"
                                          Height="220px"
                                          ChartOptions="@_memberDonutChartOptions">
                                </MudChart>
                            }
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Family Member Contributions -->
    <div class="member-contributions-section">
        <div class="section-header">
            <MudText Typo="Typo.h6" Class="section-title">Family Member Spending</MudText>
        </div>

        @if (_memberExpenseSummaries.Count == 0)
        {
            <MudCard Class="empty-card" Elevation="0">
                <MudCardContent Class="text-center">
                    <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Large" Color="Color.Default" />
                    <MudText Typo="Typo.h6" Class="mt-2">No member data</MudText>
                    <MudText Typo="Typo.body2" Class="mb-3">No family member spending data for this period</MudText>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <MudCard Class="member-contributions-card" Elevation="0">
                <MudCardContent>
                    <div class="member-contributions-grid">
                        @foreach (var (member, index) in _memberExpenseSummaries.Select((m, i) => (m, i)))
                        {
                            <div class="member-contribution-item">
                                <div class="member-header">
                                    <MudAvatar Size="Size.Medium"
                                               Class="member-avatar"
                                               Style="@($"background-color: {GetMemberColorHex(index)};")">
                                        @GetMemberInitial(member.Name)
                                    </MudAvatar>
                                    <div class="member-info">
                                        <MudText Typo="Typo.subtitle1" Class="member-name">@member.Name</MudText>
                                        <MudText Typo="Typo.caption" Class="member-transactions">@member.TransactionCount transactions</MudText>
                                    </div>
                                    <div class="member-amount">
                                        <MudText Typo="Typo.h6" Class="amount-text">@member.TotalAmount.ToString("C0")</MudText>
                                        <MudText Typo="Typo.caption" Class="percentage-text">@member.Percentage.ToString("P1")</MudText>
                                    </div>
                                </div>

                                <div class="member-progress">
                                    <MudProgressLinear Value="@member.Percentage"
                                                     Size="Size.Medium"
                                                     Color="Color.Default"
                                                     Style="@($"--mud-palette-default: {GetMemberColorHex(index)};")" />
                                </div>

                                @if (member.TopCategories.Any())
                                {
                                    <div class="member-top-categories">
                                        <MudText Typo="Typo.caption" Class="categories-label">Top spending:</MudText>
                                        <div class="categories-list">
                                            @foreach (var category in member.TopCategories.Take(3))
                                            {
                                                <MudChip Size="Size.Small"
                                                       Color="Color.Default"
                                                       Variant="Variant.Text"
                                                       Class="category-chip">
                                                    @category.CategoryName (@category.Amount.ToString("C0"))
                                                </MudChip>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </MudCardContent>
            </MudCard>
        }
    </div>
</MudContainer>

@code {
    private string? _error;
    private PeriodType _selectedPeriodType = PeriodType.Monthly;
    private DateTime _currentPeriodStart = DateTime.Today.AddDays(1 - DateTime.Today.Day); // Start of current month
    private List<Transaction> _allTransactions = new();
    private List<Transaction> _highlightTransactions = new();
    private List<CategorySummary> _topCategories = new();
    private List<FamilyMember> _familyUsers = new();
    private List<MemberSummary> _memberExpenseSummaries = new();
    private List<MemberSummary> _memberIncomeSummaries = new();
    private List<ChartDataPoint> _chartData = new();
    private List<ChartSeries> _lineChartSeries = new();
    private List<string> _xAxisLabels = new();
    private int selectedIndex = -1;
    private ChartOptions _lineChartOptions = new();
    private ChartOptions _donutChartOptions = new();
    private ChartOptions _memberDonutChartOptions = new();
    private readonly string[] _categoryPalette = new[]
    {
        "#1F2937", // Slate
        "#9333EA", // Purple
        "#F97316", // Orange
        "#0EA5E9", // Sky
        "#10B981", // Emerald
        "#F59E0B", // Amber
        "#EF4444", // Red
        "#3B82F6"  // Blue
    };

    private readonly string[] _memberPalette = new[]
    {
        "#2563EB",
        "#EC4899",
        "#14B8A6",
        "#F97316",
        "#8B5CF6",
        "#22C55E",
        "#FACC15",
        "#0EA5E9"
    };
    private bool ShowComparison = true;

    // Filter state
    private string _selectedUserId = string.Empty;

    // Financial data
    private decimal _filteredIncome;
    private decimal _filteredExpense;
    private decimal _previousExpense;
    private decimal _previousIncome;
    private TrendDirection _expenseTrend = TrendDirection.Unchanged;
    private TrendDirection _incomeTrend = TrendDirection.Unchanged;

    // Calculated properties
    private decimal NetBalance => _filteredIncome - _filteredExpense;

    protected override async Task OnInitializedAsync()
    {
        InitializeChartOptions();
        await LoadDataAsync();
        await LoadFamilyUsersAsync();
    }

    private void InitializeChartOptions()
    {
        _lineChartOptions = new ChartOptions
        {
            InterpolationOption = InterpolationOption.Straight,
            LineStrokeWidth = 2,
            ChartPalette = _categoryPalette
        };

        _donutChartOptions = new ChartOptions
        {
            ChartPalette = _categoryPalette
        };

        _memberDonutChartOptions = new ChartOptions
        {
            ChartPalette = _memberPalette
        };
    }

    private async Task LoadDataAsync()
    {
        try
        {
            _allTransactions = await TxSvc.GetAsync();
            await RefreshInsightsAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error loading insights: {ex.Message}";
        }
    }

    private async Task LoadFamilyUsersAsync()
    {
        try
        {
            _familyUsers = await UserSvc.GetUsersAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error loading family members: {ex.Message}";
        }
    }

    private async Task OnUserChanged(string userId)
    {
        _selectedUserId = userId;
        await RefreshInsightsAsync();
    }

    private void SetPeriodType(PeriodType periodType)
    {
        if (_selectedPeriodType == periodType)
        {
            return;
        }

        _selectedPeriodType = periodType;
        _currentPeriodStart = GetPeriodStartForDate(DateTime.Today, _selectedPeriodType);
        _ = RefreshInsightsAsync();
    }

    private string GetCurrentPeriodDisplay() => _selectedPeriodType switch
    {
        PeriodType.Weekly => $"{_currentPeriodStart:MMM dd} - {_currentPeriodStart.AddDays(6):MMM dd}",
        PeriodType.Monthly => _currentPeriodStart.ToString("MMMM yyyy"),
        PeriodType.Yearly => _currentPeriodStart.ToString("yyyy"),
        _ => _currentPeriodStart.ToString("MMMM yyyy")
    };

    private string GetChartPeriodDescription() => _selectedPeriodType switch
    {
        PeriodType.Weekly => "Daily breakdown",
        PeriodType.Monthly => "Weekly breakdown",
        PeriodType.Yearly => "Monthly breakdown",
        _ => "Period breakdown"
    };

    private Variant GetRangeVariant(PeriodType period) => _selectedPeriodType == period ? Variant.Filled : Variant.Outlined;

    private string GetRangeButtonClass(PeriodType period)
    {
        var classes = new List<string> { "range-button" };
        if (_selectedPeriodType == period)
        {
            classes.Add("range-button--active");
        }

        return string.Join(" ", classes);
    }

    private string GetRangeButtonIcon(PeriodType period) => period switch
    {
        PeriodType.Weekly => Icons.Material.Filled.ViewWeek,
        PeriodType.Monthly => Icons.Material.Filled.DateRange,
        PeriodType.Yearly => Icons.Material.Filled.CalendarMonth,
        _ => Icons.Material.Filled.Timeline
    };

    private DateTime GetWeekStart(DateTime date)
    {
        var culture = CultureInfo.CurrentCulture;
        var firstDay = culture.DateTimeFormat.FirstDayOfWeek;
        var diff = (7 + (date.DayOfWeek - firstDay)) % 7;
        return date.Date.AddDays(-diff);
    }

    private DateTime GetPeriodStartForDate(DateTime date, PeriodType period)
    {
        return period switch
        {
            PeriodType.Weekly => GetWeekStart(date),
            PeriodType.Monthly => new DateTime(date.Year, date.Month, 1),
            PeriodType.Yearly => new DateTime(date.Year, 1, 1),
            _ => date.Date
        };
    }

    private async Task RefreshInsightsAsync()
    {
        var (start, end) = GetCurrentPeriodRange();
        var (prevStart, prevEnd) = GetPreviousPeriodRange();

        var currentTransactions = FilterTransactions(start, end);
        var previousTransactions = FilterTransactions(prevStart, prevEnd);

        // Apply user filter if selected
        if (!string.IsNullOrEmpty(_selectedUserId))
        {
            var selectedUser = _familyUsers.FirstOrDefault(u => u.Id.ToString() == _selectedUserId);
            if (selectedUser != null)
            {
                currentTransactions = currentTransactions.Where(t => t.User == selectedUser.Name).ToList();
                previousTransactions = previousTransactions.Where(t => t.User == selectedUser.Name).ToList();
            }
        }

        // Calculate summaries
        _filteredIncome = currentTransactions.Where(t => t.IsIncome).Sum(t => t.Amount);
        _filteredExpense = currentTransactions.Where(t => !t.IsIncome).Sum(t => t.Amount);
        _previousExpense = previousTransactions.Where(t => !t.IsIncome).Sum(t => t.Amount);
        _previousIncome = previousTransactions.Where(t => t.IsIncome).Sum(t => t.Amount);

        // Calculate trends
        _expenseTrend = _filteredExpense == _previousExpense ? TrendDirection.Unchanged :
                       _filteredExpense > _previousExpense ? TrendDirection.Up : TrendDirection.Down;
        _incomeTrend = _filteredIncome == _previousIncome ? TrendDirection.Unchanged :
                      _filteredIncome > _previousIncome ? TrendDirection.Up : TrendDirection.Down;

        // Recent transactions
        _highlightTransactions = currentTransactions
            .OrderByDescending(t => t.Date)
            .ThenByDescending(t => t.Id)
            .ToList();

        // Build category and chart data
        BuildCategoryData(currentTransactions);
        BuildMemberSummaryData(currentTransactions);
        BuildChartData(currentTransactions, start, end);
        BuildLineChartSeries(currentTransactions, start, end);

        await Task.CompletedTask;
    }

    private (DateTime Start, DateTime End) GetCurrentPeriodRange()
    {
        return _selectedPeriodType switch
        {
            PeriodType.Weekly => (_currentPeriodStart, _currentPeriodStart.AddDays(7).AddTicks(-1)),
            PeriodType.Monthly => (_currentPeriodStart, _currentPeriodStart.AddMonths(1).AddTicks(-1)),
            PeriodType.Yearly => (_currentPeriodStart, _currentPeriodStart.AddYears(1).AddTicks(-1)),
            _ => (_currentPeriodStart, _currentPeriodStart.AddMonths(1).AddTicks(-1))
        };
    }

    private (DateTime Start, DateTime End) GetPreviousPeriodRange()
    {
        return _selectedPeriodType switch
        {
            PeriodType.Weekly => (_currentPeriodStart.AddDays(-7), _currentPeriodStart.AddTicks(-1)),
            PeriodType.Monthly => (_currentPeriodStart.AddMonths(-1), _currentPeriodStart.AddTicks(-1)),
            PeriodType.Yearly => (_currentPeriodStart.AddYears(-1), _currentPeriodStart.AddTicks(-1)),
            _ => (_currentPeriodStart.AddMonths(-1), _currentPeriodStart.AddTicks(-1))
        };
    }

    private List<Transaction> FilterTransactions(DateTime start, DateTime end)
    {
        return _allTransactions.Where(t =>
            t.Date.Date >= start.Date && t.Date.Date <= end.Date).ToList();
    }

    private void BuildCategoryData(List<Transaction> transactions)
    {
        var expenseTransactions = transactions.Where(t => !t.IsIncome).ToList();
        var totalExpenses = expenseTransactions.Sum(t => t.Amount);

        _topCategories = expenseTransactions
            .GroupBy(t => NormalizeCategory(t.Category?.Name))
            .Select(g => new CategorySummary
            {
                Name = g.Key,
                Amount = g.Sum(t => t.Amount),
                TransactionCount = g.Count(),
                Percentage = totalExpenses > 0 ? (double)(g.Sum(t => t.Amount) / totalExpenses) : 0
            })
            .OrderByDescending(c => c.Amount)
            .ToList();
    }

    private string GetCategoryIcon(string category) => category switch
    {
        "Food" => Icons.Material.Filled.Restaurant,
        "Transport" => Icons.Material.Filled.DirectionsCar,
        "Entertainment" => Icons.Material.Filled.Movie,
        "Utilities" => Icons.Material.Filled.Lightbulb,
        "Healthcare" => Icons.Material.Filled.LocalHospital,
        "Education" => Icons.Material.Filled.School,
        "Rent" => Icons.Material.Filled.Home,
        _ => Icons.Material.Filled.Category
    };

    private string GetBalanceClass() => NetBalance >= 0 ? "metric-amount income" : "metric-amount expense";

    private string GetBalanceStatus() => NetBalance >= 0 ? "Positive" : "Deficit";

    private string GetTrendClass(TrendDirection trend) => "text-muted"; // Consistent neutral color for all trends

    private string GetTrendText(TrendDirection trend) => trend switch
    {
        TrendDirection.Up => "↑ Higher than last period",
        TrendDirection.Down => "↓ Lower than last period",
        _ => "→ Same as last period"
    };

    private string GetIncomeTrendText(TrendDirection trend) => trend switch
    {
        TrendDirection.Up => "↑ Higher than last period",
        TrendDirection.Down => "↓ Lower than last period",
        _ => "→ Same as last period"
    };

    private void NavigateToTransaction(int transactionId) => Nav.NavigateTo($"/transactions/{transactionId}");

    private static string NormalizeCategory(string? category)
        => string.IsNullOrWhiteSpace(category) ? "Uncategorized" : category.Trim();

    private static string GetMemberInitial(string? name)
        => string.IsNullOrWhiteSpace(name) ? "?" : name.Trim()[0].ToString().ToUpperInvariant();

    private void BuildMemberSummaryData(List<Transaction> transactions)
    {
        _memberExpenseSummaries.Clear();
        _memberIncomeSummaries.Clear();

        if (!transactions.Any())
        {
            return;
        }

        var expenseTransactions = transactions.Where(t => !t.IsIncome && !string.IsNullOrEmpty(t.User)).ToList();
        var incomeTransactions = transactions.Where(t => t.IsIncome && !string.IsNullOrEmpty(t.User)).ToList();

        _memberExpenseSummaries = BuildMemberSummaries(expenseTransactions, includeCategories: true);
        _memberIncomeSummaries = BuildMemberSummaries(incomeTransactions, includeCategories: false);
    }

    private List<MemberSummary> BuildMemberSummaries(List<Transaction> transactions, bool includeCategories)
    {
        var summaries = new List<MemberSummary>();

        if (!transactions.Any())
        {
            return summaries;
        }

        var totalAmount = transactions.Sum(t => t.Amount);
        if (totalAmount == 0)
        {
            return summaries;
        }

        var memberGroups = transactions.GroupBy(t => t.User).ToList();

        foreach (var group in memberGroups)
        {
            var memberTransactions = group.ToList();
            var memberTotal = memberTransactions.Sum(t => t.Amount);
            var percentage = (double)(memberTotal / totalAmount);

            var topCategories = includeCategories
                ? memberTransactions
                    .Where(t => t.Category != null)
                    .GroupBy(t => t.Category!.Name)
                    .Select(g => new MemberCategorySummary
                    {
                        CategoryName = g.Key,
                        Amount = g.Sum(t => t.Amount),
                        TransactionCount = g.Count()
                    })
                    .OrderByDescending(c => c.Amount)
                    .Take(3)
                    .ToList()
                : new List<MemberCategorySummary>();

            summaries.Add(new MemberSummary
            {
                Name = group.Key ?? "Unknown",
                TotalAmount = memberTotal,
                TransactionCount = memberTransactions.Count,
                Percentage = percentage,
                TopCategories = topCategories
            });
        }

        return summaries.OrderByDescending(m => m.TotalAmount).ToList();
    }

    private string GetMemberColorHex(int index) => _memberPalette[index % _memberPalette.Length];

    private List<double> GetMemberIncomeDonutData() =>
        _memberIncomeSummaries.OrderByDescending(m => m.TotalAmount).Select(m => (double)m.TotalAmount).ToList();

    private List<string> GetMemberIncomeLabels() =>
        _memberIncomeSummaries.OrderByDescending(m => m.TotalAmount).Select(m => m.Name).ToList();

    private List<double> GetMemberExpenseDonutData() =>
        _memberExpenseSummaries.OrderByDescending(m => m.TotalAmount).Select(m => (double)m.TotalAmount).ToList();

    private List<string> GetMemberExpenseLabels() =>
        _memberExpenseSummaries.OrderByDescending(m => m.TotalAmount).Select(m => m.Name).ToList();

    // Chart helper methods
    private void BuildChartData(List<Transaction> transactions, DateTime start, DateTime end)
    {
        _chartData.Clear();
        if (!transactions.Any()) return;

        var expenseTransactions = transactions.Where(t => !t.IsIncome).ToList();
        if (!expenseTransactions.Any()) return;

        var points = CreateChartPoints(expenseTransactions, start);
        _chartData = points;
    }

    private List<ChartDataPoint> BuildWeeklyChartPoints(List<Transaction> transactions, DateTime start)
    {
        var points = new List<ChartDataPoint>();
        for (int day = 0; day < 7; day++)
        {
            var dayStart = start.AddDays(day);
            var dayEnd = dayStart.AddDays(1);
            var amount = transactions.Where(t => t.Date.Date >= dayStart.Date && t.Date.Date < dayEnd.Date).Sum(t => t.Amount);

            points.Add(new ChartDataPoint
            {
                Label = dayStart.ToString("ddd"),
                Amount = amount
            });
        }
        AssignEvenlySpacedXPositions(points);
        CalculateYPositions(points);
        return points;
    }

    private List<ChartDataPoint> BuildMonthlyChartPoints(List<Transaction> transactions, DateTime start)
    {
        var points = new List<ChartDataPoint>();
        var monthEnd = start.AddMonths(1);
        var rollingWeekStart = GetWeekStart(start);

        while (rollingWeekStart < monthEnd)
        {
            var rangeStart = rollingWeekStart < start ? start : rollingWeekStart;
            var rangeEndExclusive = rollingWeekStart.AddDays(7);

            if (rangeEndExclusive > monthEnd)
            {
                rangeEndExclusive = monthEnd;
            }

            var amount = transactions
                .Where(t => t.Date >= rangeStart && t.Date < rangeEndExclusive)
                .Sum(t => t.Amount);

            var rangeEndInclusive = rangeEndExclusive.AddDays(-1);
            var label = rangeStart.Month == rangeEndInclusive.Month
                ? $"{rangeStart:MMM d}-{rangeEndInclusive:dd}"
                : $"{rangeStart:MMM d}-{rangeEndInclusive:MMM d}";

            points.Add(new ChartDataPoint
            {
                Label = label,
                Amount = amount
            });

            rollingWeekStart = rollingWeekStart.AddDays(7);
        }
        AssignEvenlySpacedXPositions(points);
        CalculateYPositions(points);
        return points;
    }

    private List<ChartDataPoint> BuildYearlyChartPoints(List<Transaction> transactions, DateTime start)
    {
        var points = new List<ChartDataPoint>();
        for (int month = 0; month < 12; month++)
        {
            var monthStart = start.AddMonths(month);
            var monthEnd = monthStart.AddMonths(1);
            var amount = transactions.Where(t => t.Date >= monthStart && t.Date < monthEnd).Sum(t => t.Amount);

            points.Add(new ChartDataPoint
            {
                Label = monthStart.ToString("MMM"),
                Amount = amount
            });
        }
        AssignEvenlySpacedXPositions(points);
        CalculateYPositions(points);
        return points;
    }

    private void AssignEvenlySpacedXPositions(List<ChartDataPoint> points)
    {
        if (!points.Any())
        {
            return;
        }

        var divisions = Math.Max(1, points.Count - 1);

        for (var i = 0; i < points.Count; i++)
        {
            points[i].XPosition = divisions == 0 ? 0 : (i / (double)divisions) * 100;
        }
    }

    private void CalculateYPositions(List<ChartDataPoint> points)
    {
        if (!points.Any()) return;

        var maxAmount = points.Max(p => p.Amount);
        if (maxAmount == 0) return;

        foreach (var point in points)
        {
            point.YPosition = (double)(point.Amount / maxAmount) * 80; // 80% max height
        }
    }

    private double GetLineAngle(ChartDataPoint start, ChartDataPoint end)
    {
        var deltaX = end.XPosition - start.XPosition;
        var deltaY = end.YPosition - start.YPosition;
        return Math.Atan2(deltaY, deltaX) * (180 / Math.PI);
    }

    private Color GetCategoryColor(int index) => Color.Default;

    private string GetCategoryColorHex(int index) => _categoryPalette[index % _categoryPalette.Length];

    private string GetDonutPosition(int index)
    {
        var rotation = index * 72; // 360/5 for 5 categories
        return $"transform: rotate({rotation}deg);";
    }

    // Enhanced chart data methods for MudBlazor charts
    private void BuildLineChartSeries(List<Transaction> transactions, DateTime start, DateTime end)
    {
        _lineChartSeries.Clear();
        _xAxisLabels.Clear();

        var expenseTransactions = transactions.Where(t => !t.IsIncome).ToList();
        if (!expenseTransactions.Any()) return;

        var chartPoints = CreateChartPoints(expenseTransactions, start);
        _xAxisLabels = chartPoints.Select(p => p.Label).ToList();
        var spendingData = chartPoints.Select(p => (double)p.Amount).ToArray();

        _lineChartSeries.Add(new ChartSeries
        {
            Name = "Spending",
            Data = spendingData
        });
    }

    private List<ChartDataPoint> CreateChartPoints(List<Transaction> transactions, DateTime start)
    {
        return _selectedPeriodType switch
        {
            PeriodType.Weekly => BuildWeeklyChartPoints(transactions, start),
            PeriodType.Monthly => BuildMonthlyChartPoints(transactions, start),
            PeriodType.Yearly => BuildYearlyChartPoints(transactions, start),
            _ => new List<ChartDataPoint>()
        };
    }

    private List<double> GetDonutData()
    {
        return _topCategories.Take(5).Select(c => (double)c.Amount).ToList();
    }

    private List<string> GetDonutLabels()
    {
        return _topCategories.Take(5).Select(c => c.Name).ToList();
    }

    // Data models
    public class CategorySummary
    {
        public string Name { get; set; } = "";
        public decimal Amount { get; set; }
        public int TransactionCount { get; set; }
        public double Percentage { get; set; }
    }

    public enum PeriodType
    {
        Weekly,
        Monthly,
        Yearly
    }

    public enum TrendDirection
    {
        Up,
        Down,
        Unchanged
    }

    public class ChartDataPoint
    {
        public string Label { get; set; } = "";
        public decimal Amount { get; set; }
        public double XPosition { get; set; }
        public double YPosition { get; set; }
    }

    public class MemberSummary
    {
        public string Name { get; set; } = "";
        public decimal TotalAmount { get; set; }
        public int TransactionCount { get; set; }
        public double Percentage { get; set; }
        public List<MemberCategorySummary> TopCategories { get; set; } = new();
    }

    public class MemberCategorySummary
    {
        public string CategoryName { get; set; } = "";
        public decimal Amount { get; set; }
        public int TransactionCount { get; set; }
    }
}

<style>
/* Use Home Page Styling */
.home-container {
    padding: 24px;
    background: #FFFFFF;
    min-height: 100vh;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
}

/* Universal Card Classes from Home Page */
.summary-card, .transactions-card, .empty-card, .chart-card {
    background: #FFFFFF;
    border: 1px solid rgba(0, 0, 0, 0.08);
    border-radius: 20px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.06);
    transition: all 0.25s ease;
}

.summary-card:hover, .chart-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
}

/* Section Headers */
.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.section-header h4, .section-header h6 {
    color: #000000;
    font-weight: 600;
    font-family: 'Inter', sans-serif;
}

.header-title {
    color: #000000;
    font-weight: 700;
    font-family: 'Inter', sans-serif;
    margin-bottom: 32px;
}

/* Filter Controls */
.filter-controls {
    margin-bottom: 32px;
}

.filter-label {
    color: #000000;
    font-weight: 600;
    font-family: 'Inter', sans-serif;
    margin-bottom: 4px;
}

.filter-simple-grid {
    width: 100%;
}

.range-button-group {
    border-radius: 14px;
    background: #F3F4F6;
    padding: 6px;
    gap: 8px;
}

.range-button-group .mud-button-root {
    min-width: 0;
    border-radius: 12px;
    font-weight: 500;
    padding: 10px 16px;
    text-transform: none;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.range-button-group .mud-button-root:hover {
    transform: translateY(-1px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
}

.range-button {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: 12px;
    color: #111827;
}

.range-button .mud-icon-root {
    color: #4B5563;
}

.range-button-content {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    line-height: 1.1;
}

.range-button-title {
    font-weight: 600;
    font-size: 0.9rem;
}

.range-button-subtitle {
    font-size: 0.75rem;
    color: #6B7280;
}


.range-button--active,
.range-button--active.mud-button-root,
.range-button--active.mud-button-filled {
    background-color: #000000 !important;
    color: #ffffff !important;
}

.range-button--active .mud-icon-root {
    color: #ffffff;
}

.range-button--active .range-button-subtitle {
    color: rgba(255, 255, 255, 0.75);
}

.current-period-label {
    color: rgba(0, 0, 0, 0.6);
}

@@media (max-width: 960px) {
    .range-button-group .mud-button-root {
        flex: 1 1 auto;
    }
}

/* Metrics Section */
.metrics-section {
    margin-bottom: 32px;
}

.metric-card {
    text-align: center;
}

.metric-amount {
    font-weight: 700;
    font-family: 'Inter', sans-serif;
    font-size: 2rem;
    margin-bottom: 8px;
}

.metric-amount.income {
    color: #000000;
}

.metric-amount.expense {
    color: #000000;
}

.metric-label {
    color: rgba(0, 0, 0, 0.8);
    font-family: 'Inter', sans-serif;
    font-weight: 500;
    margin-bottom: 4px;
}

/* Charts Section */
.charts-section {
    margin-bottom: 32px;
}

.chart-header {
    margin-bottom: 24px;
}

.chart-title {
    color: #000000;
    font-weight: 600;
    font-family: 'Inter', sans-serif;
    margin-bottom: 4px;
}

.chart-subtitle {
    color: rgba(0, 0, 0, 0.6);
    font-family: 'Inter', sans-serif;
}

/* Line Chart */
.line-chart {
    position: relative;
    height: 200px;
    background: #F8F9FA;
    border: 1px solid rgba(0, 0, 0, 0.05);
    border-radius: 12px;
    margin: 16px 0;
}

.chart-point {
    position: absolute;
    width: 8px;
    height: 8px;
    background: #000000;
    border-radius: 50%;
    cursor: pointer;
    transform: translate(-50%, 50%);
}

.chart-point:hover .point-tooltip {
    opacity: 1;
    visibility: visible;
}

.point-tooltip {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
}

.tooltip-content {
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 8px 12px;
    border-radius: 8px;
    text-align: center;
    white-space: nowrap;
}

.chart-line {
    position: absolute;
    height: 2px;
    background: #2f2f2f;
    transform-origin: left center;
}

.member-donut-section {
    display: flex;
    flex-wrap: wrap;
    gap: 24px;
    justify-content: space-between;
    margin-top: 16px;
}

.member-donut-column {
    flex: 1 1 220px;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 12px;
}

.member-donut-title {
    font-weight: 600;
    color: #000000;
}

.empty-chart {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 150px;
    color: rgba(0, 0, 0, 0.6);
    padding: 48px 20px;
}

.empty-chart.small {
    height: auto;
    padding: 32px 16px;
}

/* Donut Chart */
.donut-chart-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 24px;
}

.donut-chart-wrapper {
    position: relative;
    width: 160px;
    height: 160px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.category-donut {
    position: absolute;
    width: 140px !important;
    height: 140px !important;
}

.donut-center {
    position: absolute;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
}

.donut-total {
    color: #000000;
    font-weight: 700;
    font-family: 'Inter', sans-serif;
}

.category-legend {
    display: flex;
    flex-direction: column;
    gap: 12px;
    width: 100%;
}

.legend-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 8px;
    background: #F8F9FA;
    border: 1px solid rgba(0, 0, 0, 0.05);
    border-radius: 8px;
}

.legend-color {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    flex-shrink: 0;
}

.legend-details {
    flex: 1;
}

/* Transactions Section */
.transactions-section {
    margin-bottom: 32px;
}

.transaction-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 0;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.transaction-item:hover {
    background-color: #F8F9FA;
    border-radius: 8px;
    margin: 0 -16px;
    padding: 16px;
}

.transaction-info {
    flex: 1;
}

.transaction-meta {
    color: rgba(0, 0, 0, 0.6);
    font-family: 'Inter', sans-serif;
}

.transaction-amount {
    color: #000000;
    font-weight: 700;
    font-family: 'Inter', sans-serif;
}

/* Utility Classes */
.text-success {
    color: #000000 !important;
}

.text-error {
    color: #000000 !important;
}

.text-muted {
    color: rgba(0, 0, 0, 0.6) !important;
}

/* Enhanced Responsive Design */
@@media (max-width: 767px) {
    .home-container {
        padding: 16px;
    }

    .range-button-group {
        width: 100%;
    }

    .range-button-group .mud-button-root {
        flex: 1 1 auto;
    }

    .current-period-label {
        font-size: 0.875rem;
    }

    .metric-amount {
        font-size: 1.5rem;
    }

    .charts-section .mud-item {
        margin-bottom: 16px;
    }

    .enhanced-donut-chart-container {
        gap: 16px;
        padding: 12px;
    }

    .enhanced-legend-item {
        padding: 12px;
        gap: 12px;
    }

    .legend-main {
        flex-direction: column;
        align-items: flex-start;
        gap: 4px;
    }

    .transaction-item {
        padding: 12px 0;
    }

    .enhanced-line-chart {
        min-height: 250px;
        padding: 12px;
    }
}

@@media (max-width: 480px) {
    .enhanced-donut-chart-container {
        padding: 8px;
    }

    .donut-chart-section {
        margin-bottom: 12px;
    }

    .enhanced-legend-item {
        padding: 10px;
        gap: 10px;
    }

    .legend-color-indicator {
        width: 16px;
        height: 16px;
    }

    .enhanced-line-chart {
        min-height: 200px;
        padding: 8px;
    }

}

/* Metric Comparisons */
.metric-comparison {
    display: flex;
    flex-direction: column;
    gap: 2px;
}

.comparison-detail {
    color: rgba(0, 0, 0, 0.5) !important;
    font-size: 0.75rem;
}

/* Member Contributions Section */
.member-contributions-section {
    margin-bottom: 32px;
}

.member-contributions-card {
    background: #FFFFFF;
    border: 1px solid rgba(0, 0, 0, 0.08);
    border-radius: 20px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.06);
}

.member-contributions-grid {
    display: grid;
    gap: 24px;
}

.member-contribution-item {
    padding: 20px;
    background: #FAFAFA;
    border: 1px solid rgba(0, 0, 0, 0.05);
    border-radius: 16px;
    transition: all 0.2s ease;
}

.member-contribution-item:hover {
    background: #F5F5F5;
    border-color: rgba(0, 0, 0, 0.1);
}

.member-header {
    display: flex;
    align-items: center;
    gap: 16px;
    margin-bottom: 16px;
}

.member-avatar {
    font-weight: 600;
    color: #ffffff;
}

.member-info {
    flex: 1;
}

.member-name {
    color: #000000;
    font-weight: 600;
    margin: 0 !important;
}

.member-transactions {
    color: rgba(0, 0, 0, 0.6);
    margin: 4px 0 0 0 !important;
}

.member-amount {
    text-align: right;
}

.amount-text {
    color: #000000;
    font-weight: 700;
    margin: 0 !important;
}

.percentage-text {
    color: rgba(0, 0, 0, 0.6);
    margin: 4px 0 0 0 !important;
}

.member-progress {
    margin-bottom: 16px;
}

.member-top-categories {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.categories-label {
    color: rgba(0, 0, 0, 0.7);
    font-weight: 600;
    margin: 0 !important;
}

.categories-list {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
}

.category-chip {
    background-color: rgba(0, 0, 0, 0.05) !important;
    color: rgba(0, 0, 0, 0.8) !important;
    border: 1px solid rgba(0, 0, 0, 0.1) !important;
    font-size: 0.75rem !important;
}

@@media (max-width: 767px) {
    .member-header {
        flex-direction: column;
        text-align: center;
        gap: 12px;
    }

    .member-info, .member-amount {
        text-align: center;
    }

    .member-contributions-grid {
        gap: 16px;
    }

    .member-contribution-item {
        padding: 16px;
    }
}
</style>
