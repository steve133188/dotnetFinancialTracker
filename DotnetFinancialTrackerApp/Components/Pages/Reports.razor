@page "/reports"
@using System.Globalization
@using System.Linq
@using DotnetFinancialTrackerApp.Models
@using DotnetFinancialTrackerApp.Components.Shared
@using DotnetFinancialTrackerApp.Components.Insight
@using DotnetFinancialTrackerApp.Services
@using MudBlazor
@inject IInsightService InsightSvc
@inject IUserService UserSvc
@inject NavigationManager Nav

<PageTitle>Insights - Family Tracker</PageTitle>

<MudContainer Class="home-container" MaxWidth="MaxWidth.False">
    @if (!string.IsNullOrEmpty(_error))
    {
        <MudAlert Severity="Severity.Warning" Class="mb-3" ShowCloseIcon="true" CloseIconClicked="@(() => _error = string.Empty)">
            @_error
        </MudAlert>
    }

    <!-- Header -->
    <div class="section-header">
        <MudText Typo="Typo.h4" Class="header-title">Insights & Analytics</MudText>
    </div>

    <!-- Filter Controls -->
    <FilterControls SelectedPeriodType="@_selectedPeriodType"
                    OnPeriodTypeChanged="@SetPeriodType"
                    SelectedUserId="@_selectedUserId"
                    OnUserChanged="@OnUserChanged"
                    FamilyUsers="@_familyUsers"
                    CurrentPeriodDisplay="@GetCurrentPeriodDisplay()" />

    <!-- Key Metrics Summary -->
    <MetricsSummary FilteredIncome="@_insightData.FilteredIncome"
                    FilteredExpense="@_insightData.FilteredExpense"
                    PreviousExpense="@_insightData.PreviousExpense"
                    PreviousIncome="@_insightData.PreviousIncome"
                    ExpenseTrend="@_insightData.ExpenseTrend"
                    IncomeTrend="@_insightData.IncomeTrend"
                    TransactionCount="@_insightData.HighlightTransactions.Count"
                    ShowComparison="@_showComparison" />

    <!-- Charts Section -->
    <MudGrid Class="charts-section">
        <!-- Spending Trends Line Chart -->
        <TrendingChart
                      chartDataLength="@_insightData.ChartData.Count"
                      _xAxisLabels="@_insightData.XAxisLabels"
                      _lineChartSeries="@_insightData.LineChartSeries"
                      _lineChartOptions="@_lineChartOptions"
                      description="@GetCurrentPeriodDisplay()"
                      />

        <!-- Category Breakdown Donut Chart -->
        <CategoryBreakdown TopCategories="@_insightData.TopCategories"
                           ChartOptions="@_donutChartOptions" />

        <!-- Member Income and Expense Donuts -->
        <MemberBreakdown MemberIncomeSummaries="@_insightData.MemberIncomeSummaries"
                         MemberExpenseSummaries="@_insightData.MemberExpenseSummaries"
                         MemberChartOptions="@_memberDonutChartOptions" />
    </MudGrid>

    <!-- Family Member Contributions -->
    <MemberContributions MemberExpenseSummaries="@_insightData.MemberExpenseSummaries" />
</MudContainer>

@code {
    private string? _error;
    private PeriodType _selectedPeriodType = PeriodType.Monthly;
    private DateTime _currentPeriodStart = DateTime.Today.AddDays(1 - DateTime.Today.Day); // Start of current month
    private List<FamilyMember> _familyUsers = new();
    private ChartOptions _lineChartOptions = new();
    private ChartOptions _donutChartOptions = new();
    private ChartOptions _memberDonutChartOptions = new();
    private readonly string[] _categoryPalette = new[]
    {
        "#1F2937", // Slate
        "#9333EA", // Purple
        "#F97316", // Orange
        "#0EA5E9", // Sky
        "#10B981", // Emerald
        "#F59E0B", // Amber
        "#EF4444", // Red
        "#3B82F6"  // Blue
    };

    private readonly string[] _memberPalette = new[]
    {
        "#2563EB",
        "#EC4899",
        "#14B8A6",
        "#F97316",
        "#8B5CF6",
        "#22C55E",
        "#FACC15",
        "#0EA5E9"
    };
    private bool _showComparison = true;

    // Filter state
    private string _selectedUserId = string.Empty;

    // Insight data
    private InsightData _insightData = new();

    protected override async Task OnInitializedAsync()
    {
        InitializeChartOptions();
        await LoadFamilyUsersAsync();
        await RefreshInsightsAsync();
    }

    private void InitializeChartOptions()
    {
        _lineChartOptions = new ChartOptions
        {
            InterpolationOption = InterpolationOption.Straight,
            LineStrokeWidth = 2,
            ChartPalette = _categoryPalette
        };

        _donutChartOptions = new ChartOptions
        {
            ChartPalette = _categoryPalette
        };

        _memberDonutChartOptions = new ChartOptions
        {
            ChartPalette = _memberPalette
        };
    }

    private async Task RefreshInsightsAsync()
    {
        try
        {
            _insightData = await InsightSvc.GetInsightDataAsync(_selectedPeriodType, _currentPeriodStart, _selectedUserId);
        }
        catch (Exception ex)
        {
            _error = $"Error loading insights: {ex.Message}";
        }
    }

    private async Task LoadFamilyUsersAsync()
    {
        try
        {
            _familyUsers = await UserSvc.GetUsersAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error loading family members: {ex.Message}";
        }
    }

    private async Task OnUserChanged(string userId)
    {
        _selectedUserId = userId;
        await RefreshInsightsAsync();
    }

    private async Task SetPeriodType(PeriodType periodType)
    {
        if (_selectedPeriodType == periodType)
        {
            return;
        }

        _selectedPeriodType = periodType;
        _currentPeriodStart = InsightSvc.GetPeriodStartForDate(DateTime.Today, _selectedPeriodType);
        await RefreshInsightsAsync();
    }

    private string GetCurrentPeriodDisplay() => _selectedPeriodType switch
    {
        PeriodType.Weekly => $"{_currentPeriodStart:MMM dd} - {_currentPeriodStart.AddDays(6):MMM dd}",
        PeriodType.Monthly => _currentPeriodStart.ToString("MMMM yyyy"),
        PeriodType.Yearly => _currentPeriodStart.ToString("yyyy"),
        _ => _currentPeriodStart.ToString("MMMM yyyy")
    };
}