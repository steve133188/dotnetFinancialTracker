@page "/reports"
@using System.Globalization
@using DotnetFinancialTrackerApp.Models
@using MudBlazor
@inject DotnetFinancialTrackerApp.Services.ITransactionsService TxSvc
@inject DotnetFinancialTrackerApp.Services.IUserService UserSvc
@inject NavigationManager Nav

<PageTitle>Insights - Family Tracker</PageTitle>

<MudContainer Class="home-container" MaxWidth="MaxWidth.False">
    @if (!string.IsNullOrEmpty(_error))
    {
        <MudAlert Severity="Severity.Warning" Class="mb-3" ShowCloseIcon="true" CloseIconClicked="@(() => _error = string.Empty)">
            @_error
        </MudAlert>
    }

    <!-- Header -->
    <div class="section-header">
        <MudText Typo="Typo.h4" Class="header-title">Insights & Analytics</MudText>
    </div>

    <!-- Filter Controls -->
    <MudCard Class="summary-card filter-controls" Elevation="0">
        <MudCardContent>
            <MudGrid Class="filter-grid" Spacing="3">
                <MudItem xs="12" md="3">
                    <MudText Typo="Typo.subtitle2" Class="filter-label">Time Range</MudText>
                    <MudButtonGroup Color="Color.Default" Class="time-segmented" Elevation="0">
                        <MudButton Variant="@GetRangeVariant(PeriodType.Daily)" OnClick="@(() => SetPeriodType(PeriodType.Daily))">Daily</MudButton>
                        <MudButton Variant="@GetRangeVariant(PeriodType.Weekly)" OnClick="@(() => SetPeriodType(PeriodType.Weekly))">Weekly</MudButton>
                        <MudButton Variant="@GetRangeVariant(PeriodType.Monthly)" OnClick="@(() => SetPeriodType(PeriodType.Monthly))">Monthly</MudButton>
                        <MudButton Variant="@GetRangeVariant(PeriodType.Yearly)" OnClick="@(() => SetPeriodType(PeriodType.Yearly))">Yearly</MudButton>
                    </MudButtonGroup>
                </MudItem>

                <MudItem xs="12" md="3">
                    <MudText Typo="Typo.subtitle2" Class="filter-label">Family Member</MudText>
                    <MudSelect T="string"
                              Value="@_selectedUserId"
                              ValueChanged="@OnUserChanged"
                              Variant="Variant.Outlined"
                              Class="user-filter">
                        <MudSelectItem Value="@string.Empty">All Members</MudSelectItem>
                        @foreach (var user in _familyUsers)
                        {
                            <MudSelectItem Value="@user.Id.ToString()">@user.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="3">
                    <MudText Typo="Typo.subtitle2" Class="filter-label">Period</MudText>
                    <div class="period-navigation">
                        <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft"
                                     OnClick="@NavigatePrevious"
                                     Color="Color.Default"
                                     Size="Size.Medium"
                                     Disabled="@(_selectedPeriodType == PeriodType.Yearly && _currentPeriodStart.Year <= 2020)" />
                        <MudText Typo="Typo.subtitle1" Class="current-period">@GetCurrentPeriodDisplay()</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.ChevronRight"
                                     OnClick="@NavigateNext"
                                     Color="Color.Default"
                                     Size="Size.Medium"
                                     Disabled="@IsNextPeriodInFuture()" />
                    </div>
                </MudItem>

                <MudItem xs="12" md="3">
                    <MudText Typo="Typo.subtitle2" Class="filter-label">Quick Actions</MudText>
                    <MudStack Direction="Row" Spacing="1" Class="quick-actions" AlignItems="AlignItems.Center">
                        <MudButton Variant="Variant.Outlined"
                                 StartIcon="@Icons.Material.Filled.Today"
                                 OnClick="@(() => SetToCurrentPeriod())"
                                 Size="Size.Small"
                                 Class="quick-action-button">
                            Current Period
                        </MudButton>
                        <MudButton Variant="Variant.Outlined"
                                 StartIcon="@Icons.Material.Filled.Compare"
                                 OnClick="@(() => ShowComparison = !ShowComparison)"
                                 Size="Size.Small"
                                 Class="quick-action-button">
                            @(ShowComparison ? "Hide" : "Show") Comparison
                        </MudButton>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <!-- Key Metrics Summary -->
    <MudGrid Class="metrics-section">
        <MudItem xs="12" md="3">
            <MudCard Class="summary-card metric-card" Elevation="0">
                <MudCardContent Class="text-center">
                    <MudText Typo="Typo.h4" Class="metric-amount expense">
                        @_filteredExpense.ToString("C0", CultureInfo.CurrentCulture)
                    </MudText>
                    <MudText Typo="Typo.body2" Class="metric-label">Total Spent</MudText>
                    <div class="metric-comparison">
                        <MudText Typo="Typo.caption" Class="@GetTrendClass(_expenseTrend)">
                            @GetTrendText(_expenseTrend)
                        </MudText>
                        @if (ShowComparison && _previousExpense > 0)
                        {
                            <MudText Typo="Typo.caption" Class="comparison-detail">
                                vs @_previousExpense.ToString("C0") last period
                            </MudText>
                        }
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudCard Class="summary-card metric-card" Elevation="0">
                <MudCardContent Class="text-center">
                    <MudText Typo="Typo.h4" Class="metric-amount income">
                        @_filteredIncome.ToString("C0", CultureInfo.CurrentCulture)
                    </MudText>
                    <MudText Typo="Typo.body2" Class="metric-label">Total Income</MudText>
                    <div class="metric-comparison">
                        <MudText Typo="Typo.caption" Class="@GetTrendClass(_incomeTrend)">
                            @GetIncomeTrendText(_incomeTrend)
                        </MudText>
                        @if (ShowComparison && _previousIncome > 0)
                        {
                            <MudText Typo="Typo.caption" Class="comparison-detail">
                                vs @_previousIncome.ToString("C0") last period
                            </MudText>
                        }
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudCard Class="summary-card metric-card" Elevation="0">
                <MudCardContent Class="text-center">
                    <MudText Typo="Typo.h4" Class="@GetBalanceClass()">
                        @NetBalance.ToString("C0", CultureInfo.CurrentCulture)
                    </MudText>
                    <MudText Typo="Typo.body2" Class="metric-label">Net Balance</MudText>
                    <MudText Typo="Typo.caption">@GetBalanceStatus()</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudCard Class="summary-card metric-card" Elevation="0">
                <MudCardContent Class="text-center">
                    <MudText Typo="Typo.h4" Class="metric-amount">
                        @_highlightTransactions.Count
                    </MudText>
                    <MudText Typo="Typo.body2" Class="metric-label">Transactions</MudText>
                    <MudText Typo="Typo.caption" Class="text-muted">
                        This period
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Charts Section -->
    <MudGrid Class="charts-section">
        <!-- Spending Trends Line Chart -->
        <MudItem xs="12" md="8">
            <MudCard Class="summary-card chart-card" Elevation="0">
                <MudCardContent>
                    <div class="chart-header">
                        <MudText Typo="Typo.h6" Class="chart-title">Spending Trends Over Time</MudText>
                        <MudText Typo="Typo.caption" Class="chart-subtitle">@GetChartPeriodDescription()</MudText>
                    </div>

                    @if (_chartData.Count == 0)
                    {
                        <div class="empty-chart">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Large" Color="Color.Default" />
                            <MudText Typo="Typo.body2" Class="mt-2">No spending data for this period</MudText>
                        </div>
                    }
                    else
                    {
                        <div class="enhanced-line-chart">
                            <MudChart ChartType="ChartType.Line"
                                    ChartSeries="@_lineChartSeries"
                                    @bind-SelectedIndex="selectedIndex"
                                    XAxisLabels="@_xAxisLabels.ToArray()"
                                    Width="100%"
                                    Height="300px"
                                    ChartOptions="@_lineChartOptions">
                            </MudChart>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Category Breakdown Donut Chart -->
        <MudItem xs="12" md="4">
            <MudCard Class="summary-card chart-card" Elevation="0">
                <MudCardContent>
                    <div class="chart-header">
                        <MudText Typo="Typo.h6" Class="chart-title">Spending by Category</MudText>
                        <MudText Typo="Typo.caption" Class="chart-subtitle">Top categories</MudText>
                    </div>

                    @if (_topCategories.Count == 0)
                    {
                        <div class="empty-chart">
                            <MudIcon Icon="@Icons.Material.Filled.PieChart" Size="Size.Large" Color="Color.Default" />
                            <MudText Typo="Typo.body2" Class="mt-2">No categories to display</MudText>
                        </div>
                    }
                    else
                    {
                        <div class="enhanced-donut-chart-container">
                            <!-- MudBlazor Donut Chart -->
                            <div class="donut-chart-section">
                                <MudChart ChartType="ChartType.Donut"
                                        InputData="@GetDonutData().ToArray()"
                                        InputLabels="@GetDonutLabels().ToArray()"
                                        Width="250px"
                                        Height="250px"
                                        ChartOptions="@_donutChartOptions">
                                </MudChart>
                            </div>

                            <!-- Enhanced Category Legend -->
                            <div class="enhanced-category-legend">
                                @foreach (var (category, index) in _topCategories.Take(5).Select((c, i) => (c, i)))
                                {
                                    <div class="enhanced-legend-item">
                                        <div class="legend-color-indicator" style="background-color: @GetCategoryColorHex(index);"></div>
                                        <div class="legend-content">
                                            <div class="legend-main">
                                                <MudText Typo="Typo.subtitle2" Class="legend-category-name">@category.Name</MudText>
                                                <MudText Typo="Typo.body1" Class="legend-amount">@category.Amount.ToString("C0")</MudText>
                                            </div>
                                            <MudText Typo="Typo.caption" Class="legend-percentage">@category.Percentage.ToString("P1") of total</MudText>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Family Member Contributions -->
    <div class="member-contributions-section">
        <div class="section-header">
            <MudText Typo="Typo.h6" Class="section-title">Family Member Spending</MudText>
        </div>

        @if (_memberSummaries.Count == 0)
        {
            <MudCard Class="empty-card" Elevation="0">
                <MudCardContent Class="text-center">
                    <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Large" Color="Color.Default" />
                    <MudText Typo="Typo.h6" Class="mt-2">No member data</MudText>
                    <MudText Typo="Typo.body2" Class="mb-3">No family member spending data for this period</MudText>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <MudCard Class="member-contributions-card" Elevation="0">
                <MudCardContent>
                    <div class="member-contributions-grid">
                        @foreach (var (member, index) in _memberSummaries.Select((m, i) => (m, i)))
                        {
                            <div class="member-contribution-item">
                                <div class="member-header">
                                    <MudAvatar Size="Size.Medium"
                                               Class="member-avatar"
                                               Style="@($"background-color: {GetMemberColorHex(index)};")">
                                        @GetMemberInitial(member.Name)
                                    </MudAvatar>
                                    <div class="member-info">
                                        <MudText Typo="Typo.subtitle1" Class="member-name">@member.Name</MudText>
                                        <MudText Typo="Typo.caption" Class="member-transactions">@member.TransactionCount transactions</MudText>
                                    </div>
                                    <div class="member-amount">
                                        <MudText Typo="Typo.h6" Class="amount-text">@member.TotalAmount.ToString("C0")</MudText>
                                        <MudText Typo="Typo.caption" Class="percentage-text">@member.Percentage.ToString("P1")</MudText>
                                    </div>
                                </div>

                                <div class="member-progress">
                                    <MudProgressLinear Value="@member.Percentage"
                                                     Size="Size.Medium"
                                                     Color="Color.Default"
                                                     Style="@($"--mud-palette-default: {GetMemberColorHex(index)};")" />
                                </div>

                                @if (member.TopCategories.Any())
                                {
                                    <div class="member-top-categories">
                                        <MudText Typo="Typo.caption" Class="categories-label">Top spending:</MudText>
                                        <div class="categories-list">
                                            @foreach (var category in member.TopCategories.Take(3))
                                            {
                                                <MudChip Size="Size.Small"
                                                       Color="Color.Default"
                                                       Variant="Variant.Text"
                                                       Class="category-chip">
                                                    @category.CategoryName (@category.Amount.ToString("C0"))
                                                </MudChip>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </MudCardContent>
            </MudCard>
        }
    </div>
</MudContainer>

@code {
    private string? _error;
    private PeriodType _selectedPeriodType = PeriodType.Monthly;
    private DateTime _currentPeriodStart = DateTime.Today.AddDays(1 - DateTime.Today.Day); // Start of current month
    private List<Transaction> _allTransactions = new();
    private List<Transaction> _highlightTransactions = new();
    private List<CategorySummary> _topCategories = new();
    private List<FamilyMember> _familyUsers = new();
    private List<MemberSummary> _memberSummaries = new();
    private List<ChartDataPoint> _chartData = new();
    private List<ChartSeries> _lineChartSeries = new();
    private List<string> _xAxisLabels = new();
    private int selectedIndex = -1;
    private ChartOptions _lineChartOptions = new();
    private ChartOptions _donutChartOptions = new();
    private bool ShowComparison = false;

    // Filter state
    private string _selectedUserId = string.Empty;

    // Financial data
    private decimal _filteredIncome;
    private decimal _filteredExpense;
    private decimal _previousExpense;
    private decimal _previousIncome;
    private TrendDirection _expenseTrend = TrendDirection.Unchanged;
    private TrendDirection _incomeTrend = TrendDirection.Unchanged;

    // Calculated properties
    private decimal NetBalance => _filteredIncome - _filteredExpense;

    protected override async Task OnInitializedAsync()
    {
        InitializeChartOptions();
        await LoadDataAsync();
        await LoadFamilyUsersAsync();
    }

    private void InitializeChartOptions()
    {
        _lineChartOptions = new ChartOptions
        {
            InterpolationOption = InterpolationOption.NaturalSpline,
            LineStrokeWidth = 3,
            ChartPalette = new string[] { "#000000", "#222222", "#444444", "#666666", "#888888" }
        };

        _donutChartOptions = new ChartOptions
        {
            ChartPalette = new string[] { "#000000", "#222222", "#444444", "#666666", "#888888" }
        };
    }

    private async Task LoadDataAsync()
    {
        try
        {
            _allTransactions = await TxSvc.GetAsync();
            await RefreshInsightsAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error loading insights: {ex.Message}";
        }
    }

    private async Task LoadFamilyUsersAsync()
    {
        try
        {
            _familyUsers = await UserSvc.GetUsersAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error loading family members: {ex.Message}";
        }
    }

    private async Task OnUserChanged(string userId)
    {
        _selectedUserId = userId;
        await RefreshInsightsAsync();
    }

    private void NavigatePrevious()
    {
        _currentPeriodStart = _selectedPeriodType switch
        {
            PeriodType.Daily => _currentPeriodStart.AddDays(-1),
            PeriodType.Weekly => _currentPeriodStart.AddDays(-7),
            PeriodType.Monthly => _currentPeriodStart.AddMonths(-1),
            PeriodType.Yearly => _currentPeriodStart.AddYears(-1),
            _ => _currentPeriodStart.AddMonths(-1)
        };
        _ = RefreshInsightsAsync();
    }

    private void NavigateNext()
    {
        _currentPeriodStart = _selectedPeriodType switch
        {
            PeriodType.Daily => _currentPeriodStart.AddDays(1),
            PeriodType.Weekly => _currentPeriodStart.AddDays(7),
            PeriodType.Monthly => _currentPeriodStart.AddMonths(1),
            PeriodType.Yearly => _currentPeriodStart.AddYears(1),
            _ => _currentPeriodStart.AddMonths(1)
        };
        _ = RefreshInsightsAsync();
    }

    private void SetPeriodType(PeriodType periodType)
    {
        _selectedPeriodType = periodType;

        // Reset to appropriate start date for the period type
        var today = DateTime.Today;
        _currentPeriodStart = periodType switch
        {
            PeriodType.Daily => today,
            PeriodType.Weekly => today.AddDays(-(int)today.DayOfWeek),
            PeriodType.Monthly => new DateTime(today.Year, today.Month, 1),
            PeriodType.Yearly => new DateTime(today.Year, 1, 1),
            _ => new DateTime(today.Year, today.Month, 1)
        };

        _ = RefreshInsightsAsync();
    }

    private string GetCurrentPeriodDisplay() => _selectedPeriodType switch
    {
        PeriodType.Daily => _currentPeriodStart.ToString("MMM dd, yyyy"),
        PeriodType.Weekly => $"Week of {_currentPeriodStart.ToString("MMM dd")}",
        PeriodType.Monthly => _currentPeriodStart.ToString("MMMM yyyy"),
        PeriodType.Yearly => _currentPeriodStart.ToString("yyyy"),
        _ => _currentPeriodStart.ToString("MMMM yyyy")
    };

    private string GetChartPeriodDescription() => _selectedPeriodType switch
    {
        PeriodType.Daily => "Hourly breakdown",
        PeriodType.Weekly => "Daily breakdown",
        PeriodType.Monthly => "Weekly breakdown",
        PeriodType.Yearly => "Monthly breakdown",
        _ => "Period breakdown"
    };

    private Variant GetRangeVariant(PeriodType period) => _selectedPeriodType == period ? Variant.Filled : Variant.Outlined;

    private async Task RefreshInsightsAsync()
    {
        var (start, end) = GetCurrentPeriodRange();
        var (prevStart, prevEnd) = GetPreviousPeriodRange();

        var currentTransactions = FilterTransactions(start, end);
        var previousTransactions = FilterTransactions(prevStart, prevEnd);

        // Apply user filter if selected
        if (!string.IsNullOrEmpty(_selectedUserId))
        {
            var selectedUser = _familyUsers.FirstOrDefault(u => u.Id.ToString() == _selectedUserId);
            if (selectedUser != null)
            {
                currentTransactions = currentTransactions.Where(t => t.User == selectedUser.Name).ToList();
                previousTransactions = previousTransactions.Where(t => t.User == selectedUser.Name).ToList();
            }
        }

        // Calculate summaries
        _filteredIncome = currentTransactions.Where(t => t.IsIncome).Sum(t => t.Amount);
        _filteredExpense = currentTransactions.Where(t => !t.IsIncome).Sum(t => t.Amount);
        _previousExpense = previousTransactions.Where(t => !t.IsIncome).Sum(t => t.Amount);
        _previousIncome = previousTransactions.Where(t => t.IsIncome).Sum(t => t.Amount);

        // Calculate trends
        _expenseTrend = _filteredExpense == _previousExpense ? TrendDirection.Unchanged :
                       _filteredExpense > _previousExpense ? TrendDirection.Up : TrendDirection.Down;
        _incomeTrend = _filteredIncome == _previousIncome ? TrendDirection.Unchanged :
                      _filteredIncome > _previousIncome ? TrendDirection.Up : TrendDirection.Down;

        // Recent transactions
        _highlightTransactions = currentTransactions
            .OrderByDescending(t => t.Date)
            .ThenByDescending(t => t.Id)
            .ToList();

        // Build category and chart data
        BuildCategoryData(currentTransactions);
        BuildMemberSummaryData(currentTransactions);
        BuildChartData(currentTransactions, start, end);
        BuildLineChartSeries(currentTransactions, start, end);

        await Task.CompletedTask;
    }

    private (DateTime Start, DateTime End) GetCurrentPeriodRange()
    {
        return _selectedPeriodType switch
        {
            PeriodType.Daily => (_currentPeriodStart, _currentPeriodStart.AddDays(1).AddTicks(-1)),
            PeriodType.Weekly => (_currentPeriodStart, _currentPeriodStart.AddDays(7).AddTicks(-1)),
            PeriodType.Monthly => (_currentPeriodStart, _currentPeriodStart.AddMonths(1).AddTicks(-1)),
            PeriodType.Yearly => (_currentPeriodStart, _currentPeriodStart.AddYears(1).AddTicks(-1)),
            _ => (_currentPeriodStart, _currentPeriodStart.AddMonths(1).AddTicks(-1))
        };
    }

    private (DateTime Start, DateTime End) GetPreviousPeriodRange()
    {
        return _selectedPeriodType switch
        {
            PeriodType.Daily => (_currentPeriodStart.AddDays(-1), _currentPeriodStart.AddTicks(-1)),
            PeriodType.Weekly => (_currentPeriodStart.AddDays(-7), _currentPeriodStart.AddTicks(-1)),
            PeriodType.Monthly => (_currentPeriodStart.AddMonths(-1), _currentPeriodStart.AddTicks(-1)),
            PeriodType.Yearly => (_currentPeriodStart.AddYears(-1), _currentPeriodStart.AddTicks(-1)),
            _ => (_currentPeriodStart.AddMonths(-1), _currentPeriodStart.AddTicks(-1))
        };
    }

    private List<Transaction> FilterTransactions(DateTime start, DateTime end)
    {
        return _allTransactions.Where(t =>
            t.Date.Date >= start.Date && t.Date.Date <= end.Date).ToList();
    }

    private void BuildCategoryData(List<Transaction> transactions)
    {
        var expenseTransactions = transactions.Where(t => !t.IsIncome).ToList();
        var totalExpenses = expenseTransactions.Sum(t => t.Amount);

        _topCategories = expenseTransactions
            .GroupBy(t => NormalizeCategory(t.Category?.Name))
            .Select(g => new CategorySummary
            {
                Name = g.Key,
                Amount = g.Sum(t => t.Amount),
                TransactionCount = g.Count(),
                Percentage = totalExpenses > 0 ? (double)(g.Sum(t => t.Amount) / totalExpenses) : 0
            })
            .OrderByDescending(c => c.Amount)
            .ToList();
    }

    private string GetCategoryIcon(string category) => category switch
    {
        "Food" => Icons.Material.Filled.Restaurant,
        "Transport" => Icons.Material.Filled.DirectionsCar,
        "Entertainment" => Icons.Material.Filled.Movie,
        "Utilities" => Icons.Material.Filled.Lightbulb,
        "Healthcare" => Icons.Material.Filled.LocalHospital,
        "Education" => Icons.Material.Filled.School,
        "Rent" => Icons.Material.Filled.Home,
        _ => Icons.Material.Filled.Category
    };

    private string GetBalanceClass() => NetBalance >= 0 ? "metric-amount income" : "metric-amount expense";

    private string GetBalanceStatus() => NetBalance >= 0 ? "Positive" : "Deficit";

    private string GetTrendClass(TrendDirection trend) => "text-muted"; // Consistent neutral color for all trends

    private string GetTrendText(TrendDirection trend) => trend switch
    {
        TrendDirection.Up => "↑ Higher than last period",
        TrendDirection.Down => "↓ Lower than last period",
        _ => "→ Same as last period"
    };

    private string GetIncomeTrendText(TrendDirection trend) => trend switch
    {
        TrendDirection.Up => "↑ Higher than last period",
        TrendDirection.Down => "↓ Lower than last period",
        _ => "→ Same as last period"
    };

    private void NavigateToTransaction(int transactionId) => Nav.NavigateTo($"/transactions/{transactionId}");

    private static string NormalizeCategory(string? category)
        => string.IsNullOrWhiteSpace(category) ? "Uncategorized" : category.Trim();

    private static string GetMemberInitial(string? name)
        => string.IsNullOrWhiteSpace(name) ? "?" : name.Trim()[0].ToString().ToUpperInvariant();

    private void BuildMemberSummaryData(List<Transaction> transactions)
    {
        _memberSummaries.Clear();

        if (!transactions.Any())
        {
            return;
        }

        var expenseTransactions = transactions.Where(t => !t.IsIncome && !string.IsNullOrEmpty(t.User)).ToList();
        var totalExpenses = expenseTransactions.Sum(t => t.Amount);

        if (totalExpenses == 0)
        {
            return;
        }

        var memberGroups = expenseTransactions.GroupBy(t => t.User).ToList();

        foreach (var group in memberGroups)
        {
            var memberTransactions = group.ToList();
            var memberTotal = memberTransactions.Sum(t => t.Amount);
            var percentage = (double)(memberTotal / totalExpenses);

            // Get top categories for this member
            var topCategories = memberTransactions
                .Where(t => t.Category != null)
                .GroupBy(t => t.Category!.Name)
                .Select(g => new MemberCategorySummary
                {
                    CategoryName = g.Key,
                    Amount = g.Sum(t => t.Amount),
                    TransactionCount = g.Count()
                })
                .OrderByDescending(c => c.Amount)
                .Take(3)
                .ToList();

            _memberSummaries.Add(new MemberSummary
            {
                Name = group.Key ?? "Unknown",
                TotalAmount = memberTotal,
                TransactionCount = memberTransactions.Count,
                Percentage = percentage,
                TopCategories = topCategories
            });
        }

        _memberSummaries = _memberSummaries.OrderByDescending(m => m.TotalAmount).ToList();
    }

    private string GetMemberColorHex(int index)
    {
        var colors = new[]
        {
            "#000000",
            "#222222",
            "#444444",
            "#666666",
            "#888888",
            "#aaaaaa",
            "#cccccc",
            "#e0e0e0"
        };
        return colors[index % colors.Length];
    }

    // Chart helper methods
    private void BuildChartData(List<Transaction> transactions, DateTime start, DateTime end)
    {
        _chartData.Clear();
        if (!transactions.Any()) return;

        var expenseTransactions = transactions.Where(t => !t.IsIncome).ToList();
        if (!expenseTransactions.Any()) return;

        // Create data points based on period type
        var points = _selectedPeriodType switch
        {
            PeriodType.Daily => BuildDailyChartPoints(expenseTransactions, start),
            PeriodType.Weekly => BuildWeeklyChartPoints(expenseTransactions, start),
            PeriodType.Monthly => BuildMonthlyChartPoints(expenseTransactions, start),
            PeriodType.Yearly => BuildYearlyChartPoints(expenseTransactions, start),
            _ => new List<ChartDataPoint>()
        };

        _chartData = points;
    }

    private List<ChartDataPoint> BuildDailyChartPoints(List<Transaction> transactions, DateTime start)
    {
        var points = new List<ChartDataPoint>();
        for (int hour = 0; hour < 24; hour += 4)
        {
            var hourStart = start.AddHours(hour);
            var hourEnd = hourStart.AddHours(4);
            var amount = transactions.Where(t => t.Date >= hourStart && t.Date < hourEnd).Sum(t => t.Amount);

            points.Add(new ChartDataPoint
            {
                Label = hourStart.ToString("HH:mm"),
                Amount = amount,
                XPosition = (hour / 24.0) * 100,
                YPosition = 0 // Will be calculated after we know max
            });
        }
        CalculateYPositions(points);
        return points;
    }

    private List<ChartDataPoint> BuildWeeklyChartPoints(List<Transaction> transactions, DateTime start)
    {
        var points = new List<ChartDataPoint>();
        for (int day = 0; day < 7; day++)
        {
            var dayStart = start.AddDays(day);
            var dayEnd = dayStart.AddDays(1);
            var amount = transactions.Where(t => t.Date.Date >= dayStart.Date && t.Date.Date < dayEnd.Date).Sum(t => t.Amount);

            points.Add(new ChartDataPoint
            {
                Label = dayStart.ToString("ddd"),
                Amount = amount,
                XPosition = (day / 6.0) * 100,
                YPosition = 0
            });
        }
        CalculateYPositions(points);
        return points;
    }

    private List<ChartDataPoint> BuildMonthlyChartPoints(List<Transaction> transactions, DateTime start)
    {
        var points = new List<ChartDataPoint>();
        var weeksInMonth = 4;
        for (int week = 0; week < weeksInMonth; week++)
        {
            var weekStart = start.AddDays(week * 7);
            var weekEnd = weekStart.AddDays(7);
            var amount = transactions.Where(t => t.Date >= weekStart && t.Date < weekEnd).Sum(t => t.Amount);

            points.Add(new ChartDataPoint
            {
                Label = $"Week {week + 1}",
                Amount = amount,
                XPosition = (week / (weeksInMonth - 1.0)) * 100,
                YPosition = 0
            });
        }
        CalculateYPositions(points);
        return points;
    }

    private List<ChartDataPoint> BuildYearlyChartPoints(List<Transaction> transactions, DateTime start)
    {
        var points = new List<ChartDataPoint>();
        for (int month = 0; month < 12; month++)
        {
            var monthStart = start.AddMonths(month);
            var monthEnd = monthStart.AddMonths(1);
            var amount = transactions.Where(t => t.Date >= monthStart && t.Date < monthEnd).Sum(t => t.Amount);

            points.Add(new ChartDataPoint
            {
                Label = monthStart.ToString("MMM"),
                Amount = amount,
                XPosition = (month / 11.0) * 100,
                YPosition = 0
            });
        }
        CalculateYPositions(points);
        return points;
    }

    private void CalculateYPositions(List<ChartDataPoint> points)
    {
        if (!points.Any()) return;

        var maxAmount = points.Max(p => p.Amount);
        if (maxAmount == 0) return;

        foreach (var point in points)
        {
            point.YPosition = (double)(point.Amount / maxAmount) * 80; // 80% max height
        }
    }

    private double GetLineAngle(ChartDataPoint start, ChartDataPoint end)
    {
        var deltaX = end.XPosition - start.XPosition;
        var deltaY = end.YPosition - start.YPosition;
        return Math.Atan2(deltaY, deltaX) * (180 / Math.PI);
    }

    private Color GetCategoryColor(int index) => Color.Default;

    private string GetCategoryColorHex(int index) => index switch
    {
        0 => "#000000",
        1 => "#333333",
        2 => "#4f4f4f",
        3 => "#7a7a7a",
        4 => "#a5a5a5",
        _ => "#cfcfcf"
    };

    private string GetDonutPosition(int index)
    {
        var rotation = index * 72; // 360/5 for 5 categories
        return $"transform: rotate({rotation}deg);";
    }

    // Enhanced chart data methods for MudBlazor charts
    private void BuildLineChartSeries(List<Transaction> transactions, DateTime start, DateTime end)
    {
        _lineChartSeries.Clear();
        _xAxisLabels.Clear();

        var expenseTransactions = transactions.Where(t => !t.IsIncome).ToList();
        if (!expenseTransactions.Any()) return;

        var chartPoints = _selectedPeriodType switch
        {
            PeriodType.Daily => BuildDailyLineChartPoints(expenseTransactions, start),
            PeriodType.Weekly => BuildWeeklyLineChartPoints(expenseTransactions, start),
            PeriodType.Monthly => BuildMonthlyLineChartPoints(expenseTransactions, start),
            PeriodType.Yearly => BuildYearlyLineChartPoints(expenseTransactions, start),
            _ => new List<(string Label, double Amount)>()
        };

        _xAxisLabels = chartPoints.Select(p => p.Label).ToList();
        var spendingData = chartPoints.Select(p => p.Amount).ToArray();

        _lineChartSeries.Add(new ChartSeries
        {
            Name = "Spending",
            Data = spendingData
        });
    }

    private List<(string Label, double Amount)> BuildDailyLineChartPoints(List<Transaction> transactions, DateTime start)
    {
        var points = new List<(string Label, double Amount)>();
        for (int hour = 0; hour < 24; hour += 4)
        {
            var hourStart = start.AddHours(hour);
            var hourEnd = hourStart.AddHours(4);
            var amount = transactions.Where(t => t.Date >= hourStart && t.Date < hourEnd).Sum(t => t.Amount);
            points.Add((hourStart.ToString("HH:mm"), (double)amount));
        }
        return points;
    }

    private List<(string Label, double Amount)> BuildWeeklyLineChartPoints(List<Transaction> transactions, DateTime start)
    {
        var points = new List<(string Label, double Amount)>();
        for (int day = 0; day < 7; day++)
        {
            var dayStart = start.AddDays(day);
            var dayEnd = dayStart.AddDays(1);
            var amount = transactions.Where(t => t.Date.Date >= dayStart.Date && t.Date.Date < dayEnd.Date).Sum(t => t.Amount);
            points.Add((dayStart.ToString("ddd"), (double)amount));
        }
        return points;
    }

    private List<(string Label, double Amount)> BuildMonthlyLineChartPoints(List<Transaction> transactions, DateTime start)
    {
        var points = new List<(string Label, double Amount)>();
        var weeksInMonth = 4;
        for (int week = 0; week < weeksInMonth; week++)
        {
            var weekStart = start.AddDays(week * 7);
            var weekEnd = weekStart.AddDays(7);
            var amount = transactions.Where(t => t.Date >= weekStart && t.Date < weekEnd).Sum(t => t.Amount);
            points.Add(($"Week {week + 1}", (double)amount));
        }
        return points;
    }

    private List<(string Label, double Amount)> BuildYearlyLineChartPoints(List<Transaction> transactions, DateTime start)
    {
        var points = new List<(string Label, double Amount)>();
        for (int month = 0; month < 12; month++)
        {
            var monthStart = start.AddMonths(month);
            var monthEnd = monthStart.AddMonths(1);
            var amount = transactions.Where(t => t.Date >= monthStart && t.Date < monthEnd).Sum(t => t.Amount);
            points.Add((monthStart.ToString("MMM"), (double)amount));
        }
        return points;
    }

    private List<double> GetDonutData()
    {
        return _topCategories.Take(5).Select(c => (double)c.Amount).ToList();
    }

    private List<string> GetDonutLabels()
    {
        return _topCategories.Take(5).Select(c => c.Name).ToList();
    }

    private bool IsNextPeriodInFuture()
    {
        var nextPeriodStart = _selectedPeriodType switch
        {
            PeriodType.Daily => _currentPeriodStart.AddDays(1),
            PeriodType.Weekly => _currentPeriodStart.AddDays(7),
            PeriodType.Monthly => _currentPeriodStart.AddMonths(1),
            PeriodType.Yearly => _currentPeriodStart.AddYears(1),
            _ => _currentPeriodStart.AddMonths(1)
        };
        return nextPeriodStart > DateTime.Today;
    }

    private void SetToCurrentPeriod()
    {
        var today = DateTime.Today;
        _currentPeriodStart = _selectedPeriodType switch
        {
            PeriodType.Daily => today,
            PeriodType.Weekly => today.AddDays(-(int)today.DayOfWeek),
            PeriodType.Monthly => new DateTime(today.Year, today.Month, 1),
            PeriodType.Yearly => new DateTime(today.Year, 1, 1),
            _ => new DateTime(today.Year, today.Month, 1)
        };
        _ = RefreshInsightsAsync();
    }

    // Data models
    public class CategorySummary
    {
        public string Name { get; set; } = "";
        public decimal Amount { get; set; }
        public int TransactionCount { get; set; }
        public double Percentage { get; set; }
    }

    public enum PeriodType
    {
        Daily,
        Weekly,
        Monthly,
        Yearly
    }

    public enum TrendDirection
    {
        Up,
        Down,
        Unchanged
    }

    public class ChartDataPoint
    {
        public string Label { get; set; } = "";
        public decimal Amount { get; set; }
        public double XPosition { get; set; }
        public double YPosition { get; set; }
    }

    public class MemberSummary
    {
        public string Name { get; set; } = "";
        public decimal TotalAmount { get; set; }
        public int TransactionCount { get; set; }
        public double Percentage { get; set; }
        public List<MemberCategorySummary> TopCategories { get; set; } = new();
    }

    public class MemberCategorySummary
    {
        public string CategoryName { get; set; } = "";
        public decimal Amount { get; set; }
        public int TransactionCount { get; set; }
    }
}

<style>
/* Use Home Page Styling */
.home-container {
    padding: 24px;
    background: #FFFFFF;
    min-height: 100vh;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
}

/* Universal Card Classes from Home Page */
.summary-card, .transactions-card, .empty-card, .chart-card {
    background: #FFFFFF;
    border: 1px solid rgba(0, 0, 0, 0.08);
    border-radius: 20px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.06);
    transition: all 0.25s ease;
}

.summary-card:hover, .chart-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
}

/* Section Headers */
.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.section-header h4, .section-header h6 {
    color: #000000;
    font-weight: 600;
    font-family: 'Inter', sans-serif;
}

.header-title {
    color: #000000;
    font-weight: 700;
    font-family: 'Inter', sans-serif;
    margin-bottom: 32px;
}

/* Filter Controls */
.filter-controls {
    margin-bottom: 32px;
}

.filter-label {
    color: #000000;
    font-weight: 600;
    font-family: 'Inter', sans-serif;
    margin-bottom: 12px;
}

.filter-grid {
    align-items: stretch;
}

.filter-grid .mud-item {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.time-segmented {
    width: 100%;
    border-radius: 12px;
}

.time-segmented .mud-button-root {
    border-radius: 12px;
    font-weight: 500;
}

.time-segmented .mud-button-filled {
    background-color: #000000;
    color: #ffffff;
}

.time-segmented .mud-button-outlined {
    border: 1px solid rgba(0, 0, 0, 0.2);
    color: #000000;
}

.user-filter {
    max-width: 320px;
}

.period-navigation {
    display: flex;
    align-items: center;
    gap: 16px;
}

.current-period {
    min-width: 200px;
    text-align: center;
    color: #000000;
    font-weight: 600;
    font-family: 'Inter', sans-serif;
}

.quick-actions {
    flex-wrap: wrap;
}

.quick-actions .quick-action-button {
    flex: 1 1 auto;
}

@@media (max-width: 960px) {
    .filter-grid .mud-item {
        gap: 8px;
    }

    .quick-actions {
        flex-direction: column;
        align-items: stretch;
    }

    .quick-actions .quick-action-button {
        width: 100%;
    }
}

/* Metrics Section */
.metrics-section {
    margin-bottom: 32px;
}

.metric-card {
    text-align: center;
}

.metric-amount {
    font-weight: 700;
    font-family: 'Inter', sans-serif;
    font-size: 2rem;
    margin-bottom: 8px;
}

.metric-amount.income {
    color: #000000;
}

.metric-amount.expense {
    color: #000000;
}

.metric-label {
    color: rgba(0, 0, 0, 0.8);
    font-family: 'Inter', sans-serif;
    font-weight: 500;
    margin-bottom: 4px;
}

/* Charts Section */
.charts-section {
    margin-bottom: 32px;
}

.chart-header {
    margin-bottom: 24px;
}

.chart-title {
    color: #000000;
    font-weight: 600;
    font-family: 'Inter', sans-serif;
    margin-bottom: 4px;
}

.chart-subtitle {
    color: rgba(0, 0, 0, 0.6);
    font-family: 'Inter', sans-serif;
}

/* Line Chart */
.line-chart {
    position: relative;
    height: 200px;
    background: #F8F9FA;
    border: 1px solid rgba(0, 0, 0, 0.05);
    border-radius: 12px;
    margin: 16px 0;
}

.chart-point {
    position: absolute;
    width: 8px;
    height: 8px;
    background: #000000;
    border-radius: 50%;
    cursor: pointer;
    transform: translate(-50%, 50%);
}

.chart-point:hover .point-tooltip {
    opacity: 1;
    visibility: visible;
}

.point-tooltip {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
}

.tooltip-content {
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 8px 12px;
    border-radius: 8px;
    text-align: center;
    white-space: nowrap;
}

.chart-line {
    position: absolute;
    height: 2px;
    background: #2f2f2f;
    transform-origin: left center;
}

.empty-chart {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 150px;
    color: rgba(0, 0, 0, 0.6);
}

/* Donut Chart */
.donut-chart-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 24px;
}

.donut-chart-wrapper {
    position: relative;
    width: 160px;
    height: 160px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.category-donut {
    position: absolute;
    width: 140px !important;
    height: 140px !important;
}

.donut-center {
    position: absolute;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
}

.donut-total {
    color: #000000;
    font-weight: 700;
    font-family: 'Inter', sans-serif;
}

.category-legend {
    display: flex;
    flex-direction: column;
    gap: 12px;
    width: 100%;
}

.legend-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 8px;
    background: #F8F9FA;
    border: 1px solid rgba(0, 0, 0, 0.05);
    border-radius: 8px;
}

.legend-color {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    flex-shrink: 0;
}

.legend-details {
    flex: 1;
}

/* Transactions Section */
.transactions-section {
    margin-bottom: 32px;
}

.transaction-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 0;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.transaction-item:hover {
    background-color: #F8F9FA;
    border-radius: 8px;
    margin: 0 -16px;
    padding: 16px;
}

.transaction-info {
    flex: 1;
}

.transaction-meta {
    color: rgba(0, 0, 0, 0.6);
    font-family: 'Inter', sans-serif;
}

.transaction-amount {
    color: #000000;
    font-weight: 700;
    font-family: 'Inter', sans-serif;
}

/* Utility Classes */
.text-success {
    color: #000000 !important;
}

.text-error {
    color: #000000 !important;
}

.text-muted {
    color: rgba(0, 0, 0, 0.6) !important;
}

/* Enhanced Responsive Design */
@@media (max-width: 767px) {
    .home-container {
        padding: 16px;
    }

    .time-segmented {
        width: 100%;
    }

    .time-segmented .mud-button-root {
        flex: 1 1 auto;
    }

    .current-period {
        min-width: 150px;
        font-size: 0.875rem;
    }

    .metric-amount {
        font-size: 1.5rem;
    }

    .charts-section .mud-item {
        margin-bottom: 16px;
    }

    .enhanced-donut-chart-container {
        gap: 16px;
        padding: 12px;
    }

    .enhanced-legend-item {
        padding: 12px;
        gap: 12px;
    }

    .legend-main {
        flex-direction: column;
        align-items: flex-start;
        gap: 4px;
    }

    .transaction-item {
        padding: 12px 0;
    }

    .enhanced-line-chart {
        min-height: 250px;
        padding: 12px;
    }
}

@@media (max-width: 480px) {
    .period-navigation {
        gap: 8px;
    }

    .current-period {
        min-width: 120px;
        font-size: 0.8rem;
    }

    .enhanced-donut-chart-container {
        padding: 8px;
    }

    .donut-chart-section {
        margin-bottom: 12px;
    }

    .enhanced-legend-item {
        padding: 10px;
        gap: 10px;
    }

    .legend-color-indicator {
        width: 16px;
        height: 16px;
    }

    .enhanced-line-chart {
        min-height: 200px;
        padding: 8px;
    }

    .quick-actions {
        flex-direction: column;
    }

    .quick-action-button {
        width: 100%;
        justify-content: center;
    }
}

/* Quick Actions */
.quick-actions {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
}

.quick-action-button {
    border-radius: 8px;
    font-weight: 500;
    color: #000000;
    border: 1px solid rgba(0, 0, 0, 0.2);
}

.quick-action-button:hover {
    background-color: #F8F9FA;
}

/* Metric Comparisons */
.metric-comparison {
    display: flex;
    flex-direction: column;
    gap: 2px;
}

.comparison-detail {
    color: rgba(0, 0, 0, 0.5) !important;
    font-size: 0.75rem;
}

/* Member Contributions Section */
.member-contributions-section {
    margin-bottom: 32px;
}

.member-contributions-card {
    background: #FFFFFF;
    border: 1px solid rgba(0, 0, 0, 0.08);
    border-radius: 20px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.06);
}

.member-contributions-grid {
    display: grid;
    gap: 24px;
}

.member-contribution-item {
    padding: 20px;
    background: #FAFAFA;
    border: 1px solid rgba(0, 0, 0, 0.05);
    border-radius: 16px;
    transition: all 0.2s ease;
}

.member-contribution-item:hover {
    background: #F5F5F5;
    border-color: rgba(0, 0, 0, 0.1);
}

.member-header {
    display: flex;
    align-items: center;
    gap: 16px;
    margin-bottom: 16px;
}

.member-avatar {
    font-weight: 600;
    color: #ffffff;
}

.member-info {
    flex: 1;
}

.member-name {
    color: #000000;
    font-weight: 600;
    margin: 0 !important;
}

.member-transactions {
    color: rgba(0, 0, 0, 0.6);
    margin: 4px 0 0 0 !important;
}

.member-amount {
    text-align: right;
}

.amount-text {
    color: #000000;
    font-weight: 700;
    margin: 0 !important;
}

.percentage-text {
    color: rgba(0, 0, 0, 0.6);
    margin: 4px 0 0 0 !important;
}

.member-progress {
    margin-bottom: 16px;
}

.member-top-categories {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.categories-label {
    color: rgba(0, 0, 0, 0.7);
    font-weight: 600;
    margin: 0 !important;
}

.categories-list {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
}

.category-chip {
    background-color: rgba(0, 0, 0, 0.05) !important;
    color: rgba(0, 0, 0, 0.8) !important;
    border: 1px solid rgba(0, 0, 0, 0.1) !important;
    font-size: 0.75rem !important;
}

@@media (max-width: 767px) {
    .member-header {
        flex-direction: column;
        text-align: center;
        gap: 12px;
    }

    .member-info, .member-amount {
        text-align: center;
    }

    .member-contributions-grid {
        gap: 16px;
    }

    .member-contribution-item {
        padding: 16px;
    }
}
</style>
