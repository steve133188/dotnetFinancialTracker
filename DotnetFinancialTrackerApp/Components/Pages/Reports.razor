@page "/reports"
@using System.Globalization
@using DotnetFinancialTrackerApp.Models
@using MudBlazor
@inject DotnetFinancialTrackerApp.Services.ITransactionsService TxSvc
@inject DotnetFinancialTrackerApp.Services.IBudgetsService BudgetSvc
@inject NavigationManager Nav

<PageTitle>Insights - Family Tracker</PageTitle>

<MudContainer Class="insights-container" MaxWidth="MaxWidth.False">
    @if (!string.IsNullOrEmpty(_error))
    {
        <MudAlert Severity="Severity.Warning" Class="mb-3" ShowCloseIcon="true" CloseIconClicked="@(() => _error = string.Empty)">
            @_error
        </MudAlert>
    }

    <!-- Header Section -->
    <div class="insights-header">
        <div class="header-content">
            <MudIcon Icon="@Icons.Material.Filled.Analytics" Size="Size.Large" Class="header-icon" />
            <div class="header-text">
                <MudText Typo="Typo.h4" Class="header-title">Family Insights</MudText>
                <MudText Typo="Typo.body1" Class="header-subtitle">Simple period data and spending patterns</MudText>
            </div>
        </div>
        <div class="header-actions">
            <MudButton Variant="Variant.Outlined" Color="Color.Default" Elevation="0" StartIcon="@Icons.Material.Filled.FileDownload" OnClick="@ExportData" Style="border-color: black; color: black;">
                Export Data
            </MudButton>
        </div>
    </div>

    <!-- Quick Period Selection -->
    <div class="period-selector">
        <MudButtonGroup Variant="Variant.Outlined" Color="Color.Default" Style="border-color: black; color: black;">
            @foreach (var period in Enum.GetValues<InsightPeriod>())
            {
                <MudButton Variant="@(_selectedPeriod == period ? Variant.Filled : Variant.Outlined)"
                          Elevation="0"
                          OnClick="@(() => SelectPeriod(period))">
                    @GetPeriodLabel(period)
                </MudButton>
            }
        </MudButtonGroup>
    </div>

    <!-- Period Summary Cards -->
    <MudGrid Class="summary-grid">
        <MudItem xs="12" md="3">
            <MudCard Class="summary-card income-card" Elevation="0">
                <MudCardContent>
                    <div class="card-header">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" />
                        <MudText Typo="Typo.subtitle1">Income</MudText>
                    </div>
                    <MudText Typo="Typo.h4" Class="card-amount income">@_filteredIncome.ToString("C", CultureInfo.CurrentCulture)</MudText>
                    <div class="card-comparison">
                        <MudChip Color="@(DeltaColor(_filteredIncome, _previousIncome))"
                                Variant="Variant.Outlined"
                                Size="Size.Small">
                            @FormatDelta(_filteredIncome, _previousIncome)
                        </MudChip>
                        <MudText Typo="Typo.caption">vs previous period</MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudCard Class="summary-card expense-card" Elevation="0">
                <MudCardContent>
                    <div class="card-header">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingDown" Color="Color.Error" />
                        <MudText Typo="Typo.subtitle1">Spending</MudText>
                    </div>
                    <MudText Typo="Typo.h4" Class="card-amount expense">@_filteredExpense.ToString("C", CultureInfo.CurrentCulture)</MudText>
                    <div class="card-comparison">
                        <MudChip Color="@(DeltaColorReverse(_filteredExpense, _previousExpense))"
                                Variant="Variant.Outlined"
                                Size="Size.Small">
                            @FormatDelta(_filteredExpense, _previousExpense)
                        </MudChip>
                        <MudText Typo="Typo.caption">vs previous period</MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudCard Class="summary-card balance-card" Elevation="0">
                <MudCardContent>
                    <div class="card-header">
                        <MudIcon Icon="@Icons.Material.Filled.AccountBalanceWallet" Color="@(NetBalance >= 0 ? Color.Success : Color.Error)" />
                        <MudText Typo="Typo.subtitle1">Net Balance</MudText>
                    </div>
                    <MudText Typo="Typo.h4" Class="@NetBalanceClass">@NetBalance.ToString("C", CultureInfo.CurrentCulture)</MudText>
                    <div class="card-comparison">
                        <MudChip Color="@(DeltaColor(NetBalance, PreviousNetBalance))"
                                Variant="Variant.Outlined"
                                Size="Size.Small">
                            @FormatDelta(NetBalance, PreviousNetBalance)
                        </MudChip>
                        <MudText Typo="Typo.caption">vs previous period</MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudCard Class="summary-card transactions-card" Elevation="0">
                <MudCardContent>
                    <div class="card-header">
                        <MudIcon Icon="@Icons.Material.Filled.Receipt" Color="Color.Default" Style="color: black;" />
                        <MudText Typo="Typo.subtitle1">Transactions</MudText>
                    </div>
                    <MudText Typo="Typo.h4" Class="card-amount">@_currentTransactionCount</MudText>
                    <div class="card-comparison">
                        <MudChip Color="@(DeltaColor(_currentTransactionCount, _previousTransactionCount))"
                                Variant="Variant.Outlined"
                                Size="Size.Small">
                            @FormatDelta(_currentTransactionCount, _previousTransactionCount)
                        </MudChip>
                        <MudText Typo="Typo.caption">vs previous period</MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Simple Charts Section -->
    <div class="charts-section">
        <MudGrid>
            <!-- Spending by Category -->
            <MudItem xs="12" md="6">
                <MudCard Class="chart-card" Elevation="0">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudIcon Icon="@Icons.Material.Filled.PieChart" Class="mr-2" Color="Color.Default" Style="color: black;" />
                            <MudText Typo="Typo.h6">Spending by Category</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (_donutSeries.Count == 0)
                        {
                            <div class="empty-chart">
                                <MudIcon Icon="@Icons.Material.Filled.DonutLarge" Size="Size.Large" Color="Color.Secondary" />
                                <MudText Typo="Typo.body2">No spending data for this period</MudText>
                            </div>
                        }
                        else
                        {
                            <MudChart ChartType="ChartType.Donut"
                                     Labels="@_donutLabels"
                                     ChartSeries="@_donutSeries"
                                     Class="period-chart" />
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Income vs Spending -->
            <MudItem xs="12" md="6">
                <MudCard Class="chart-card" Elevation="0">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="mr-2" Color="Color.Success" />
                            <MudText Typo="Typo.h6">Income vs Spending</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudChart ChartType="ChartType.Bar"
                                 Labels="@_stackLabels"
                                 ChartSeries="@_stackSeries"
                                 Class="period-chart" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </div>

    <!-- Top Categories -->
    <div class="categories-section">
        <div class="section-header">
            <MudText Typo="Typo.h6" Class="section-title">Top Spending Categories</MudText>
            <MudText Typo="Typo.caption" Class="section-meta">@GetPeriodLabel(_selectedPeriod)</MudText>
        </div>

        @if (_topCategories.Count == 0)
        {
            <MudCard Class="empty-categories-card" Elevation="0">
                <MudCardContent Class="text-center">
                    <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Large" Color="Color.Secondary" />
                    <MudText Typo="Typo.h6" Class="mt-2">No spending data</MudText>
                    <MudText Typo="Typo.body2">There are no expenses in this period</MudText>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <MudGrid>
                @foreach (var category in _topCategories.Take(6))
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Class="category-card" Elevation="0">
                            <MudCardContent>
                                <div class="category-header">
                                    <MudIcon Icon="@GetCategoryIcon(category.Name)" Color="Color.Default" Style="color: black;" />
                                    <MudText Typo="Typo.subtitle1" Class="category-name">@category.Name</MudText>
                                </div>
                                <MudText Typo="Typo.h5" Class="category-amount">@category.Amount.ToString("C", CultureInfo.CurrentCulture)</MudText>
                                <div class="category-details">
                                    <MudText Typo="Typo.caption">@category.TransactionCount transactions</MudText>
                                    <MudText Typo="Typo.caption">@category.Percentage.ToString("P1") of total</MudText>
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    </div>

    <!-- Recent Activity Summary -->
    <div class="activity-section">
        <div class="section-header">
            <MudText Typo="Typo.h6" Class="section-title">Recent Activity</MudText>
            <MudButton Variant="Variant.Text" Color="Color.Default" Elevation="0" Size="Size.Small" OnClick="@NavigateToFinance" Style="color: black;">
                View All
            </MudButton>
        </div>

        <MudCard Class="activity-card" Elevation="0">
            <MudCardContent>
                @if (_highlightTransactions.Count == 0)
                {
                    <div class="empty-activity">
                        <MudIcon Icon="@Icons.Material.Filled.Receipt" Size="Size.Large" Color="Color.Secondary" />
                        <MudText Typo="Typo.body2">No transactions in this period</MudText>
                    </div>
                }
                else
                {
                    <MudSimpleTable Striped="true" Hover="true">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Description</th>
                                <th>Category</th>
                                <th style="text-align: right;">Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var tx in _highlightTransactions.Take(8))
                            {
                                <tr>
                                    <td>@tx.Date.ToString("MMM dd", CultureInfo.CurrentCulture)</td>
                                    <td>@(tx.Description ?? DisplayCategory(tx.Category))</td>
                                    <td>
                                        <MudChip T="string" Text="@DisplayCategory(tx.Category)" Size="Size.Small" Variant="Variant.Outlined" />
                                    </td>
                                    <td style="text-align: right;">
                                        <MudText Typo="Typo.subtitle2" Class="@(tx.IsIncome ? "income-amount" : "expense-amount")">
                                            @((tx.IsIncome ? "+" : "-") + tx.Amount.ToString("C", CultureInfo.CurrentCulture))
                                        </MudText>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                }
            </MudCardContent>
        </MudCard>
    </div>
</MudContainer>

@code {
    private string? _error;
    private InsightPeriod _selectedPeriod = InsightPeriod.ThisMonth;
    private List<Transaction> _allTransactions = new();
    private List<Transaction> _highlightTransactions = new();
    private List<CategorySummary> _topCategories = new();

    // Financial data
    private decimal _filteredIncome;
    private decimal _filteredExpense;
    private decimal _previousIncome;
    private decimal _previousExpense;
    private int _currentTransactionCount;
    private int _previousTransactionCount;

    // Chart data
    private string[] _donutLabels = Array.Empty<string>();
    private List<ChartSeries> _donutSeries = new();
    private string[] _stackLabels = Array.Empty<string>();
    private List<ChartSeries> _stackSeries = new();

    // Calculated properties
    private decimal NetBalance => _filteredIncome - _filteredExpense;
    private decimal PreviousNetBalance => _previousIncome - _previousExpense;
    private string NetBalanceClass => NetBalance >= 0 ? "card-amount income" : "card-amount expense";
    private void NavigateToFinance() => Nav.NavigateTo("/finance");

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            _allTransactions = await TxSvc.GetAsync();
            await RefreshInsightsAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error loading insights: {ex.Message}";
        }
    }

    private async Task SelectPeriod(InsightPeriod period)
    {
        _selectedPeriod = period;
        await RefreshInsightsAsync();
    }

    private async Task RefreshInsightsAsync()
    {
        var (start, end) = GetPeriodRange(_selectedPeriod);
        var previousRange = GetPreviousPeriodRange(start, end);

        var currentTransactions = FilterTransactions(start, end);
        var previousTransactions = FilterTransactions(previousRange.Start, previousRange.End);

        // Calculate summaries
        _filteredIncome = currentTransactions.Where(t => t.IsIncome).Sum(t => t.Amount);
        _filteredExpense = currentTransactions.Where(t => !t.IsIncome).Sum(t => t.Amount);
        _previousIncome = previousTransactions.Where(t => t.IsIncome).Sum(t => t.Amount);
        _previousExpense = previousTransactions.Where(t => !t.IsIncome).Sum(t => t.Amount);
        _currentTransactionCount = currentTransactions.Count;
        _previousTransactionCount = previousTransactions.Count;

        // Recent transactions
        _highlightTransactions = currentTransactions
            .OrderByDescending(t => t.Date)
            .ThenByDescending(t => t.Id)
            .ToList();

        // Build charts and categories
        BuildCategoryData(currentTransactions);
        BuildChartData();

        await Task.CompletedTask;
    }

    private List<Transaction> FilterTransactions(DateTime start, DateTime end)
    {
        return _allTransactions.Where(t =>
            t.Date.Date >= start.Date && t.Date.Date <= end.Date).ToList();
    }

    private void BuildCategoryData(List<Transaction> transactions)
    {
        var expenseTransactions = transactions.Where(t => !t.IsIncome).ToList();
        var totalExpenses = expenseTransactions.Sum(t => t.Amount);

        _topCategories = expenseTransactions
            .GroupBy(t => NormalizeCategory(t.Category))
            .Select(g => new CategorySummary
            {
                Name = g.Key,
                Amount = g.Sum(t => t.Amount),
                TransactionCount = g.Count(),
                Percentage = totalExpenses > 0 ? (double)(g.Sum(t => t.Amount) / totalExpenses) : 0
            })
            .OrderByDescending(c => c.Amount)
            .ToList();

        // Build donut chart data
        if (_topCategories.Any())
        {
            _donutLabels = _topCategories.Take(6).Select(c => c.Name).ToArray();
            _donutSeries = new()
            {
                new ChartSeries
                {
                    Name = "Spending",
                    Data = _topCategories.Take(6).Select(c => (double)c.Amount).ToArray()
                }
            };
        }
        else
        {
            _donutLabels = Array.Empty<string>();
            _donutSeries = new();
        }
    }

    private void BuildChartData()
    {
        _stackLabels = new[] { "Current Period", "Previous Period" };
        _stackSeries = new()
        {
            new ChartSeries
            {
                Name = "Income",
                Data = new[] { (double)_filteredIncome, (double)_previousIncome }
            },
            new ChartSeries
            {
                Name = "Spending",
                Data = new[] { (double)_filteredExpense, (double)_previousExpense }
            }
        };
    }

    private async Task ExportData()
    {
        // Implement data export functionality
        await Task.CompletedTask;
    }

    private string GetCategoryIcon(string category) => category switch
    {
        "Groceries" => Icons.Material.Filled.LocalGroceryStore,
        "Transportation" => Icons.Material.Filled.DirectionsCar,
        "Entertainment" => Icons.Material.Filled.Movie,
        "Utilities" => Icons.Material.Filled.Lightbulb,
        "Healthcare" => Icons.Material.Filled.LocalHospital,
        "Education" => Icons.Material.Filled.School,
        _ => Icons.Material.Filled.Category
    };

    private (DateTime Start, DateTime End) GetPeriodRange(InsightPeriod period)
    {
        var today = DateTime.Today;
        return period switch
        {
            InsightPeriod.LastMonth =>
                (new DateTime(today.Year, today.Month, 1).AddMonths(-1),
                 new DateTime(today.Year, today.Month, 1).AddTicks(-1)),
            InsightPeriod.Last90Days =>
                (today.AddDays(-89), today),
            InsightPeriod.YearToDate =>
                (new DateTime(today.Year, 1, 1), today),
            _ =>
                (new DateTime(today.Year, today.Month, 1),
                 new DateTime(today.Year, today.Month, 1).AddMonths(1).AddTicks(-1))
        };
    }

    private (DateTime Start, DateTime End) GetPreviousPeriodRange(DateTime currentStart, DateTime currentEnd)
    {
        var totalDays = (currentEnd.Date - currentStart.Date).TotalDays + 1;
        var previousEnd = currentStart.AddDays(-1);
        var previousStart = previousEnd.AddDays(-totalDays + 1);
        return (previousStart, previousEnd);
    }

    private static string NormalizeCategory(string? category)
        => string.IsNullOrWhiteSpace(category) ? "Uncategorized" : category.Trim();

    private static string DisplayCategory(string category) => string.IsNullOrWhiteSpace(category) ? "Uncategorized" : category;

    private static string GetPeriodLabel(InsightPeriod period) => period switch
    {
        InsightPeriod.ThisMonth => "This month",
        InsightPeriod.LastMonth => "Last month",
        InsightPeriod.Last90Days => "Last 90 days",
        InsightPeriod.YearToDate => "Year to date",
        _ => "This month"
    };

    private static Color DeltaColor(decimal current, decimal previous)
    {
        if (current == previous) return Color.Default;
        return current >= previous ? Color.Success : Color.Error;
    }

    private static Color DeltaColor(int current, int previous)
        => current == previous ? Color.Default : (current >= previous ? Color.Success : Color.Error);

    private static Color DeltaColorReverse(decimal current, decimal previous)
    {
        if (current == previous) return Color.Default;
        return current <= previous ? Color.Success : Color.Error;
    }

    private static string FormatDelta(decimal current, decimal previous)
    {
        if (previous == 0 && current == 0) return "0";
        if (previous == 0) return $"+{current.ToString("C0", CultureInfo.CurrentCulture)}";
        var delta = current - previous;
        return delta >= 0 ? $"+{delta.ToString("C0", CultureInfo.CurrentCulture)}" : delta.ToString("C0", CultureInfo.CurrentCulture);
    }

    private static string FormatDelta(int current, int previous)
    {
        if (previous == 0 && current == 0) return "0";
        if (previous == 0) return $"+{current}";
        var delta = current - previous;
        return delta >= 0 ? $"+{delta}" : delta.ToString();
    }

    // Data models
    public class CategorySummary
    {
        public string Name { get; set; } = "";
        public decimal Amount { get; set; }
        public int TransactionCount { get; set; }
        public double Percentage { get; set; }
    }

    private enum InsightPeriod
    {
        ThisMonth,
        LastMonth,
        Last90Days,
        YearToDate
    }
}

<style>
.insights-container {
    padding: 24px;
    background: #FFFFFF;
    min-height: 100vh;
}

.insights-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 32px;
    padding: 24px 32px;
    background: linear-gradient(135deg, rgba(33, 150, 243, 0.15) 0%, rgba(255, 255, 255, 0.95) 100%);
    border: 1px solid rgba(33, 150, 243, 0.2);
    border-radius: 24px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
}

.header-content {
    display: flex;
    align-items: center;
    gap: 16px;
}

.header-icon {
    color: #2196F3;
}

.header-title {
    color: #000000;
    font-weight: 700;
    margin: 0;
}

.header-subtitle {
    color: rgba(0, 0, 0, 0.7);
    margin: 0;
}

.period-selector {
    display: flex;
    justify-content: center;
    margin-bottom: 32px;
}

.summary-grid {
    margin-bottom: 32px;
}

.summary-card, .chart-card, .category-card, .activity-card, .empty-categories-card {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(33, 150, 243, 0.2);
    border-radius: 20px;
    transition: all 0.25s ease;
}

.summary-card:hover, .category-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
}

.card-header {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 16px;
}

.card-amount {
    font-weight: 700;
    margin-bottom: 8px;
}

.card-amount.income {
    color: #4CAF50;
}

.card-amount.expense {
    color: #F44336;
}

.card-comparison {
    display: flex;
    align-items: center;
    gap: 8px;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.section-title {
    color: #000000;
    font-weight: 600;
    margin: 0;
}

.section-meta {
    color: rgba(0, 0, 0, 0.6);
}

.charts-section, .categories-section, .activity-section {
    margin-bottom: 32px;
}

.empty-chart, .empty-activity {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 48px 24px;
    text-align: center;
}

.period-chart {
    min-height: 300px;
}

.category-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 16px;
}

.category-name {
    color: #000000;
    font-weight: 600;
}

.category-amount {
    color: #2196F3;
    font-weight: 700;
    margin-bottom: 12px;
}

.category-details {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.income-amount {
    color: #4CAF50;
    font-weight: 600;
}

.expense-amount {
    color: #F44336;
    font-weight: 600;
}

@@media (max-width: 767px) {
    .insights-container {
        padding: 16px;
    }

    .insights-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
        padding: 20px;
    }

    .period-selector {
        overflow-x: auto;
        padding-bottom: 8px;
    }

    .period-selector .mud-button-group {
        min-width: max-content;
    }

    .card-comparison {
        flex-direction: column;
        gap: 4px;
        align-items: flex-start;
    }
}
</style>
