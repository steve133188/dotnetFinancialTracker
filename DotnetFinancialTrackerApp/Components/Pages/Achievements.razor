@page "/achievements"
@inject DotnetFinancialTrackerApp.Services.IGamificationService Game

<MudContainer Class="pa-4">
    <MudStack Spacing="3">
        <MudPaper Class="pa-4 glass-card" Elevation="0">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <div>
                    <MudText Typo="Typo.h5">Progress</MudText>
                    <MudText Typo="Typo.caption" Class="text-muted">Keep logging and stay on budget</MudText>
                </div>
                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                    <MudChip Color="Color.Default" Variant="Variant.Filled" Class="fw-600" Style="background-color: black; color: white;">@_summary.Points pts</MudChip>
                    <MudChip Variant="Variant.Outlined">@_summary.Streak d streak</MudChip>
                </MudStack>
            </MudStack>

            <MudStack Row="true" Spacing="4" Class="mt-4">
                <MudProgressCircular Class="ma-2" Size="Size.Large" StrokeWidth="8" Value="@(_summary.UsagePercent ?? 0)" Color="Color.Default" Style="color: black;" />
                <MudStack>
                    <MudText Typo="Typo.subtitle2">Month Spend</MudText>
                    <MudText Typo="Typo.h6">@_summary.SpentThisMonth.ToString("C")</MudText>
                    @if (_summary.BudgetLimit is not null)
                    {
                        <MudText Typo="Typo.caption" Class="text-muted">of @_summary.BudgetLimit?.ToString("C")</MudText>
                    }
                </MudStack>
            </MudStack>
        </MudPaper>

        <MudCard Class="glass-card">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Achievements</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (_achievements.Count == 0)
                {
                    <MudText Typo="Typo.body2">No achievements yet â€” start logging to earn points.</MudText>
                }
                else
                {
                    <MudList Dense="true">
                        @foreach (var a in _achievements)
                        {
                            <MudListItem>
                                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Style="width:100%">
                                    <div>
                                        <div class="fw-600">@a.Title <MudChip Size="Size.Small" Color="Color.Default" Class="ms-2" Style="background-color: black; color: white;">+@a.Points</MudChip></div>
                                        <div class="text-muted">@a.Description</div>
                                    </div>
                                    <small>@a.AchievedAt.ToLocalTime().ToString("g")</small>
                                </MudStack>
                            </MudListItem>
                        }
                    </MudList>
                }
            </MudCardContent>
        </MudCard>
    </MudStack>
</MudContainer>

@code {
    private DotnetFinancialTrackerApp.Services.GamificationSummary _summary = new();
    private List<DotnetFinancialTrackerApp.Models.Achievement> _achievements = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Game.EvaluateAsync();
            _summary = await Game.GetSummaryAsync();
            _achievements = await Game.GetAchievementsAsync();
        }
        catch
        {
            // swallow to avoid app crash; achievements will be empty until data is available
        }
    }
}
