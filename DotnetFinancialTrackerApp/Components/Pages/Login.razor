@page "/login"
@using DotnetFinancialTrackerApp.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IUserService Users
@inject AuthState Auth
@inject NavigationManager Nav

<div class="login-page">
    <UiSurface Class="login-form-wrapper">
        <MudStack Spacing="3">
            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                <MudAvatar Class="login-avatar" Color="Color.Dark" Size="Size.Large" Style="background-color: black; color: white;">
                    K
                </MudAvatar>
                <MudText Typo="Typo.h5" Class="login-title">Welcome Back</MudText>
                <MudText Typo="Typo.body2" Class="login-subtitle">Sign in to your account</MudText>
            </MudStack>

            <UiForm Model="_formModel"
                    OnChanged="HandleFormChanged"
                    OnValidSubmit="HandleSubmit"
                    OnInvalidSubmit="HandleInvalidSubmit">
                <MudStack Spacing="3">
                    <UiSelect T="int"
                              Label="Select User"
                              Dense="true"
                              @bind-Value="_formModel.SelectedUserId"
                              Disabled="_users.Count == 0">
                        @foreach (var user in _users)
                        {
                            <MudSelectItem Value="@user.Id">@user.Name</MudSelectItem>
                        }
                    </UiSelect>
                    <ValidationMessage For="@(() => _formModel.SelectedUserId)" />

                    <UiTextField T="string"
                                 Label="PIN Code"
                                 Dense="true"
                                 InputType="InputType.Password"
                                 Immediate="true"
                                 AdornmentIcon="@Icons.Material.Outlined.Lock"
                                 @bind-Value="_formModel.Pin" />
                    <ValidationMessage For="@(() => _formModel.Pin)" />

                    <UiButton FullWidth="true"
                              ButtonType="ButtonType.Submit"
                              Disabled="@(!CanSignIn)">
                        Sign In
                    </UiButton>
                </MudStack>
            </UiForm>

            @if (!string.IsNullOrEmpty(_error))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">
                    @_error
                </MudAlert>
            }
        </MudStack>
    </UiSurface>
</div>

@code {
    private readonly LoginFormModel _formModel = new();
    private readonly List<UserProfile> _users = new();
    private ValidationMessageStore? _validationMessages;
    private EditContext? _currentContext;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        var users = await Users.GetUsersAsync();
        _users.AddRange(users);
        if (_users.Count > 0 && _formModel.SelectedUserId == 0)
        {
            _formModel.SelectedUserId = _users[0].Id;
        }
        StateHasChanged();
    }

    private bool CanSignIn => _formModel.SelectedUserId > 0 && (_formModel.Pin?.Trim().Length ?? 0) >= 4;

    private Task HandleFormChanged(EditContext context)
    {
        EnsureValidationStore(context);
        _validationMessages?.Clear();
        context.NotifyValidationStateChanged();
        _error = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task HandleInvalidSubmit(EditContext context)
    {
        EnsureValidationStore(context);
        return Task.CompletedTask;
    }

    private async Task HandleSubmit(EditContext context)
    {
        EnsureValidationStore(context);
        _validationMessages?.Clear();
        _error = null;

        var pin = (_formModel.Pin ?? string.Empty).Trim();
        if (!CanSignIn)
        {
            AddValidationMessage(context, nameof(LoginFormModel.Pin), "PIN must be at least 4 digits.");
            return;
        }

        var user = await Users.VerifyAsync(_formModel.SelectedUserId, pin);
        if (user is null)
        {
            _error = "Invalid PIN code. Please try again.";
            AddValidationMessage(context, nameof(LoginFormModel.Pin), _error);
            return;
        }

        Auth.SignIn(user);
        Nav.NavigateTo("/");
    }

    private void EnsureValidationStore(EditContext context)
    {
        if (!ReferenceEquals(_currentContext, context))
        {
            _currentContext = context;
            _validationMessages = new ValidationMessageStore(context);
        }
    }

    private void AddValidationMessage(EditContext context, string fieldName, string message)
    {
        EnsureValidationStore(context);
        var fieldIdentifier = context.Field(fieldName);
        _validationMessages!.Add(fieldIdentifier, message);
        context.NotifyValidationStateChanged();
    }
}

<style>
.login-page {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    background-color: #FFFFFF;
    overflow: hidden;
}

.login-form-wrapper {
    position: relative;
    max-width: 440px;
    width: 100%;
    padding: 2rem;
    border-radius: 28px;
    background: rgba(255, 255, 255, 0.95);
    border: 1px solid rgba(1, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.login-avatar {
    width: 72px;
    height: 72px;
    /*background: linear-gradient(135deg, rgba(1, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.9) 100%);*/
    color: #000000;
    box-shadow: 0 8px 24px rgba(1, 255, 255, 0.2);
}

.login-title {
    font-weight: 700;
    letter-spacing: -0.3px;
    text-align: center;
    color: #000000;
}

.login-subtitle {
    color: rgba(0, 0, 0, 0.7);
    text-align: center;
}

@@media (max-width: 640px) {
    .login-page {
        padding: 1rem;
    }

    .login-form-wrapper {
        max-width: 360px;
        padding: 1.5rem;
    }
}
</style>
