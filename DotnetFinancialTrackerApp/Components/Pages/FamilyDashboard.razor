@page "/family-dashboard"
@using System.Globalization
@using DotnetFinancialTrackerApp.Models
@using DotnetFinancialTrackerApp.Components.UI
@inject NavigationManager Nav
@inject AuthState Auth
@inject DotnetFinancialTrackerApp.Services.ITransactionsService TxSvc
@inject DotnetFinancialTrackerApp.Services.IBudgetsService BudgetSvc
@inject DotnetFinancialTrackerApp.Services.IGamificationService Game
@inject DotnetFinancialTrackerApp.Services.IFamilyBankingService FamilyService
@inject DotnetFinancialTrackerApp.Services.IFamilyAIService AIService
@inject IJSRuntime JS

<div class="family-dashboard">
    @if (!string.IsNullOrEmpty(_error))
    {
        <MudAlert Severity="Severity.Warning" Class="mb-3">
            @_error
        </MudAlert>
    }

    <!-- Family Bank Header -->
    <div class="family-bank-header">
        <div class="bank-branding">
            <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Size="Size.Large" Class="bank-icon" />
            <div class="bank-title">
                <h1 class="bank-name">@FamilyName Family Bank</h1>
                <p class="bank-tagline">Your family's financial companion</p>
            </div>
        </div>
        <div class="bank-time">
            <div class="current-time">@DateTime.Now.ToString("HH:mm")</div>
            <div class="current-date">@DateTime.Now.ToString("MMM dd, yyyy")</div>
        </div>
    </div>

    <!-- Main Family Balance Card -->
    <div class="family-dashboard-section">
        <FamilyCard Balance="@TotalFamilyBalance"
                   OverlineText="@($"{CurrentPeriodLabel} Â· Family Bank")"
                   SubtitleText="Total available across all accounts"
                   SavingsRate="@SavingsRate"
                   TransactionCount="@_txCount"
                   Streak="@_summary.Streak"
                   ShowProgress="true"
                   ProgressValue="@MonthlyBudgetProgress"
                   ProgressLabel="Budget"
                   OnClick="ViewFamilyDetails"
                   OnQuickTransfer="OpenTransferDialog"
                   OnQuickSave="OpenSavingsGoal" />
    </div>

    <!-- Family Members Section -->
    <div class="family-dashboard-section">
        <div class="section-header">
            <h2 class="section-title">Family Members</h2>
            <button class="section-action" @onclick="ManageFamilyMembers">
                <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Size="Size.Small" />
                <span>Manage</span>
            </button>
        </div>

        <div class="family-members-grid">
            @foreach (var member in FamilyMembers)
            {
                <FamilyMemberCard Name="@member.Name"
                                Role="@member.Role"
                                Balance="@member.Balance"
                                MonthlyAllowance="@member.MonthlyAllowance"
                                IsOnline="@member.IsOnline"
                                LastActivity="@member.LastActivity"
                                SpendingLimit="@member.SpendingLimit"
                                SpentThisMonth="@member.SpentThisMonth"
                                TransactionsThisMonth="@member.TransactionsThisMonth"
                                SavingsGoalProgress="@member.SavingsGoalProgress"
                                AchievementPoints="@member.AchievementPoints"
                                CardLastFour="@member.CardLastFour"
                                OnClick="() => ViewMemberDetails(member)"
                                OnViewTransactions="() => ViewMemberTransactions(member)"
                                OnSendMoney="() => SendMoneyToMember(member)"
                                OnShowCard="() => ShowMemberCard(member)" />
            }
        </div>
    </div>

    <!-- Family Goals & Progress -->
    <div class="family-dashboard-section">
        <div class="section-header">
            <h2 class="section-title">Family Goals</h2>
            <button class="section-action" @onclick="CreateNewGoal">
                <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Small" />
                <span>New Goal</span>
            </button>
        </div>

        <div class="family-goals-grid">
            @foreach (var goal in FamilyGoals)
            {
                <FamilyProgressRing DisplayMode="FamilyProgressRing.ProgressDisplayMode.Currency"
                                  CurrentAmount="@goal.CurrentAmount"
                                  TargetAmount="@goal.TargetAmount"
                                  Label="@goal.Name"
                                  Size="FamilyProgressRing.ProgressSize.Large"
                                  Style="@GetGoalStyle(goal)"
                                  ShowStatusBadge="@goal.IsComplete"
                                  StatusText="@(goal.IsComplete ? "Complete" : "")"
                                  StatusClass="@(goal.IsComplete ? "status-complete" : "")"
                                  ShowDetails="true"
                                  Details="@GetGoalDetails(goal)"
                                  OnClick="() => ViewGoalDetails(goal)" />
            }
        </div>
    </div>

    <!-- AI Assistant Section -->
    <div class="family-dashboard-section">
        <div class="section-header">
            <h2 class="section-title">Family Assistant</h2>
        </div>

        <FamilyAIChat Messages="@_chatMessages"
                     IsTyping="@_isAITyping"
                     IsMinimized="@_isChatMinimized"
                     OnSendMessage="HandleAIMessage"
                     OnMinimize="ToggleChatMinimized" />
    </div>

    <!-- Quick Insights -->
    <div class="family-dashboard-section">
        <div class="section-header">
            <h2 class="section-title">Family Insights</h2>
            <button class="section-action" @onclick="ViewFullReports">
                <MudIcon Icon="@Icons.Material.Filled.Analytics" Size="Size.Small" />
                <span>View All</span>
            </button>
        </div>

        <div class="family-insights-grid">
            <div class="insight-card">
                <div class="insight-icon">
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Medium" />
                </div>
                <div class="insight-content">
                    <div class="insight-title">Monthly Savings</div>
                    <div class="insight-value">@MonthlySavings.ToString("C", CultureInfo.CurrentCulture)</div>
                    <div class="insight-change positive">+@SavingsGrowth.ToString("P1") vs last month</div>
                </div>
            </div>

            <div class="insight-card">
                <div class="insight-icon">
                    <MudIcon Icon="@Icons.Material.Filled.LocalGroceryStore" Size="Size.Medium" />
                </div>
                <div class="insight-content">
                    <div class="insight-title">Top Category</div>
                    <div class="insight-value">@TopSpendingCategory</div>
                    <div class="insight-change">@TopCategoryAmount.ToString("C") this month</div>
                </div>
            </div>

            <div class="insight-card">
                <div class="insight-icon">
                    <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Size="Size.Medium" />
                </div>
                <div class="insight-content">
                    <div class="insight-title">Achievements</div>
                    <div class="insight-value">@_summary.Points pts</div>
                    <div class="insight-change">@_summary.Streak day streak</div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string FamilyName => Auth.CurrentUser?.Name?.Split(' ').FirstOrDefault() ?? "Your";
    private string CurrentPeriodLabel => DateTime.Today.ToString("MMMM yyyy", CultureInfo.CurrentCulture);

    private int _txCount;
    private decimal _income;
    private decimal _expense;
    private string? _error;
    private string _currentFamilyId = "";
    private GamificationSummary _summary = new();
    private List<FamilyAIChat.ChatMessage> _chatMessages = new();
    private List<Models.FamilyMember> _realFamilyMembers = new();
    private bool _isAITyping;
    private bool _isChatMinimized;

    // Calculated properties
    private decimal TotalFamilyBalance => FamilyMembers.Sum(m => m.Balance);
    private double SavingsRate => _income == 0 ? 0 : Math.Clamp((double)((_income - _expense) / _income), -1, 1);
    private double MonthlyBudgetProgress => 65.0; // Mock data
    private decimal MonthlySavings => _income - _expense;
    private double SavingsGrowth => 0.12; // Mock data
    private string TopSpendingCategory => "Groceries"; // Mock data
    private decimal TopCategoryAmount => 850; // Mock data

    // Mock family data - in real app, this would come from services
    private List<FamilyMember> FamilyMembers = new()
    {
        new()
        {
            Name = "Mom (Sarah)",
            Role = "Parent",
            Balance = 2500m,
            MonthlyAllowance = 0m,
            IsOnline = true,
            LastActivity = DateTime.Now.AddMinutes(-15),
            SpendingLimit = 5000m,
            SpentThisMonth = 1200m,
            TransactionsThisMonth = 23,
            SavingsGoalProgress = 0.75,
            AchievementPoints = 150,
            CardLastFour = "4521"
        },
        new()
        {
            Name = "Dad (Mike)",
            Role = "Parent",
            Balance = 1800m,
            MonthlyAllowance = 0m,
            IsOnline = false,
            LastActivity = DateTime.Now.AddHours(-2),
            SpendingLimit = 4000m,
            SpentThisMonth = 980m,
            TransactionsThisMonth = 18,
            SavingsGoalProgress = 0.60,
            AchievementPoints = 120,
            CardLastFour = "7834"
        },
        new()
        {
            Name = "Emma",
            Role = "Teen",
            Balance = 150m,
            MonthlyAllowance = 200m,
            IsOnline = true,
            LastActivity = DateTime.Now.AddMinutes(-5),
            SpendingLimit = 300m,
            SpentThisMonth = 180m,
            TransactionsThisMonth = 12,
            SavingsGoalProgress = 0.40,
            AchievementPoints = 85,
            CardLastFour = "2910"
        },
        new()
        {
            Name = "Jake",
            Role = "Child",
            Balance = 45m,
            MonthlyAllowance = 50m,
            IsOnline = false,
            LastActivity = DateTime.Now.AddHours(-4),
            SpendingLimit = 75m,
            SpentThisMonth = 35m,
            TransactionsThisMonth = 6,
            SavingsGoalProgress = 0.80,
            AchievementPoints = 65,
            CardLastFour = "5647"
        }
    };

    private List<FamilyGoal> FamilyGoals = new()
    {
        new()
        {
            Name = "Vacation Fund",
            CurrentAmount = 2400m,
            TargetAmount = 5000m,
            TargetDate = DateTime.Now.AddMonths(6),
            IsComplete = false
        },
        new()
        {
            Name = "Emergency Fund",
            CurrentAmount = 8500m,
            TargetAmount = 10000m,
            TargetDate = DateTime.Now.AddMonths(3),
            IsComplete = false
        },
        new()
        {
            Name = "College Fund",
            CurrentAmount = 1200m,
            TargetAmount = 1000m,
            TargetDate = DateTime.Now.AddMonths(-1),
            IsComplete = true
        }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var periodStart = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
            var periodEnd = periodStart.AddMonths(1).AddTicks(-1);

            var transactions = await TxSvc.GetAsync(from: periodStart, to: periodEnd);
            _txCount = transactions.Count;
            _income = transactions.Where(t => t.IsIncome).Sum(t => t.Amount);
            _expense = transactions.Where(t => !t.IsIncome).Sum(t => t.Amount);

            await Game.EvaluateAsync();
            _summary = await Game.GetSummaryAsync();

            // Load real family data
            await LoadFamilyDataAsync();

            // Initialize AI chat with real data
            _chatMessages.Add(new FamilyAIChat.ChatMessage
            {
                Content = $"Welcome to your Family Bank dashboard! I can see you have {_realFamilyMembers.Count} family members and are tracking {_txCount} transactions this month. How can I help you today?",
                IsUser = false,
                Timestamp = DateTime.Now,
                Suggestions = new[] { "Show family spending summary", "Check savings goals progress", "Review budget alerts" }
            });
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task LoadFamilyDataAsync()
    {
        try
        {
            // For demo purposes, we'll use the first family account
            // In a real app, this would be determined by authentication
            var familyAccounts = await FamilyService.GetFamilyStatisticsAsync("default-family");
            var familyId = "default-family";

            // If no family account exists, create one
            if (familyAccounts.ContainsKey("TotalMembers") && (int)familyAccounts["TotalMembers"] == 0)
            {
                var newFamily = await FamilyService.CreateFamilyAccountAsync("Your Family", Auth.CurrentUser?.Name ?? "Parent");
                familyId = newFamily.FamilyId;
            }

            // Load family members
            _realFamilyMembers = await FamilyService.GetFamilyMembersAsync(familyId);

            // Update mock data with real data if available
            if (_realFamilyMembers.Any())
            {
                FamilyMembers.Clear();
                foreach (var member in _realFamilyMembers)
                {
                    var card = await FamilyService.GetMemberCardAsync(member.MemberId);
                    FamilyMembers.Add(new FamilyMember
                    {
                        Name = member.Name,
                        Role = member.Role,
                        Balance = member.Balance,
                        MonthlyAllowance = member.MonthlyAllowance,
                        IsOnline = member.IsOnline,
                        LastActivity = member.LastActivity,
                        SpendingLimit = member.SpendingLimit,
                        SpentThisMonth = member.SpentThisMonth,
                        TransactionsThisMonth = member.TransactionsThisMonth,
                        SavingsGoalProgress = member.SavingsGoalProgress,
                        AchievementPoints = member.AchievementPoints,
                        CardLastFour = card?.DisplayNumber ?? "0000"
                    });
                }
            }

            // Load family goals
            var realGoals = await FamilyService.GetFamilyGoalsAsync(familyId);
            if (realGoals.Any())
            {
                FamilyGoals.Clear();
                foreach (var goal in realGoals.Take(3)) // Show top 3 goals
                {
                    FamilyGoals.Add(new FamilyGoal
                    {
                        Name = goal.Title,
                        CurrentAmount = goal.CurrentAmount,
                        TargetAmount = goal.TargetAmount,
                        TargetDate = goal.TargetDate,
                        IsComplete = goal.IsComplete
                    });
                }
            }

            _currentFamilyId = familyId;
        }
        catch (Exception ex)
        {
            // Use mock data if real data loading fails
            _error = $"Using demo data: {ex.Message}";
        }
    }

    // Event handlers
    private void ViewFamilyDetails() => Nav.NavigateTo("/family-overview");
    private void OpenTransferDialog() { /* Implementation */ }
    private void OpenSavingsGoal() { /* Implementation */ }
    private void ManageFamilyMembers() { /* Implementation */ }
    private void ViewMemberDetails(FamilyMember member) { /* Implementation */ }
    private void ViewMemberTransactions(FamilyMember member) { /* Implementation */ }
    private void SendMoneyToMember(FamilyMember member) { /* Implementation */ }
    private void ShowMemberCard(FamilyMember member) { /* Implementation */ }
    private void CreateNewGoal() { /* Implementation */ }
    private void ViewGoalDetails(FamilyGoal goal) { /* Implementation */ }
    private void ViewFullReports() => Nav.NavigateTo("/reports");

    private async Task HandleAIMessage(string message)
    {
        _isAITyping = true;
        StateHasChanged();

        try
        {
            // Add user message to chat
            _chatMessages.Add(new FamilyAIChat.ChatMessage
            {
                Content = message,
                IsUser = true,
                Timestamp = DateTime.Now
            });

            // Get AI response using the real service
            var response = await AIService.GetConversationalInsightAsync(message, _currentFamilyId);

            _chatMessages.Add(new FamilyAIChat.ChatMessage
            {
                Content = response,
                IsUser = false,
                Timestamp = DateTime.Now
            });
        }
        catch (Exception ex)
        {
            // Fallback to simple response if AI service fails
            var response = GenerateAIResponse(message);
            _chatMessages.Add(new FamilyAIChat.ChatMessage
            {
                Content = response,
                IsUser = false,
                Timestamp = DateTime.Now
            });
        }

        _isAITyping = false;
        StateHasChanged();
    }

    private void ToggleChatMinimized() => _isChatMinimized = !_isChatMinimized;

    private string GenerateAIResponse(string message)
    {
        // Simple AI response simulation
        var lowercaseMessage = message.ToLower();
        if (lowercaseMessage.Contains("balance"))
            return $"Your family's total balance is {TotalFamilyBalance:C}. This includes all family member accounts. Would you like me to break this down by member?";
        if (lowercaseMessage.Contains("spending"))
            return $"This month your family has spent {_expense:C} across {_txCount} transactions. Your top category is {TopSpendingCategory} at {TopCategoryAmount:C}.";
        if (lowercaseMessage.Contains("goals") || lowercaseMessage.Contains("savings"))
            return $"You have {FamilyGoals.Count} active family goals. Your vacation fund is at {(FamilyGoals[0].CurrentAmount / FamilyGoals[0].TargetAmount * 100):F0}% completion!";

        return "I understand you're asking about your family finances. I can help with balances, spending analysis, budget tracking, and savings goals. What specific information would you like?";
    }

    private FamilyProgressRing.ProgressStyle GetGoalStyle(FamilyGoal goal)
    {
        if (goal.IsComplete) return FamilyProgressRing.ProgressStyle.Success;
        var progress = (double)(goal.CurrentAmount / goal.TargetAmount);
        if (progress >= 0.8) return FamilyProgressRing.ProgressStyle.Primary;
        if (progress >= 0.5) return FamilyProgressRing.ProgressStyle.Info;
        return FamilyProgressRing.ProgressStyle.Warning;
    }

    private List<FamilyProgressRing.ProgressDetail> GetGoalDetails(FamilyGoal goal)
    {
        var remaining = goal.TargetAmount - goal.CurrentAmount;
        var daysLeft = (goal.TargetDate - DateTime.Today).Days;

        return new List<FamilyProgressRing.ProgressDetail>
        {
            new("Remaining", remaining.ToString("C0")),
            new("Days left", daysLeft > 0 ? daysLeft.ToString() : "Overdue"),
            new("Monthly need", remaining > 0 && daysLeft > 0 ? (remaining / (daysLeft / 30.0m)).ToString("C0") : "â")
        };
    }

    // Data models
    public class FamilyMember
    {
        public string Name { get; set; } = "";
        public string Role { get; set; } = "";
        public decimal Balance { get; set; }
        public decimal MonthlyAllowance { get; set; }
        public bool IsOnline { get; set; }
        public DateTime? LastActivity { get; set; }
        public decimal SpendingLimit { get; set; }
        public decimal SpentThisMonth { get; set; }
        public int TransactionsThisMonth { get; set; }
        public double SavingsGoalProgress { get; set; }
        public int AchievementPoints { get; set; }
        public string CardLastFour { get; set; } = "";
    }

    public class FamilyGoal
    {
        public string Name { get; set; } = "";
        public decimal CurrentAmount { get; set; }
        public decimal TargetAmount { get; set; }
        public DateTime TargetDate { get; set; }
        public bool IsComplete { get; set; }
    }
}

<style>
.family-dashboard {
    display: flex;
    flex-direction: column;
    gap: 32px;
    padding: 24px;
    background: #FFFFFF;
    min-height: 100vh;
}

.family-bank-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 24px 32px;
    background: linear-gradient(135deg, rgba(1, 255, 255, 0.15) 0%, rgba(255, 255, 255, 0.95) 100%);
    border: 1px solid rgba(1, 255, 255, 0.2);
    border-radius: 24px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
}

.bank-branding {
    display: flex;
    align-items: center;
    gap: 16px;
}

.bank-icon {
    color: #01FFFF;
}

.bank-name {
    font-size: 1.75rem;
    font-weight: 700;
    color: #000000;
    margin: 0;
    letter-spacing: -0.02em;
}

.bank-tagline {
    font-size: 1rem;
    color: rgba(0, 0, 0, 0.7);
    margin: 0;
}

.bank-time {
    text-align: right;
}

.current-time {
    font-size: 1.5rem;
    font-weight: 700;
    color: #000000;
    font-variant-numeric: tabular-nums;
}

.current-date {
    font-size: 0.875rem;
    color: rgba(0, 0, 0, 0.6);
    text-transform: uppercase;
    letter-spacing: 0.1em;
}

.family-dashboard-section {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.section-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: #000000;
    margin: 0;
}

.section-action {
    display: flex;
    align-items: center;
    gap: 6px;
    background: rgba(1, 255, 255, 0.1);
    border: 1px solid rgba(1, 255, 255, 0.2);
    border-radius: 12px;
    padding: 8px 12px;
    font-size: 0.875rem;
    color: #000000;
    cursor: pointer;
    transition: all 0.15s ease;
}

.section-action:hover {
    background: rgba(1, 255, 255, 0.2);
    border-color: rgba(1, 255, 255, 0.4);
}

.family-members-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 20px;
}

.family-goals-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 24px;
    justify-items: center;
}

.family-insights-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 20px;
}

.insight-card {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(1, 255, 255, 0.2);
    border-radius: 20px;
    padding: 24px;
    display: flex;
    align-items: center;
    gap: 16px;
    transition: all 0.25s ease;
}

.insight-card:hover {
    transform: translateY(-1px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
}

.insight-icon {
    width: 56px;
    height: 56px;
    background: linear-gradient(135deg, #01FFFF 0%, #00E5E5 100%);
    border-radius: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #000000;
}

.insight-content {
    flex: 1;
}

.insight-title {
    font-size: 0.875rem;
    color: rgba(0, 0, 0, 0.6);
    text-transform: uppercase;
    letter-spacing: 0.1em;
    margin-bottom: 4px;
}

.insight-value {
    font-size: 1.25rem;
    font-weight: 700;
    color: #000000;
    margin-bottom: 2px;
}

.insight-change {
    font-size: 0.75rem;
    color: rgba(0, 0, 0, 0.7);
}

.insight-change.positive {
    color: #4CAF50;
}

.insight-change.negative {
    color: #F44336;
}

@@media (max-width: 767px) {
    .family-dashboard {
        padding: 16px;
        gap: 24px;
    }

    .family-bank-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
        padding: 20px;
    }

    .bank-time {
        align-self: flex-end;
        text-align: right;
    }

    .bank-name {
        font-size: 1.5rem;
    }

    .section-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 12px;
    }

    .family-members-grid {
        grid-template-columns: 1fr;
        gap: 16px;
    }

    .family-goals-grid {
        grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
        gap: 20px;
    }

    .family-insights-grid {
        grid-template-columns: 1fr;
        gap: 16px;
    }

    .insight-card {
        padding: 20px;
        gap: 12px;
    }

    .insight-icon {
        width: 48px;
        height: 48px;
    }
}
</style>