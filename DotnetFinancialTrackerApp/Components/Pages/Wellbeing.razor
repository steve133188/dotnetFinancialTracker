@page "/wellbeing"
@using DotnetFinancialTrackerApp.Models
@using System.Globalization
@inject DotnetFinancialTrackerApp.Services.IBudgetsService BudgetSvc
@inject DotnetFinancialTrackerApp.Services.ITransactionsService TxSvc
@inject AuthState Auth
@inject IDialogService DialogService
@inject NavigationManager Nav

<PageTitle>Budget & Savings</PageTitle>

<MudContainer Class="wellbeing-container" MaxWidth="MaxWidth.False">
    @if (!string.IsNullOrEmpty(_error))
    {
        <MudAlert Severity="Severity.Warning" Class="mb-3" ShowCloseIcon="true" CloseIconClicked="@(() => _error = string.Empty)">
            @_error
        </MudAlert>
    }

    <!-- Header Section -->
    <div class="wellbeing-header">
        <div class="header-content">
            <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Size="Size.Large" Class="header-icon" />
            <div class="header-text">
                <MudText Typo="Typo.h4" Class="header-title">Budget & Savings</MudText>
                <MudText Typo="Typo.body1" Class="header-subtitle">Manage your family budget and savings goals</MudText>
            </div>
        </div>
        <div class="header-actions">
            <MudButton Variant="Variant.Filled" Color="Color.Default" Elevation="0" StartIcon="@Icons.Material.Filled.AccountBalance" OnClick="@SetupBudget" Style="background-color: black; color: white;">
                Setup Budget
            </MudButton>
        </div>
    </div>

    <!-- Budget Setup Section -->
    <div class="budget-setup-section">
        <div class="section-header">
            <MudText Typo="Typo.h6" Class="section-title">Overall Family Budget</MudText>
        </div>

        @if (_budgetCount == 0)
        {
            <MudCard Class="budget-setup-card" Elevation="0">
                <MudCardContent>
                    <div class="setup-content">
                        <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Color="Color.Default" Size="Size.Large" Style="color: black;" />
                        <div class="setup-text">
                            <MudText Typo="Typo.h6">Create Your Overall Family Budget</MudText>
                            <MudText Typo="Typo.body1" Class="setup-description">
                                Set up your family's total monthly budget to track overall spending and identify how much you can save toward your goals.
                            </MudText>
                            <div class="budget-benefits">
                                <MudText Typo="Typo.caption" Class="benefit-label">Your overall budget helps:</MudText>
                                <MudText Typo="Typo.caption" Class="benefit-text">• Track total family spending</MudText>
                                <MudText Typo="Typo.caption" Class="benefit-text">• Calculate available savings</MudText>
                                <MudText Typo="Typo.caption" Class="benefit-text">• Plan for savings goals</MudText>
                                <MudText Typo="Typo.caption" Class="benefit-text">• Monitor monthly progress</MudText>
                            </div>
                            <MudButton Variant="Variant.Filled" Color="Color.Default" Elevation="0" OnClick="@SetupBudget" Style="background-color: black; color: white;" Class="mt-3">
                                Create Family Budget
                            </MudButton>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <MudCard Class="budget-summary-card" Elevation="0">
                <MudCardContent>
                    <div class="budget-status">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
                        <div class="status-text">
                            <MudText Typo="Typo.h6">Family Budget Active</MudText>
                            <MudText Typo="Typo.body2">Your overall family budget is tracking total spending.</MudText>
                        </div>
                    </div>
                    <MudGrid AlignItems="Center" Class="mt-3">
                        <MudItem xs="12" md="4">
                            <div class="budget-stat">
                                <MudText Typo="Typo.caption">Total Monthly Budget</MudText>
                                <MudText Typo="Typo.h6">@_totalBudgetLimit.ToString("C", CultureInfo.CurrentCulture)</MudText>
                            </div>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <div class="budget-stat">
                                <MudText Typo="Typo.caption">Spent This Month</MudText>
                                <MudText Typo="Typo.h6" Class="expense">@_monthExpense.ToString("C", CultureInfo.CurrentCulture)</MudText>
                            </div>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <div class="budget-stat">
                                <MudText Typo="Typo.caption">Available for Savings</MudText>
                                <MudText Typo="Typo.h6" Class="savings">@((_totalBudgetLimit - _monthExpense).ToString("C", CultureInfo.CurrentCulture))</MudText>
                            </div>
                        </MudItem>
                    </MudGrid>
                    <div class="budget-actions">
                        <MudButton Variant="Variant.Text" Color="Color.Default" Elevation="0" OnClick="@SetupBudget" Style="color: black;">
                            Edit Budget
                        </MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Default" Elevation="0" OnClick="@NavigateToFinance" Style="color: black;">
                            View Details
                        </MudButton>
                    </div>
                </MudCardContent>
            </MudCard>
        }
    </div>

    <!-- Savings Jars Section -->
    <div class="savings-section">
        <div class="section-header">
            <MudText Typo="Typo.h6" Class="section-title">Savings Goals</MudText>
            <MudButton Variant="Variant.Text" Color="Color.Default" Elevation="0" Style="color: black;">
                Manage Goals
            </MudButton>
        </div>

        <div class="savings-grid">
            <DotnetFinancialTrackerApp.Components.UI.SavingsJar
                Title="Emergency Fund"
                Subtitle="6 months expenses"
                CurrentAmount="2800"
                TargetAmount="15000" />

            <DotnetFinancialTrackerApp.Components.UI.SavingsJar
                Title="Vacation Fund"
                Subtitle="Family trip 2025"
                CurrentAmount="750"
                TargetAmount="3000" />

            <DotnetFinancialTrackerApp.Components.UI.SavingsJar
                Title="Home Improvement"
                Subtitle="Kitchen renovation"
                CurrentAmount="1200"
                TargetAmount="8000" />

            <DotnetFinancialTrackerApp.Components.UI.SavingsJar
                Title="Kids Education"
                Subtitle="College fund"
                CurrentAmount="5400"
                TargetAmount="20000" />
        </div>

        @if (_budgetCount > 0 && (_totalBudgetLimit - _monthExpense) > 0)
        {
            <MudCard Class="savings-transfer-card" Elevation="0">
                <MudCardContent>
                    <div class="transfer-section">
                        <div class="transfer-info">
                            <MudIcon Icon="@Icons.Material.Filled.Savings" Color="Color.Success" Size="Size.Medium" Class="transfer-icon" />
                            <div class="transfer-details">
                                <MudText Typo="Typo.subtitle1" Class="transfer-title">Save This Month's Surplus</MudText>
                                <MudText Typo="Typo.body2" Class="transfer-amount">@(_totalBudgetLimit - _monthExpense).ToString("C", CultureInfo.CurrentCulture) available to allocate</MudText>
                            </div>
                        </div>
                        <MudButton Variant="Variant.Filled"
                                 Color="Color.Success"
                                 Size="Size.Medium"
                                 StartIcon="@Icons.Material.Filled.Add"
                                 Class="transfer-button">
                            Allocate to Goals
                        </MudButton>
                    </div>
                </MudCardContent>
            </MudCard>
        }
    </div>
</MudContainer>

@code {
    private string? _error;
    private decimal _totalBudgetLimit;
    private decimal _monthExpense;
    private int _budgetCount;

    protected override async Task OnInitializedAsync()
    {
        if (!Auth.IsAuthenticated)
        {
            Nav.NavigateTo("/login");
            return;
        }

        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            var periodStart = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
            var periodEnd = periodStart.AddMonths(1).AddTicks(-1);

            var transactions = await TxSvc.GetAsync(from: periodStart, to: periodEnd);
            _monthExpense = transactions.Where(t => !t.IsIncome).Sum(t => t.Amount);

            var budgets = await BudgetSvc.GetAsync(periodStart);
            _budgetCount = budgets.Count;
            _totalBudgetLimit = budgets.Sum(b => b.Limit);
        }
        catch (Exception ex)
        {
            _error = $"Error loading budget data: {ex.Message}";
        }
    }

    private async Task SetupBudget()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, Position = DialogPosition.Center };
        var dialog = DialogService.Show<DotnetFinancialTrackerApp.Components.Dialogs.EditBudgetDialog>("Setup Budget", options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is Budget budget)
        {
            await BudgetSvc.AddAsync(budget);
            await LoadDataAsync();
        }
    }

    private void NavigateToFinance() => Nav.NavigateTo("/finance");
}

<style>
.wellbeing-container {
    padding: 24px;
    background: #FFFFFF;
    min-height: 100vh;
}

.wellbeing-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 32px;
    padding: 24px 32px;
    background: #FFFFFF;
    border: 1px solid rgba(0, 0, 0, 0.08);
    border-radius: 20px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.06);
}

.header-content {
    display: flex;
    align-items: center;
    gap: 16px;
}

.header-icon {
    color: #000000;
}

.header-title {
    color: #000000;
    font-weight: 700;
    margin: 0;
}

.header-subtitle {
    color: rgba(0, 0, 0, 0.7);
    margin: 0;
}

.header-actions {
    display: flex;
    gap: 12px;
}

.budget-setup-section, .savings-section {
    margin-bottom: 32px;
}

.budget-setup-card, .budget-summary-card, .savings-transfer-card {
    background: #FFFFFF;
    border: 1px solid rgba(0, 0, 0, 0.08);
    border-radius: 20px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.06);
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.section-title {
    color: #000000;
    font-weight: 600;
    margin: 0;
}

.savings-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 24px;
    margin-bottom: 24px;
}

.transfer-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 16px;
}

.transfer-info {
    display: flex;
    align-items: center;
    gap: 16px;
}

.transfer-details {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.transfer-title {
    color: #000000;
    font-weight: 600;
    margin: 0;
}

.transfer-amount {
    color: rgba(0, 0, 0, 0.7);
    margin: 0;
}

.transfer-icon {
    color: #4CAF50;
}

.transfer-button {
    background-color: #4CAF50 !important;
    color: white !important;
    border-radius: 12px;
    padding: 12px 24px;
    font-weight: 600;
}

.transfer-button:hover {
    background-color: #45a049 !important;
    transform: translateY(-1px);
}

.setup-content {
    display: flex;
    align-items: flex-start;
    gap: 16px;
}

.setup-text {
    flex: 1;
}

.setup-description {
    color: rgba(0, 0, 0, 0.7);
    margin-bottom: 16px;
}

.budget-benefits {
    background: #F8F9FA;
    border: 1px solid rgba(0, 0, 0, 0.05);
    padding: 12px;
    border-radius: 8px;
    margin-bottom: 16px;
}

.benefit-label {
    font-weight: 600;
    color: #000000;
    margin-bottom: 4px;
}

.benefit-text {
    color: rgba(0, 0, 0, 0.7);
    margin-bottom: 2px;
}

.budget-status {
    display: flex;
    align-items: center;
    gap: 16px;
    margin-bottom: 16px;
}

.status-text {
    flex: 1;
}

.budget-stat {
    text-align: center;
    padding: 16px;
}

.budget-actions {
    display: flex;
    gap: 12px;
    justify-content: center;
    margin-top: 16px;
}

.savings {
    color: #000000;
    font-weight: 700;
}

.expense {
    color: #000000;
    font-weight: 700;
}

@@media (max-width: 767px) {
    .wellbeing-container {
        padding: 16px;
    }

    .wellbeing-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
        padding: 20px;
    }

    .header-actions {
        align-self: stretch;
        justify-content: center;
    }

    .setup-content {
        flex-direction: column;
        text-align: center;
        gap: 16px;
    }

    .budget-actions {
        flex-direction: column;
        gap: 8px;
    }

    .savings-grid {
        grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
        gap: 16px;
    }

    .transfer-section {
        flex-direction: column;
        align-items: stretch;
        gap: 16px;
    }

    .transfer-info {
        justify-content: center;
        text-align: center;
    }
}
</style>
