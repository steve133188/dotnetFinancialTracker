@page "/wellbeing"
@using DotnetFinancialTrackerApp.Models
@using DotnetFinancialTrackerApp.Components.Dialogs
@using DotnetFinancialTrackerApp.Components.Wellbeing
@using DotnetFinancialTrackerApp.Services
@using System.Linq
@using System.Globalization
@inject IWellbeingDataService WellbeingDataSvc
@inject ISavingsGoalService SavingsGoalSvc
@inject IFamilyMemberService FamilyMemberSvc
@inject IBudgetsService BudgetSvc
@inject ITransactionsService TxSvc
@inject AuthState Auth
@inject IDialogService DialogService
@inject NavigationManager Nav
@inject ISnackbar Snackbar

<PageTitle>Savings Goals - Family Tracker</PageTitle>

<MudContainer Class="savings-container" MaxWidth="MaxWidth.False">
    @if (!string.IsNullOrEmpty(_error))
    {
        <MudAlert Severity="Severity.Error" Class="mb-3" ShowCloseIcon="true" CloseIconClicked="@(() => _error = string.Empty)">
            @_error
        </MudAlert>
    }

    <!-- Header Section -->
    <WellbeingHeader OnCreateGoal="@OpenCreateGoalDialog" />

    <!-- Summary Cards -->
    <WellbeingSummary TotalGoals="@_wellbeingData.AllGoals.Count"
                      ActiveGoals="@_wellbeingData.ActiveGoals.Count"
                      TotalSaved="@_wellbeingData.TotalSaved"
                      TotalTarget="@_wellbeingData.TotalTarget"
                      OverallProgress="@_wellbeingData.OverallProgress" />

    <!-- Monthly Budget -->
    <BudgetSection CurrentBudget="@_budgetData.CurrentBudget"
                   MonthlyBudget="@_budgetData.MonthlyBudget"
                   MonthlySpending="@_budgetData.MonthlySpending"
                   BudgetRemaining="@_budgetData.BudgetRemaining"
                   BudgetUsage="@_budgetData.BudgetUsage"
                   OnManageBudget="@OpenBudgetDialogAsync"
                   OnViewHistory="@OpenBudgetHistoryAsync" />

    <!-- Goals Section -->
    <div class="goals-section">
        <div class="section-header">
            <MudText Typo="Typo.h6" Class="section-title">Your Savings Goals</MudText>
        </div>

        <GoalsFilter Categories="@_wellbeingData.Categories"
                     SelectedCategory="@_filterCategory"
                     SelectedStatus="@_filterStatus"
                     OnCategoryChanged="@OnCategoryFilterChanged"
                     OnStatusChanged="@OnStatusFilterChanged" />

        <GoalsGrid Goals="@_filteredGoals"
                   HasAnyGoals="@_wellbeingData.AllGoals.Any()"
                   OnCreateGoal="@OpenCreateGoalDialog"
                   OnGoalHistory="@OpenGoalHistoryAsync"
                   OnGoalActions="@OpenGoalActions"
                   OnContribute="@OpenContributeDialog" />
    </div>
</MudContainer>

@code {
    private string? _error;
    private WellbeingData _wellbeingData = new();
    private BudgetData _budgetData = new();
    private List<SavingsGoal> _filteredGoals = new();
    private string _filterCategory = string.Empty;
    private string _filterStatus = string.Empty;
    private string _familyId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!Auth.IsAuthenticated)
        {
            Nav.NavigateTo("/login");
            return;
        }

        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            _familyId = await FamilyMemberSvc.GetDefaultFamilyIdAsync();

            _wellbeingData = await WellbeingDataSvc.GetWellbeingDataAsync(_familyId);
            _budgetData = await WellbeingDataSvc.GetBudgetDataAsync(_familyId);

            // Apply filters
            await ApplyFiltersAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error loading savings goals: {ex.Message}";
        }
    }

    private async Task ApplyFiltersAsync()
    {
        _filteredGoals = await WellbeingDataSvc.GetFilteredGoalsAsync(_wellbeingData.AllGoals, _filterCategory, _filterStatus);
        StateHasChanged();
    }

    private async Task OnCategoryFilterChanged(string category)
    {
        _filterCategory = category;
        await ApplyFiltersAsync();
    }

    private async Task OnStatusFilterChanged(string status)
    {
        _filterStatus = status;
        await ApplyFiltersAsync();
    }

    private async Task OpenBudgetDialogAsync()
    {
        if (string.IsNullOrEmpty(_familyId))
        {
            _familyId = await FamilyMemberSvc.GetDefaultFamilyIdAsync();
        }

        var parameters = new DialogParameters();
        if (_budgetData.CurrentBudget is not null)
        {
            parameters[nameof(EditBudgetDialog.Model)] = new Budget
            {
                Id = _budgetData.CurrentBudget.Id,
                FamilyId = _budgetData.CurrentBudget.FamilyId,
                Limit = _budgetData.CurrentBudget.Limit,
                Month = _budgetData.CurrentBudget.Month,
                Name = _budgetData.CurrentBudget.Name,
                Description = _budgetData.CurrentBudget.Description,
                CreatedByMemberId = _budgetData.CurrentBudget.CreatedByMemberId,
                CreatedAt = _budgetData.CurrentBudget.CreatedAt,
                UpdatedAt = _budgetData.CurrentBudget.UpdatedAt
            };
        }

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseButton = true,
            Position = DialogPosition.Center
        };

        var dialog = DialogService.Show<DotnetFinancialTrackerApp.Components.Dialogs.EditBudgetDialog>("Manage Budget", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled || result.Data is not Budget budgetFromDialog)
        {
            return;
        }

        await SaveBudgetAsync(budgetFromDialog);
    }

    private async Task SaveBudgetAsync(Budget budgetFromDialog)
    {
        try
        {
            var memberId = await ResolveMemberIdAsync();
            if (string.IsNullOrEmpty(memberId))
            {
                Snackbar.Add("Add at least one family member before creating a budget.", Severity.Warning);
                return;
            }

            budgetFromDialog.FamilyId = _familyId;
            budgetFromDialog.Month = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
            budgetFromDialog.IsActive = true;
            budgetFromDialog.CreatedByMemberId = budgetFromDialog.Id == 0
                ? memberId
                : (_budgetData.CurrentBudget?.CreatedByMemberId ?? memberId);
            budgetFromDialog.CreatedAt = budgetFromDialog.Id == 0
                ? DateTime.UtcNow
                : (_budgetData.CurrentBudget?.CreatedAt ?? DateTime.UtcNow);
            budgetFromDialog.UpdateTimestamp();

            if (budgetFromDialog.Id == 0)
            {
                _budgetData.CurrentBudget = await BudgetSvc.AddAsync(budgetFromDialog);
                Snackbar.Add("Monthly budget created.", Severity.Success);
            }
            else
            {
                await BudgetSvc.UpdateAsync(budgetFromDialog);
                _budgetData.CurrentBudget = budgetFromDialog;
                Snackbar.Add("Monthly budget updated.", Severity.Success);
            }

            _budgetData = await WellbeingDataSvc.GetBudgetDataAsync(_familyId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Unable to save budget: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenBudgetHistoryAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(_familyId))
            {
                _familyId = await FamilyMemberSvc.GetDefaultFamilyIdAsync();
            }

            var budgets = await BudgetSvc.GetAsync(null, _familyId);
            if (budgets.Count == 0)
            {
                Snackbar.Add("No historical budgets available yet.", Severity.Info);
                return;
            }

            var historyItems = new List<BudgetHistoryDialog.BudgetHistoryEntry>();
            foreach (var budget in budgets.OrderByDescending(b => b.Month))
            {
                var monthStart = new DateTime(budget.Month.Year, budget.Month.Month, 1);
                var monthEnd = monthStart.AddMonths(1);
                var transactions = await TxSvc.GetAsync(from: monthStart, to: monthEnd);
                var spent = transactions.Where(t => !t.IsIncome).Sum(t => t.Amount);

                historyItems.Add(new BudgetHistoryDialog.BudgetHistoryEntry
                {
                    Budget = budget,
                    Spent = spent,
                    Remaining = budget.Limit - spent,
                    UsagePercent = budget.Limit > 0 ? Math.Min(100d, (double)(spent / budget.Limit) * 100) : 0d
                });
            }

            var parameters = new DialogParameters
            {
                [nameof(BudgetHistoryDialog.Items)] = historyItems
            };

            var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                Position = DialogPosition.Center
            };

            DialogService.Show<BudgetHistoryDialog>("Budget History", parameters, options);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Unable to load budget history: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowGoalManagementDialogAsync(
        SavingsGoal goal,
        GoalManagementDialog.GoalManagementInitialView initialView)
    {
        try
        {
            var detailedGoal = await SavingsGoalSvc.GetByIdAsync(goal.Id) ?? goal;
            var contributions = (await SavingsGoalSvc.GetContributionsAsync(goal.Id)).ToList();

            var parameters = new DialogParameters
            {
                [nameof(GoalManagementDialog.Goal)] = detailedGoal,
                [nameof(GoalManagementDialog.Contributions)] = contributions,
                [nameof(GoalManagementDialog.InitialView)] = initialView
            };

            var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
                CloseButton = true,
                Position = DialogPosition.Center
            };

            var dialog = DialogService.Show<GoalManagementDialog>("Goal Center", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled && result.Data is GoalManagementDialog.GoalDialogResult dialogResult)
            {
                if (dialogResult.Outcome == GoalManagementDialog.GoalDialogOutcome.Refresh)
                {
                    await LoadDataAsync();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Unable to load goal details: {ex.Message}", Severity.Error);
        }
    }

    private async Task<string?> ResolveMemberIdAsync()
    {
        if (string.IsNullOrWhiteSpace(_familyId))
        {
            _familyId = await FamilyMemberSvc.GetDefaultFamilyIdAsync();
        }

        if (Auth.CurrentUser is not null)
        {
            return Auth.CurrentUser.Id;
        }

        var members = await FamilyMemberSvc.GetAsync(_familyId);
        return members.FirstOrDefault()?.Id;
    }

    private async Task OpenCreateGoalDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, Position = DialogPosition.Center };
        var dialog = DialogService.Show<DotnetFinancialTrackerApp.Components.Dialogs.CreateSavingsGoalDialog>("Create Savings Goal", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is SavingsGoal goal)
        {
            try
            {
                await SavingsGoalSvc.CreateAsync(goal);
                Snackbar.Add("Savings goal created successfully!", Severity.Success);
                await LoadDataAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error creating goal: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task OpenGoalActions(SavingsGoal goal)
    {
        await ShowGoalManagementDialogAsync(goal, GoalManagementDialog.GoalManagementInitialView.Overview);
    }

    private async Task OpenContributeDialog(SavingsGoal goal)
    {
        var parameters = new DialogParameters
        {
            [nameof(DotnetFinancialTrackerApp.Components.Dialogs.ContributeToGoalDialog.Goal)] = goal
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, Position = DialogPosition.Center };
        var dialog = DialogService.Show<DotnetFinancialTrackerApp.Components.Dialogs.ContributeToGoalDialog>("Contribute to Goal", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadDataAsync();
        }
    }

    private async Task OpenGoalHistoryAsync(SavingsGoal goal) =>
        await ShowGoalManagementDialogAsync(goal, GoalManagementDialog.GoalManagementInitialView.Contributions);
}