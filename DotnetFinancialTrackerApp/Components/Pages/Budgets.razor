@page "/budgets"
@using MudBlazor
@inject DotnetFinancialTrackerApp.Services.IBudgetsService BudgetSvc
@inject IDialogService DialogService

<MudContainer Class="pa-4">
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
        <MudText Typo="Typo.h5">Budgets</MudText>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenAdd">Add</MudButton>
    </MudStack>

    <MudTable Items="_items" Hover="true" Dense="true" Elevation="1">
        <HeaderContent>
            <MudTh>Month</MudTh>
            <MudTh>Category</MudTh>
            <MudTh class="text-end">Limit</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Month.ToString("yyyy-MM")</MudTd>
            <MudTd>@context.Category</MudTd>
            <MudTd Class="text-end">@context.Limit.ToString("C")</MudTd>
            <MudTd Class="text-end">
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="() => OpenEdit(context)" />
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="() => Delete(context.Id)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
 </MudContainer>

@code {
    private readonly DialogOptions _dialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, Position = DialogPosition.Center };
    private List<DotnetFinancialTrackerApp.Models.Budget> _items = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        _items = await BudgetSvc.GetAsync();
    }

    private async void OpenAdd()
    {
        var dialog = DialogService.Show<DotnetFinancialTrackerApp.Components.Dialogs.EditBudgetDialog>("Add Budget", _dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is DotnetFinancialTrackerApp.Models.Budget b)
        {
            await BudgetSvc.AddAsync(b);
            await LoadAsync();
        }
    }

    private async void OpenEdit(DotnetFinancialTrackerApp.Models.Budget item)
    {
        var parameters = new DialogParameters { [nameof(DotnetFinancialTrackerApp.Components.Dialogs.EditBudgetDialog.Model)] = item };
        var dialog = DialogService.Show<DotnetFinancialTrackerApp.Components.Dialogs.EditBudgetDialog>("Edit Budget", parameters, _dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is DotnetFinancialTrackerApp.Models.Budget b)
        {
            await BudgetSvc.UpdateAsync(b);
            await LoadAsync();
        }
    }

    private async Task Delete(int id)
    {
        await BudgetSvc.DeleteAsync(id);
        await LoadAsync();
    }
}
