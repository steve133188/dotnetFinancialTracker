@page "/settings"
@using System.Linq
@using DotnetFinancialTrackerApp.Models
@inject IUserService Users
@inject AuthState Auth
@inject NavigationManager Nav
@inject ISnackbar Snackbar

<PageTitle>User settings</PageTitle>

@if (!_ready)
{
    <MudContainer Class="pa-4">
        <MudProgressCircular Color="Color.Default" Size="Size.Large" Indeterminate="true" Style="color: black;" />
    </MudContainer>
}
else if (!_signedIn)
{
    <MudContainer Class="pa-4">
        <MudAlert Severity="Severity.Warning" Elevation="0">
            Please sign in to manage household accounts.
            <MudButton Class="ms-3" Color="Color.Default" Variant="Variant.Filled" Elevation="0" Href="/login" Style="background-color: black; color: white;">Go to login</MudButton>
        </MudAlert>
    </MudContainer>
}
else
{
    <MudContainer Class="pa-4">
        <MudGrid Class="enhanced-grid" Gutter="GutterSize.Small">
            <MudItem xs="12" md="6">
                <MudPaper Elevation="1" Class="pa-5 glass-card">
                    <MudText Typo="Typo.h6" Class="mb-1">Profile</MudText>
                    <MudText Typo="Typo.body2" Class="mb-4">Update your display name so it appears across dashboards and reports.</MudText>

                    <MudForm @ref="_nameForm" OnValidSubmit="SaveName">
                        <MudTextField @bind-Value="_displayName"
                                      Label="Display name"
                                      Required="true"
                                      For="() => _displayName"
                                      MaxLength="40"
                                      Immediate="true"
                                      Variant="Variant.Outlined" />

                        <MudStack Row="true" Spacing="2" Class="mt-4">
                            <MudButton Type="Button" Variant="Variant.Filled" Color="Color.Default" Elevation="0" OnClick="@SaveName" Style="background-color: black; color: white;">
                                Save name
                            </MudButton>
                            <MudButton Variant="Variant.Text" Elevation="0" OnClick="@ResetName">Reset</MudButton>
                        </MudStack>
                    </MudForm>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudPaper Elevation="1" Class="pa-5 glass-card">
                    <MudText Typo="Typo.h6" Class="mb-1">Security</MudText>
                    <MudText Typo="Typo.body2" Class="mb-4">Change your 4-digit PIN used for quick sign-in.</MudText>

                    <MudForm @ref="_pinForm" OnValidSubmit="ChangePin">
                        <MudTextField @bind-Value="_currentPin"
                                      Label="Current PIN"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Password"
                                      Required="true"
                                      MaxLength="12"
                                      Immediate="true" />
                        <MudTextField @bind-Value="_newPin"
                                      Label="New PIN"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Password"
                                      Required="true"
                                      MaxLength="12"
                                      Immediate="true"
                                      Class="mt-3" />
                        <MudTextField @bind-Value="_confirmPin"
                                      Label="Confirm new PIN"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Password"
                                      Required="true"
                                      MaxLength="12"
                                      Immediate="true"
                                      Class="mt-3" />

                        <MudButton Type="Button" Variant="Variant.Filled" Color="Color.Default" Elevation="0" OnClick="@ChangePin" Class="mt-4" Style="background-color: black; color: white;">
                            Update PIN
                        </MudButton>
                    </MudForm>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <MudGrid Class="enhanced-grid" Gutter="GutterSize.Small">
            <MudItem xs="12" md="6">
                <MudPaper Elevation="1" Class="pa-5 glass-card">
                    <MudText Typo="Typo.h6" Class="mb-1">Add household member</MudText>
                    <MudText Typo="Typo.body2" Class="mb-4">Invite another person to manage finances with their own PIN.</MudText>

                    <MudForm @ref="_addUserForm" OnValidSubmit="CreateUser">
                        <MudTextField @bind-Value="_newUserName"
                                      Label="Name"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      MaxLength="40"
                                      Immediate="true" />
                        <MudTextField @bind-Value="_newUserPin"
                                      Label="PIN"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Password"
                                      Required="true"
                                      MaxLength="12"
                                      Immediate="true"
                                      Class="mt-3" />
                        <MudTextField @bind-Value="_newUserConfirmPin"
                                      Label="Confirm PIN"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Password"
                                      Required="true"
                                      MaxLength="12"
                                      Immediate="true"
                                      Class="mt-3" />

                        <MudButton Type="Button" Variant="Variant.Filled" Color="Color.Default" Elevation="0" OnClick="@CreateUser" Class="mt-4" Style="background-color: black; color: white;">
                            Add user
                        </MudButton>
                    </MudForm>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudPaper Elevation="1" Class="pa-5 glass-card household-card">
                    <MudText Typo="Typo.h6" Class="mb-1">Household members</MudText>
                    <MudText Typo="Typo.body2" Class="mb-4">Everyone who can sign in to Kipi on this device.</MudText>

                    @if (_household.Count == 0)
                    {
                        <MudAlert Severity="Severity.Info" Elevation="0">No members yet. Add someone on the left.</MudAlert>
                    }
                    else
                    {
                        <MudList Dense="true" Class="household-list">
                            @foreach (var member in _household)
                            {
                                <MudListItem Class="household-list-item">
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudAvatar Size="Size.Medium" Color="Color.Default" Style="background-color: black; color: white;">@GetInitial(member.Name)</MudAvatar>
                                        <MudStack>
                                            <MudText Typo="Typo.subtitle2">@member.Name</MudText>
                                            <MudText Typo="Typo.caption" Class="household-caption">Member since @member.CreatedAt.ToLocalTime().ToString("MMM yyyy")</MudText>
                                        </MudStack>
                                        <MudSpacer />
                                        @if (member.Id == Auth.CurrentUser!.Id)
                                        {
                                            <MudChip Color="Color.Default" Variant="Variant.Filled" Class="household-chip" Style="background-color: black; color: white;">You</MudChip>
                                        }
                                    </MudStack>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    private bool _ready;
    private bool _signedIn;
    private MudForm? _nameForm;
    private MudForm? _pinForm;
    private MudForm? _addUserForm;

    private string _displayName = string.Empty;
    private string _currentPin = string.Empty;
    private string _newPin = string.Empty;
    private string _confirmPin = string.Empty;

    private string _newUserName = string.Empty;
    private string _newUserPin = string.Empty;
    private string _newUserConfirmPin = string.Empty;

    private List<UserProfile> _household = new();

    protected override async Task OnInitializedAsync()
    {
        _signedIn = Auth.IsAuthenticated;
        if (!_signedIn)
        {
            _ready = true;
            return;
        }

        _displayName = Auth.CurrentUser!.Name;
        await LoadMembers();
        _ready = true;
    }

    private async Task LoadMembers()
    {
        var people = await Users.GetUsersAsync();
        _household = people.OrderBy(u => u.Name).ToList();
    }

    private async Task SaveName()
    {
        if (_nameForm is null) return;
        await _nameForm.Validate();
        if (!_nameForm.IsValid) return;

        var trimmed = _displayName.Trim();
        if (string.IsNullOrWhiteSpace(trimmed))
        {
            Snackbar.Add("Name cannot be empty.", Severity.Warning);
            return;
        }

        if (string.Equals(trimmed, Auth.CurrentUser!.Name, StringComparison.Ordinal))
        {
            Snackbar.Add("That name is already in use for your profile.", Severity.Info);
            return;
        }

        var updated = await Users.UpdateNameAsync(Auth.CurrentUser.Id, trimmed);
        if (updated is null)
        {
            Snackbar.Add("Could not update the name. Please try again.", Severity.Error);
            return;
        }

        Auth.SignIn(updated);
        _displayName = updated.Name;
        await LoadMembers();
        Snackbar.Add("Display name updated.", Severity.Success);
    }

    private void ResetName()
    {
        if (Auth.CurrentUser is null) return;
        _displayName = Auth.CurrentUser.Name;
    }

    private async Task ChangePin()
    {
        if (_pinForm is null) return;
        await _pinForm.Validate();
        if (!_pinForm.IsValid) return;

        if (_newPin.Length < 4)
        {
            Snackbar.Add("PIN should be at least 4 characters.", Severity.Warning);
            return;
        }

        if (!string.Equals(_newPin, _confirmPin, StringComparison.Ordinal))
        {
            Snackbar.Add("PIN confirmation does not match.", Severity.Error);
            return;
        }

        var changed = await Users.UpdatePinAsync(Auth.CurrentUser!.Id, _currentPin, _newPin);
        if (!changed)
        {
            Snackbar.Add("Current PIN is incorrect.", Severity.Error);
            return;
        }

        _currentPin = _newPin = _confirmPin = string.Empty;
        Snackbar.Add("PIN updated.", Severity.Success);
    }

    private async Task CreateUser()
    {
        if (_addUserForm is null) return;
        await _addUserForm.Validate();
        if (!_addUserForm.IsValid) return;

        if (string.IsNullOrWhiteSpace(_newUserName))
        {
            Snackbar.Add("Name is required.", Severity.Warning);
            return;
        }

        if (_newUserPin.Length < 4)
        {
            Snackbar.Add("PIN should be at least 4 characters.", Severity.Warning);
            return;
        }

        if (!string.Equals(_newUserPin, _newUserConfirmPin, StringComparison.Ordinal))
        {
            Snackbar.Add("PIN confirmation must match.", Severity.Error);
            return;
        }

        var created = await Users.CreateAsync(_newUserName, _newUserPin);
        _household.Add(created);
        _household = _household.OrderBy(u => u.Name).ToList();

        _newUserName = string.Empty;
        _newUserPin = string.Empty;
        _newUserConfirmPin = string.Empty;

        Snackbar.Add($"Added {created.Name}.", Severity.Success);
    }

    private static string GetInitial(string name) => string.IsNullOrWhiteSpace(name)
        ? "?"
        : name.Substring(0, 1).ToUpperInvariant();
}
