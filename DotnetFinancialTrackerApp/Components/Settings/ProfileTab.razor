@using DotnetFinancialTrackerApp.Models
@using DotnetFinancialTrackerApp.Services
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudCard Elevation="0" Class="pa-6 profile-card">
    <MudCardContent>
        <MudText Typo="Typo.h6" Class="mb-4 profile-title">Profile</MudText>

        @if (_isLoading)
        {
            <MudProgressCircular Indeterminate="true" Size="Size.Medium" Class="ma-4" />
        }
        else if (CurrentUser != null)
        {
            <EditForm Model="@_profileModel" OnValidSubmit="@SaveProfile">
                <DataAnnotationsValidator />
                <MudStack Spacing="3">
                    <MudTextField @bind-Value="_profileModel.Name"
                                 Label="Display Name"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 For="@(() => _profileModel.Name)" />
                </MudStack>

                <ValidationSummary />

                <MudCardActions Class="pa-0 mt-4">
                    <MudButton ButtonType="ButtonType.Submit"
                              Variant="Variant.Filled"
                              Color="Color.Default"
                              Disabled="@_isSaving"
                              Style="background-color: #000; color: white;">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="me-2" />
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span>Save</span>
                        }
                    </MudButton>
                </MudCardActions>
            </EditForm>

            <MudDivider Class="my-4" />

            <MudText Typo="Typo.subtitle1" Class="security-title">Security</MudText>
            <MudText Typo="Typo.caption" Class="security-description">
                Update the 4-digit PIN you use to sign in.
            </MudText>

            <MudForm @ref="_pinForm" @bind-IsValid="_isPinValid">
                <MudStack Spacing="2">
                    <MudTextField T="string"
                                  Label="Current PIN"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  @bind-Value="_pinModel.CurrentPin"
                                  For="@(() => _pinModel.CurrentPin)" />

                    <MudTextField T="string"
                                  Label="New PIN"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  @bind-Value="_pinModel.NewPin"
                                  For="@(() => _pinModel.NewPin)" />

                    <MudTextField T="string"
                                  Label="Confirm PIN"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  @bind-Value="_pinModel.ConfirmPin"
                                  For="@(() => _pinModel.ConfirmPin)" />

                    <MudButton Variant="Variant.Filled"
                              Color="Color.Default"
                              Disabled="@(!_isPinValid || _isUpdatingPin)"
                              Style="background-color: #000; color: white;"
                              OnClick="@UpdatePinAsync">
                        @if (_isUpdatingPin)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="me-2" />
                        }
                        <span>Update PIN</span>
                    </MudButton>
                </MudStack>
            </MudForm>
        }
        else
        {
            <MudAlert Severity="Severity.Warning">
                Unable to load user profile right now. Please try refreshing.
            </MudAlert>
        }
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public FamilyMember? CurrentUser { get; set; }
    [Parameter] public EventCallback OnUserUpdated { get; set; }

    private ProfileModel _profileModel = new();
    private PinModel _pinModel = new();
    private bool _isLoading = false;
    private bool _isSaving = false;
    private bool _isUpdatingPin = false;
    private MudForm? _pinForm;
    private bool _isPinValid;

    protected override void OnParametersSet()
    {
        if (CurrentUser != null)
        {
            _profileModel = new ProfileModel
            {
                Name = CurrentUser.Name
            };
        }
    }

    private async Task SaveProfile()
    {
        if (CurrentUser == null) return;

        try
        {
            _isSaving = true;

            // Update the user name through the service
            var updatedUser = await UserService.UpdateNameAsync(CurrentUser.Id, _profileModel.Name);

            if (updatedUser != null)
            {
                await OnUserUpdated.InvokeAsync();
                Snackbar.Add("Profile updated successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to update profile", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating profile: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
        }
    }

    private async Task UpdatePinAsync()
    {
        if (CurrentUser == null)
        {
            return;
        }

        if (_pinForm is not null)
        {
            await _pinForm.Validate();
            if (!_isPinValid)
            {
                return;
            }
        }

        if (_pinModel.NewPin != _pinModel.ConfirmPin)
        {
            Snackbar.Add("PIN confirmation does not match.", Severity.Warning);
            return;
        }

        _isUpdatingPin = true;

        try
        {
            var updated = await UserService.UpdatePinAsync(CurrentUser.Id, _pinModel.CurrentPin, _pinModel.NewPin);
            if (!updated)
            {
                Snackbar.Add("Current PIN is incorrect.", Severity.Error);
                return;
            }

            _pinModel = new PinModel();
            if (_pinForm is not null)
            {
                await _pinForm.ResetAsync();
            }
            Snackbar.Add("PIN updated successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating PIN: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isUpdatingPin = false;
        }
    }

    public class ProfileModel
    {
        [Required(ErrorMessage = "Name is required")]
        [StringLength(100, ErrorMessage = "Name must be less than 100 characters")]
        public string Name { get; set; } = string.Empty;
    }

    public class PinModel
    {
        [Required(ErrorMessage = "Current PIN is required")]
        [RegularExpression("^[0-9]{4}$", ErrorMessage = "PIN must be 4 digits.")]
        public string CurrentPin { get; set; } = string.Empty;

        [Required(ErrorMessage = "New PIN is required")]
        [RegularExpression("^[0-9]{4}$", ErrorMessage = "PIN must be 4 digits.")]
        public string NewPin { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm the new PIN")]
        [RegularExpression("^[0-9]{4}$", ErrorMessage = "PIN must be 4 digits.")]
        public string ConfirmPin { get; set; } = string.Empty;
    }
}

<style>
.profile-card {
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 12px;
}

.profile-title {
    font-weight: 600;
    color: #000;
}

.security-title {
    font-weight: 600;
    color: #000;
}

.security-description {
    color: rgba(0, 0, 0, 0.6);
}
</style>
