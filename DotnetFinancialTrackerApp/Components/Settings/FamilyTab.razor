@using DotnetFinancialTrackerApp.Models
@using DotnetFinancialTrackerApp.Services
@using DotnetFinancialTrackerApp.Components.Dialogs
@using System.ComponentModel.DataAnnotations
@inject IFamilyMemberService FamilyMemberService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudStack Spacing="4">
    <!-- Add New Family Member Section -->
    <MudCard Elevation="0" Class="pa-6" Style="border: 1px solid rgba(0, 0, 0, 0.1); border-radius: 12px;">
        <MudCardContent>
            <MudText Typo="Typo.h6" Class="mb-4" Style="font-weight: 600;">Add New Family Member</MudText>

            <EditForm Model="@_newMemberModel" OnValidSubmit="@AddFamilyMember">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_newMemberModel.Name"
                                     Label="Full Name"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     For="@(() => _newMemberModel.Name)" />
                    </MudItem>
                </MudGrid>

                <ValidationSummary />

                <MudCardActions Class="pa-0 mt-4">
                    <MudButton ButtonType="ButtonType.Submit"
                              Variant="Variant.Filled"
                              Color="Color.Default"
                              StartIcon="@Icons.Material.Filled.PersonAdd"
                              Size="Size.Large"
                              Disabled="@_isAddingMember"
                              Style="background-color: #000; color: white;">
                        @if (_isAddingMember)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="me-2" />
                            <span>Adding...</span>
                        }
                        else
                        {
                            <span>Add Family Member</span>
                        }
                    </MudButton>
                </MudCardActions>
            </EditForm>
        </MudCardContent>
    </MudCard>

    <!-- Family Members List -->
    <MudCard Elevation="0" Class="pa-6" Style="border: 1px solid rgba(0, 0, 0, 0.1); border-radius: 12px;">
        <MudCardContent>
            <div class="d-flex justify-space-between align-center mb-4">
                <MudText Typo="Typo.h6" Style="font-weight: 600;">Family Members</MudText>
                <MudChip Label="true" Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small">
                    @FamilyMembers.Count member@(FamilyMembers.Count != 1 ? "s" : "")
                </MudChip>
            </div>

            @if (_isLoadingMembers)
            {
                <MudProgressCircular Indeterminate="true" Size="Size.Medium" Class="ma-4" />
            }
            else if (!FamilyMembers.Any())
            {
                <MudAlert Severity="Severity.Info" Class="mt-4">
                    No family members found. Add your first family member above.
                </MudAlert>
            }
            else
            {
                <MudStack Spacing="3">
                    @foreach (var member in FamilyMembers.OrderBy(m => m.Name))
                    {
                        <MudPaper Elevation="0" Class="pa-4 family-member-card">
                            <div class="d-flex align-center justify-space-between">
                                <div class="d-flex align-center gap-3">
                                    <MudAvatar Size="Size.Medium" Class="member-avatar">
                                        @member.Name.FirstOrDefault()
                                    </MudAvatar>

                                    <div>
                                        <MudText Typo="Typo.subtitle1" Style="font-weight: 600;">@member.Name</MudText>
                                        <div class="d-flex align-center gap-2">
                                        <MudChip Label="true" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default">
                                            Active
                                        </MudChip>
                                        </div>
                                        <MudText Typo="Typo.caption" Style="color: #666;">
                                            Member since @member.CreatedAt.ToString("MMM yyyy")
                                        </MudText>
                                    </div>
                                </div>

                                <div class="d-flex align-center gap-2">
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                                        <MudMenuItem OnClick="@(() => EditMember(member))" Icon="@Icons.Material.Filled.Edit">
                                            Edit Details
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => DeleteMember(member))" Icon="@Icons.Material.Filled.Delete">Delete Member</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => ViewMemberDetails(member))" Icon="@Icons.Material.Filled.Visibility">View Details</MudMenuItem>
                                    </MudMenu>
                                </div>
                            </div>

                        </MudPaper>
                    }
                </MudStack>
            }
        </MudCardContent>
    </MudCard>
</MudStack>

@code {
    [Parameter] public List<FamilyMember> FamilyMembers { get; set; } = new();
    [Parameter] public EventCallback OnFamilyUpdated { get; set; }

    private NewMemberModel _newMemberModel = new();
    private bool _isAddingMember = false;
    private bool _isLoadingMembers = false;

    private async Task AddFamilyMember()
    {
        try
        {
            _isAddingMember = true;

            var newMember = new FamilyMember
            {
                Name = _newMemberModel.Name,
                Pin = "1234" // Default PIN - should be changed on first login
            };

            await FamilyMemberService.AddAsync(newMember);

            _newMemberModel = new NewMemberModel();
            await OnFamilyUpdated.InvokeAsync();
            Snackbar.Add($"{newMember.Name} has been added to the family", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding family member: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isAddingMember = false;
        }
    }

    private async Task EditMember(FamilyMember member)
    {
        var parameters = new DialogParameters { { "Member", member } };
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<EditFamilyMemberDialog>("Edit Family Member", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await OnFamilyUpdated.InvokeAsync();
        }
    }

    private async Task DeleteMember(FamilyMember member)
    {
        try
        {
            await FamilyMemberService.DeleteAsync(member.Id);
            await OnFamilyUpdated.InvokeAsync();
            Snackbar.Add($"{member.Name} has been removed from the family", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting member: {ex.Message}", Severity.Error);
        }
    }

    private async Task ViewMemberDetails(FamilyMember member)
    {
        var parameters = new DialogParameters { { "Member", member } };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };

        DialogService.Show<FamilyMemberDetailsDialog>("Member Details", parameters, options);
    }



    public class NewMemberModel
    {
        [Required(ErrorMessage = "Name is required")]
        [StringLength(100, ErrorMessage = "Name must be less than 100 characters")]
        public string Name { get; set; } = string.Empty;
    }
}

<style>
.family-member-card {
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 12px;
    background: rgba(0, 0, 0, 0.02);
    transition: all 0.2s ease;
}

.family-member-card:hover {
    border-color: rgba(0, 0, 0, 0.3);
    background: rgba(0, 0, 0, 0.05);
}

.member-avatar {
    background: rgba(0, 0, 0, 0.06);
    color: #000;
    font-weight: 600;
}
</style>
